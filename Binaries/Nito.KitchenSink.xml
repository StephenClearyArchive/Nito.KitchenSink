<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nito.KitchenSink</name>
    </assembly>
    <members>
        <member name="T:Nito.KitchenSink.IWeakCollection`1">
            <summary>
            A collection of weak references to objects of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of objects to hold weak references to.</typeparam>
        </member>
        <member name="M:Nito.KitchenSink.IWeakCollection`1.Purge">
            <summary>
            Removes all dead objects from the collection.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.IWeakCollection`1.LiveList">
            <summary>
            Gets a sequence of live objects from the collection, causing a purge.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.IWeakCollection`1.CompleteList">
            <summary>
            Gets a complete sequence of objects from the collection. Does not cause a purge. Null entries represent dead objects.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.IWeakCollection`1.LiveListWithoutPurge">
            <summary>
            Gets a sequence of live objects from the collection without causing a purge.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.IWeakCollection`1.CompleteCount">
            <summary>
            Gets the number of live and dead entries in the collection. Does not cause a purge. O(1).
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.IWeakCollection`1.DeadCount">
            <summary>
            Gets the number of dead entries in the collection. Does not cause a purge. O(n).
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.IWeakCollection`1.LiveCount">
            <summary>
            Gets the number of live entries in the collection, causing a purge. O(n).
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.IWeakCollection`1.LiveCountWithoutPurge">
            <summary>
            Gets the number of live entries in the collection without causing a purge. O(n).
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WeakCollection`1">
            <summary>
            A collection of weak references to objects. Weak references are purged by iteration/count operations, not by add/remove operations.
            </summary>
            <typeparam name="T">The type of object to hold weak references to.</typeparam>
            <remarks>
            <para>Since the collection holds weak references to the actual objects, the collection is comprised of both living and dead references. Living references refer to objects that have not been garbage collected, and may be used as normal references. Dead references refer to objects that have been garbage collected.</para>
            <para>Dead references do consume resources; each dead reference is a garbage collection handle.</para>
            <para>Dead references may be cleaned up by a <see cref="M:Nito.KitchenSink.WeakCollection`1.Purge"/> operation. Some properties and methods cause a purge as a side effect; the member documentation specifies whether a purge takes place.</para>
            </remarks>
        </member>
        <member name="F:Nito.KitchenSink.WeakCollection`1.list">
            <summary>
            The actual collection of strongly-typed weak references.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.WeakCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WeakCollection`1"/> class that is empty.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.WeakCollection`1.Add(`0)">
            <summary>
            Adds a weak reference to an object to the collection. Does not cause a purge.
            </summary>
            <param name="item">The object to add a weak reference to.</param>
        </member>
        <member name="M:Nito.KitchenSink.WeakCollection`1.Remove(`0)">
            <summary>
            Removes a weak reference to an object from the collection. Does not cause a purge.
            </summary>
            <param name="item">The object to remove a weak reference to.</param>
            <returns>True if the object was found and removed; false if the object was not found.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WeakCollection`1.Purge">
            <summary>
            Removes all dead objects from the collection.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.WeakCollection`1.Dispose">
            <summary>
            Frees all resources held by the collection.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.WeakCollection`1.Clear">
            <summary>
            Empties the collection.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.WeakCollection`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The object to locate.</param>
            <returns>True if the collection contains a specific value; false if it does not.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WeakCollection`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            Copies all live objects to an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index to begin writing into the array.</param>
        </member>
        <member name="M:Nito.KitchenSink.WeakCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets a sequence of live objects from the collection, causing a purge.
            </summary>
            <returns>The sequence of live objects.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WeakCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets a sequence of live objects from the collection, causing a purge.
            </summary>
            <returns>The sequence of live objects.</returns>
        </member>
        <member name="P:Nito.KitchenSink.WeakCollection`1.LiveList">
            <summary>
            Gets a sequence of live objects from the collection, causing a purge.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WeakCollection`1.CompleteList">
            <summary>
            Gets a complete sequence of objects from the collection. Does not cause a purge. Null entries represent dead objects.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WeakCollection`1.LiveListWithoutPurge">
            <summary>
            Gets a sequence of live objects from the collection without causing a purge.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WeakCollection`1.CompleteCount">
            <summary>
            Gets the number of live and dead entries in the collection. Does not cause a purge. O(1).
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WeakCollection`1.DeadCount">
            <summary>
            Gets the number of dead entries in the collection. Does not cause a purge. O(n).
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WeakCollection`1.LiveCount">
            <summary>
            Gets the number of live entries in the collection, causing a purge. O(n).
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WeakCollection`1.LiveCountWithoutPurge">
            <summary>
            Gets the number of live entries in the collection without causing a purge. O(n).
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WeakCollection`1.System#Collections#Generic#ICollection{T}#Count">
            <summary>
            Gets the number of live entries in the collection, causing a purge. O(n).
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WeakCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read only. Always returns false.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WeakCollection`1.UnsafeLiveList">
            <summary>
            Gets a sequence of live objects from the collection, causing a purge. The entire sequence MUST always be enumerated!
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.InternetOpenHandle">
            <summary>
            Represents a base internet handle that has been opened by calling the <c>InternetOpen</c> function. Note that this wrapper does NOT support asynchronous operations! Multiple threads may safely call <see cref="M:Nito.KitchenSink.WinInet.InternetHandle.Dispose"/>.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.InternetHandle">
            <summary>
            The base class for all internet handles. Note that this wrapper does NOT support asynchronous operations! Multiple threads may safely call <see cref="M:Nito.KitchenSink.WinInet.InternetHandle.Dispose"/>.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetHandle.safeInternetHandle">
            <summary>
            The underlying safe internet handle.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetHandle.statusCallbackReference">
            <summary>
            A local reference to the status callback delegate wrapper (as passed to unmanaged code), to prevent garbage collection.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetHandle.statusCallback">
            <summary>
            The actual status callback delegate.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.InternetHandle.#ctor(Nito.KitchenSink.WinInet.SafeInternetHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.InternetHandle"/> class with the specified safe internet handle.
            </summary>
            <param name="safeInternetHandle">The safe internet handle.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.InternetHandle.Dispose">
            <summary>
            Closes the internet handle. This method may be safely invoked by any thread; if a thread is in a blocking operation, another thread may close this handle to abort the operation.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.InternetHandle.SafeInternetHandle">
            <summary>
            Gets the safe internet handle. Do not close this handle directly.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.InternetHandle.StatusCallback">
            <summary>
            Gets or sets the internet status callback delegate, used to report progress.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.InternetHandle.InternetCallback">
            <summary>
            An internet status callback delegate, used to report progress.
            </summary>
            <param name="args">The arguments for the callback delegate. This includes the type of callback optionally with other details.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.#ctor(System.String,Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType,System.String,System.String,Nito.KitchenSink.WinInet.InternetOpenHandle.Flags)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.InternetOpenHandle"/> class with the specified parameters.
            </summary>
            <param name="agent">The user agent or process using WinInet. This is sent as the HTTP user agent and WinInet logs.</param>
            <param name="accessType">The type of the proxy used, if any.</param>
            <param name="proxyName">The name of the proxy server if <paramref name="accessType"/> is <see cref="F:Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType.Proxy"/>.</param>
            <param name="proxyBypass">The list of host names or IP addresses that are not routed through the proxy when <paramref name="accessType"/> is <see cref="F:Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType.Proxy"/>. This list may contain wildcards or be equal to the string <c>"&lt;local&gt;"</c>, but should not be an empty string.</param>
            <param name="flags">The flags to use for this internet handle.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.#ctor(System.String,Nito.KitchenSink.WinInet.InternetOpenHandle.Flags)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.InternetOpenHandle"/> class with direct (no proxy) access.
            </summary>
            <param name="agent">The user agent or process using WinInet. This is sent as the HTTP user agent and WinInet logs.</param>
            <param name="flags">The flags to use for this internet handle.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.InternetOpenHandle"/> class with direct (no proxy) access and no special flags.
            </summary>
            <param name="agent">The user agent or process using WinInet. This is sent as the HTTP user agent and WinInet logs.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.Connect(System.String,System.Int32,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Service,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
            <summary>
            Establishes a connection to the specified server.
            </summary>
            <param name="serverName">Name of the server to which to connect.</param>
            <param name="serverPort">The server port to which to connect.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="service">The service type to which to connect.</param>
            <param name="flags">The connection flags.</param>
            <returns>An established internet connection to the specified server.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.ConnectFtp(System.String,System.Int32,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
            <summary>
            Establishes an FTP connection to the specified server.
            </summary>
            <param name="serverName">Name of the server to which to connect.</param>
            <param name="serverPort">The server port to which to connect.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="flags">The connection flags.</param>
            <returns>An established FTP connection to the specified server.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.ConnectFtp(System.String,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
            <summary>
            Establishes an FTP connection to the specified server.
            </summary>
            <param name="serverName">Name of the server to which to connect.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="flags">The connection flags.</param>
            <returns>An established FTP connection to the specified server.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.ConnectFtp(System.String,System.String,System.String)">
            <summary>
            Establishes an FTP connection to the specified server.
            </summary>
            <param name="serverName">Name of the server to which to connect.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <returns>An established FTP connection to the specified server.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.ConnectFtp(System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
            <summary>
            Establishes an FTP connection to the specified server.
            </summary>
            <param name="serverName">Name of the server to which to connect.</param>
            <param name="flags">The connection flags.</param>
            <returns>An established FTP connection to the specified server.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.ConnectFtp(System.String)">
            <summary>
            Establishes an FTP connection to the specified server.
            </summary>
            <param name="serverName">Name of the server to which to connect.</param>
            <returns>An established FTP connection to the specified server.</returns>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType">
            <summary>
            The type of proxy used by this internet handle to access resources.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType.Direct">
            <summary>
            Resolves all host names locally.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType.Preconfig">
            <summary>
            Retrieves the proxy or direct configuration from the registry.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType.PreconfigWithNoAutoproxy">
            <summary>
            Retrieves the proxy or direct configuration from the registry, but prevents the use of a startup script or setup file.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType.Proxy">
            <summary>
            Passes requests to the proxy unless the request matches the proxy bypass list.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.InternetOpenHandle.Flags">
            <summary>
            The flags to use for this internet handle.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetOpenHandle.Flags.None">
            <summary>
            No flags specified.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetOpenHandle.Flags.Offline">
            <summary>
            Does not make network requests; all entries are returned from the cache.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetOpenHandle.Flags.FromCache">
            <summary>
            Does not make network requests; all entries are returned from the cache.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.FtpHandle">
            <summary>
            An FTP connection handle. Normally, the <see cref="T:Nito.KitchenSink.WinInet.FtpConnection"/> class is used instead of this class. Note that this wrapper does NOT support asynchronous operations! Multiple threads may safely call <see cref="M:Nito.KitchenSink.WinInet.InternetHandle.Dispose"/>.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.InternetConnectHandle">
            <summary>
            An internet connection handle (one that has been created using the <c>InternetConnect</c> function). Normally, a derived class such as <see cref="T:Nito.KitchenSink.WinInet.FtpHandle"/> is used instead of this class. Note that this wrapper does NOT support asynchronous operations! Multiple threads may safely call <see cref="M:Nito.KitchenSink.WinInet.InternetHandle.Dispose"/>.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.InternetConnectHandle.#ctor(Nito.KitchenSink.WinInet.InternetHandle,System.String,System.Int32,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Service,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.InternetConnectHandle"/> class with the specified parameters. Normally, <see cref="M:Nito.KitchenSink.WinInet.InternetOpenHandle.Connect(System.String,System.Int32,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Service,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)"/> is used instead of this constructor.
            </summary>
            <param name="parent">The parent opened internet connection.</param>
            <param name="serverName">Name of the server to which to connect.</param>
            <param name="serverPort">The server port to which to connect.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="service">The service type to which to connect.</param>
            <param name="flags">The connection flags.</param>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.InternetConnectHandle.Service">
            <summary>
            The types of services that an <see cref="T:Nito.KitchenSink.WinInet.InternetConnectHandle"/> may connect to.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Service.Ftp">
            <summary>
            FTP server.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Service.Gopher">
            <summary>
            Gopher server.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Service.Http">
            <summary>
            HTTP server.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.InternetConnectHandle.Flags">
            <summary>
            Flags for the internet connection.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Flags.None">
            <summary>
            No connection flags.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Flags.Secure">
            <summary>
            Use SSL/PCT for HTTP requests.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Flags.ExistingConnect">
            <summary>
            Use an existing internet connection handle if one exists with the same attributes.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Flags.Passive">
            <summary>
            Use passive FTP semantics.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpHandle.#ctor(Nito.KitchenSink.WinInet.InternetHandle,System.String,System.Int32,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.FtpHandle"/> class with the specified parameters. Normally, <see cref="M:Nito.KitchenSink.WinInet.InternetOpenHandle.Connect(System.String,System.Int32,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Service,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)"/> or <see cref="O:Nito.KitchenSink.WinInet.InternetOpenHandle.ConnectFtp"/> is used instead of this constructor.
            </summary>
            <param name="parent">The parent internet connection.</param>
            <param name="serverName">Name of the server to which to connect.</param>
            <param name="serverPort">The server port to which to connect.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="flags">The connection flags, such as <see cref="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Flags.Passive"/> for passive FTP.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpHandle.CreateDirectory(System.String)">
            <summary>
            Creates the specified directory on the remote FTP server.
            </summary>
            <param name="directory">The directory to create.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpHandle.GetCurrentDirectory">
            <summary>
            Retrieves the current working directory on the remote FTP server.
            </summary>
            <returns>The current working directory on the remote FTP server.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpHandle.DeleteFile(System.String)">
            <summary>
            Deletes the specified file on the remote FTP server.
            </summary>
            <param name="fileName">The file to delete.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpHandle.GetFile(System.String,System.String,System.Boolean,Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags)">
            <summary>
            Downloads the specified remote file from the FTP server, saving it at a local path and filename.
            </summary>
            <param name="remoteFile">The remote file to download.</param>
            <param name="localFile">The local path and filename to which to save the file.</param>
            <param name="failIfExists">Whether to fail if the local file specified by <paramref name="localFile"/> already exists.</param>
            <param name="flags">Additional flags for this action. At least <see cref="F:Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags.Ascii"/> or <see cref="F:Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags.Binary"/> should be specified.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpHandle.PutFile(System.String,System.String,Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags)">
            <summary>
            Uploads the specified local file to the FTP server, saving it at a remote path and filename.
            </summary>
            <param name="localFile">The local file to upload.</param>
            <param name="remoteFile">The remote path and filename to which to save the file.</param>
            <param name="flags">Additional flags for this action. At least <see cref="F:Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags.Ascii"/> or <see cref="F:Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags.Binary"/> should be specified.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpHandle.RemoveDirectory(System.String)">
            <summary>
            Removes the specified directory from the remote FTP server.
            </summary>
            <param name="directory">The directory to remove.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpHandle.RenameFile(System.String,System.String)">
            <summary>
            Renames the specified file on the FTP server.
            </summary>
            <param name="oldName">The old file name.</param>
            <param name="newName">The new file name.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpHandle.SetCurrentDirectory(System.String)">
            <summary>
            Sets the current working directory on the remote FTP server.
            </summary>
            <param name="directory">The new current working directory.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpHandle.FindFiles(System.String,Nito.KitchenSink.WinInet.FtpHandle.FindFilesFlags)">
            <summary>
            Finds matching files on the remote FTP server.
            </summary>
            <param name="search">The search string, which may include wildcards and/or directory information.</param>
            <param name="flags">Additional flags for this action.</param>
            <returns>All files matching the query on the remote FTP server.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpHandle.FindFiles(System.String)">
            <summary>
            Finds matching files on the remote FTP server.
            </summary>
            <param name="search">The search string, which may include wildcards and/or directory information.</param>
            <returns>All files matching the query on the remote FTP server.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpHandle.FindFiles">
            <summary>
            Retrieves all files from the current working directory on the remote FTP server.
            </summary>
            <returns>All files in the current working directory on the remote FTP server.</returns>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.FtpHandle.FindFilesFlags">
            <summary>
            Additional flags for the <see cref="O:Nito.KitchenSink.WinInet.FtpHandle.FindFiles"/> operation.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpHandle.FindFilesFlags.None">
            <summary>
            No additional flags.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpHandle.FindFilesFlags.Hyperlink">
            <summary>
            Forces a reload if there is no Expires time and no LastModified time returned from the server when determining whether to reload the item from the network.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpHandle.FindFilesFlags.NeedFile">
            <summary>
            Causes a temporary file to be created if the file cannot be cached.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpHandle.FindFilesFlags.NoCacheWrite">
            <summary>
            Does not add the returned entity to the cache.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpHandle.FindFilesFlags.Reload">
            <summary>
            Forces a download of the requested file, object, or directory listing from the origin server, not from the cache.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpHandle.FindFilesFlags.Resynchronize">
            <summary>
            Reloads FTP resources.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags">
            <summary>
            Additional flags for the <see cref="M:Nito.KitchenSink.WinInet.FtpHandle.GetFile(System.String,System.String,System.Boolean,Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags)"/> operation.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags.Ascii">
            <summary>
            Transfers file as ASCII.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags.Binary">
            <summary>
            Transfers file as binary.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags.Hyperlink">
            <summary>
            Forces a reload if there is no Expires time and no LastModified time returned from the server when determining whether to reload the item from the network.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags.NeedFile">
            <summary>
            Causes a temporary file to be created if the file cannot be cached.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags.Reload">
            <summary>
            Forces a download of the requested file, object, or directory listing from the origin server, not from the cache.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags.Resynchronize">
            <summary>
            Reloads FTP resources.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags">
            <summary>
            Additional flags for the <see cref="M:Nito.KitchenSink.WinInet.FtpHandle.PutFile(System.String,System.String,Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags)"/> operation.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags.Ascii">
            <summary>
            Transfers file as ASCII.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags.Binary">
            <summary>
            Transfers file as binary.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.FtpDirectoryEntry">
            <summary>
            An entry in an FTP directory listing.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.FtpDirectoryEntry.Attributes">
            <summary>
            Gets or sets the basic attributes of the file or subdirectory.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.FtpDirectoryEntry.Size">
            <summary>
            Gets or sets the size of the file.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.FtpDirectoryEntry.Name">
            <summary>
            Gets or sets the name of the file or subdirectory.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.FtpDirectoryEntry.CreationTime">
            <summary>
            Gets or sets the time that the file or subdirectory was created, if known.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.FtpDirectoryEntry.LastAccessTime">
            <summary>
            Gets or sets the time that the file or subdirectory was last accessed, if known.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.FtpDirectoryEntry.LastWriteTime">
            <summary>
            Gets or sets the time that the file or subdirectory was last written, if known.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.FtpDirectoryEntry.IsDirectory">
            <summary>
            Gets a value indicating whether this entry is a subdirectory.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.FtpDirectoryEntry.AttributeFlags">
            <summary>
            The common values for <see cref="P:Nito.KitchenSink.WinInet.FtpDirectoryEntry.Attributes"/>; note that other values than these may be present.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpDirectoryEntry.AttributeFlags.ReadOnly">
            <summary>
            The file or subdirectory is read-only.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpDirectoryEntry.AttributeFlags.Hidden">
            <summary>
            The file or subdirectory is hidden.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpDirectoryEntry.AttributeFlags.System">
            <summary>
            The file or subdirectory is a system file.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpDirectoryEntry.AttributeFlags.Directory">
            <summary>
            The entry is a subdirectory.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.HackersDelight">
            <summary>
            Helpful methods from the book <a href="http://www.amazon.com/gp/product/0201914654?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0201914654">Hacker's Delight</a>.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.HackersDelight.Reverse(System.UInt32)">
            <summary>
            Reverses the bits in an unsigned integer of data.
            </summary>
            <param name="data">The unsigned integer whose bits are to be reversed.</param>
            <returns>The reversed data.</returns>
        </member>
        <member name="M:Nito.KitchenSink.HackersDelight.Reverse(System.UInt16)">
            <summary>
            Reverses the bits in an unsigned short of data.
            </summary>
            <param name="data">The unsigned short whose bits are to be reversed.</param>
            <returns>The reversed data.</returns>
        </member>
        <member name="M:Nito.KitchenSink.HackersDelight.Reverse(System.Byte)">
            <summary>
            Reverses the bits in a byte of data.
            </summary>
            <param name="data">The byte whose bits are to be reversed.</param>
            <returns>The reversed data.</returns>
        </member>
        <member name="T:Nito.KitchenSink.CRC32">
            <summary>
            A generalized CRC-32 algorithm.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.CRC32.NormalLookupTables">
            <summary>
            The lookup tables for non-reversed polynomials.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.CRC32.ReversedLookupTables">
            <summary>
            The lookup tables for reversed polynomials.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.CRC32.lookupTable">
            <summary>
            A reference to the lookup table.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.CRC32.definition">
            <summary>
            The CRC-32 algorithm definition.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.CRC32.remainder">
            <summary>
            The current value of the remainder.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.CRC32.#ctor(Nito.KitchenSink.CRC32.Definition,System.UInt32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CRC32"/> class with the specified definition and lookup table.
            </summary>
            <param name="definition">The CRC-32 algorithm definition.</param>
            <param name="lookupTable">The lookup table.</param>
        </member>
        <member name="M:Nito.KitchenSink.CRC32.#ctor(Nito.KitchenSink.CRC32.Definition)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CRC32"/> class with the specified definition.
            </summary>
            <param name="definition">The CRC-32 algorithm definition.</param>
        </member>
        <member name="M:Nito.KitchenSink.CRC32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CRC32"/> class with the default definition. Note that the "default" CRC-32 definition is an older IEEE recommendation and there are better polynomials for new protocols.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.CRC32.FindOrGenerateLookupTable(Nito.KitchenSink.CRC32.Definition)">
            <summary>
            Searches the known lookup tables for one matching the given CRC-32 definition; if none is found, a new lookup table is generated and added to the known lookup tables.
            </summary>
            <param name="definition">The CRC-32 definition.</param>
            <returns>The lookup table for the given CRC-32 definition.</returns>
        </member>
        <member name="M:Nito.KitchenSink.CRC32.GenerateLookupTable(Nito.KitchenSink.CRC32.Definition)">
            <summary>
            Generates a lookup table for a CRC-32 algorithm definition. Both <see cref="P:Nito.KitchenSink.CRC32.Definition.TruncatedPolynomial"/> and <see cref="P:Nito.KitchenSink.CRC32.Definition.ReverseDataBytes"/> are used in the calculations.
            </summary>
            <param name="definition">The CRC-32 algorithm definition.</param>
            <returns>The lookup table.</returns>
        </member>
        <member name="M:Nito.KitchenSink.CRC32.Initialize">
            <summary>
            Initializes the CRC-32 calculations.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.CRC32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Nito.KitchenSink.CRC32.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Nito.KitchenSink.CRC32.ReflectedIndex(System.UInt32,System.Byte)">
            <summary>
            Gets the index into the lookup array for a given remainder and data byte. Data byte reversal is taken into account.
            </summary>
            <param name="remainder">The current remainder.</param>
            <param name="data">The data byte.</param>
            <returns>The index into the lookup array.</returns>
        </member>
        <member name="M:Nito.KitchenSink.CRC32.ReflectedShift(System.UInt32)">
            <summary>
            Shifts a byte out of the remainder. This is the high byte or low byte, depending on whether the data bytes are reversed.
            </summary>
            <param name="remainder">The remainder value.</param>
            <returns>The shifted remainder value.</returns>
        </member>
        <member name="P:Nito.KitchenSink.CRC32.Result">
            <summary>
            Gets the result of the CRC-32 algorithm.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.CRC32.Definition">
            <summary>
            Holds parameters for a CRC-32 algorithm.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC32.Definition.Default">
            <summary>
            Gets a CRC-32 defined by the old IEEE standard; used by Ethernet, zip, PNG, etc. Note that this "default" CRC-32 definition is an older IEEE recommendation and there are better polynomials for new protocols. Known as "CRC-32", "CRC-32/ADCCP", and "PKZIP".
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC32.Definition.BZip2">
            <summary>
            Gets a CRC-32 used by BZIP2. Known as "CRC-32/BZIP2" and "B-CRC-32".
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC32.Definition.Castagnoli">
            <summary>
            Gets a modern CRC-32 defined in RFC 3720. Known as "CRC-32C", "CRC-32/ISCSI", and "CRC-32/CASTAGNOLI".
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC32.Definition.Mpeg2">
            <summary>
            Gets a CRC-32 used by the MPEG-2 standard. Known as "CRC-32/MPEG-2".
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC32.Definition.Posix">
            <summary>
            Gets a CRC-32 used by the POSIX "chksum" command; note that the chksum command-line program appends the file length to the contents unless it is empty. Known as "CRC-32/POSIX" and "CKSUM".
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC32.Definition.Aixm">
            <summary>
            Gets a CRC-32 used in the Aeronautical Information eXchange Model. Known as "CRC-32Q".
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC32.Definition.Xfer">
            <summary>
            Gets a very old CRC-32, appearing in "Numerical Recipes in C". Known as "XFER".
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC32.Definition.TruncatedPolynomial">
            <summary>
            Gets or sets the normal (non-reversed, non-reciprocal) polynomial to use for the CRC calculations.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC32.Definition.Initializer">
            <summary>
            Gets or sets the value to which the remainder is initialized at the beginning of the CRC calculation.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC32.Definition.FinalXorValue">
            <summary>
            Gets or sets the value by which the remainder is XOR'ed at the end of the CRC calculation.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC32.Definition.ReverseDataBytes">
            <summary>
            Gets or sets a value indicating whether incoming data bytes are reversed/reflected.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC32.Definition.ReverseResultBeforeFinalXor">
            <summary>
            Gets or sets a value indicating whether the final remainder is reversed/reflected at the end of the CRC calculation before it is XOR'ed with <see cref="P:Nito.KitchenSink.CRC32.Definition.FinalXorValue"/>.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.RolloverLogTraceListener">
            <summary>
            Implements a trace listener that writes messages to an on-disk rolling log.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.RolloverLogTraceListener.files">
            <summary>
            The list of archive files currently in the directory, sorted by name (timestamp).
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.RolloverLogTraceListener.currentFile">
            <summary>
            The current log file, "current.txt".
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.RolloverLogTraceListener.current">
            <summary>
            The text writer for the current log file. This is null if the object has been disposed.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.RolloverLogTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.RolloverLogTraceListener"/> class, with the parameters passed from the application configuration.
            </summary>
            <param name="initializeData">The parameters from the application configuration file.</param>
        </member>
        <member name="M:Nito.KitchenSink.RolloverLogTraceListener.Write(System.String)">
            <summary>
            Writes a message to the log.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Nito.KitchenSink.RolloverLogTraceListener.WriteLine(System.String)">
            <summary>
            Writes a message to the log.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Nito.KitchenSink.RolloverLogTraceListener.Flush">
            <summary>
            Flushes the output buffer. Does not cause a rollover.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.RolloverLogTraceListener.Close">
            <summary>
            Closes the output stream so it no longer receives tracing or debugging output.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.RolloverLogTraceListener.Dispose(System.Boolean)">
            <summary>
            Releases the resources owned by this object.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Nito.KitchenSink.RolloverLogTraceListener.TrimArchiveFiles">
            <summary>
            Removes archived log files (oldest first) if there are too many.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.RolloverLogTraceListener.Rollover(System.DateTime)">
            <summary>
            Trims the archived log files if there are too many, and changes the current log file into an archived log file. The current log file must be closed before invoking this method.
            </summary>
            <param name="now">The date/time stamp of when the current log file gets archived.</param>
        </member>
        <member name="M:Nito.KitchenSink.RolloverLogTraceListener.OpenCurrent">
            <summary>
            Creates a new current log file.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.RolloverLogTraceListener.CloseCurrentAndRollover(System.DateTime)">
            <summary>
            Closes the current log file, rolling over if necessary.
            </summary>
            <param name="now">The date/time stamp of when the current log file gets archived.</param>
        </member>
        <member name="P:Nito.KitchenSink.RolloverLogTraceListener.LogDirectory">
            <summary>
            Gets the log directory, containing the current and all archive log files.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.RolloverLogTraceListener.MaxFileSize">
            <summary>
            Gets the maximum size of the current log file.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.RolloverLogTraceListener.MaxFiles">
            <summary>
            Gets the maximum number of archived log files.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.AsyncOperationExtensions">
            <summary>
            Provides methods useful when dealing with <see cref="T:System.ComponentModel.AsyncOperation"/> instances.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.AsyncOperationExtensions.Post(System.ComponentModel.AsyncOperation,System.Action)">
            <summary>
            Invokes a parameterless delegate using the captured <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
            <param name="asyncOperation">The asynchronous operation that holds the captured <see cref="T:System.Threading.SynchronizationContext"/>.</param>
            <param name="method">The parameterless delegate to invoke.</param>
        </member>
        <member name="M:Nito.KitchenSink.AsyncOperationExtensions.PostOperationCompleted(System.ComponentModel.AsyncOperation,System.Action)">
            <summary>
            Invokes a parameterless delegate using the captured <see cref="T:System.Threading.SynchronizationContext"/>, and ends the asynchronous operation.
            </summary>
            <param name="asyncOperation">The asynchronous operation that holds the captured <see cref="T:System.Threading.SynchronizationContext"/>.</param>
            <param name="method">The parameterless delegate to invoke.</param>
        </member>
        <member name="T:Nito.KitchenSink.SafeGCHandle">
            <summary>
            Helper class to help with managing <see cref="T:System.Runtime.InteropServices.GCHandle"/> resources.
            </summary>
            <remarks>
            <para>The only reason this isn't <c>public</c> is to prevent misuse by end users.</para>
            <para>Note that this class can only be used to represent <see cref="T:System.Runtime.InteropServices.GCHandle"/> objects that should be freed when garbage collected (or disposed). This class cannot be used in several interop situations, such as passing ownership of an object to a callback function.</para>
            </remarks>
        </member>
        <member name="M:Nito.KitchenSink.SafeGCHandle.#ctor(System.Object,System.Runtime.InteropServices.GCHandleType)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.SafeGCHandle"/> class referring to the target in the given way.
            </summary>
            <param name="target">The object to reference.</param>
            <param name="type">The way to reference the object.</param>
        </member>
        <member name="M:Nito.KitchenSink.SafeGCHandle.ReleaseHandle">
            <summary>
            Frees the garbage collection handle.
            </summary>
            <returns>Whether the handle was released successfully.</returns>
        </member>
        <member name="P:Nito.KitchenSink.SafeGCHandle.Handle">
            <summary>
            Gets the underlying allocated garbage collection handle.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.SafeGCHandle.IsInvalid">
            <summary>
            Gets a value indicating whether the handle value is invalid.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WeakReference`1">
            <summary>
            Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.
            </summary>
            <remarks>
            <para>We define our own type, unrelated to <see cref="T:System.WeakReference"/> both to provide type safety and because <see cref="T:System.WeakReference"/> is an incorrect implementation (it does not implement <see cref="T:System.IDisposable"/>).</para>
            </remarks>
            <typeparam name="T">The type of object to reference.</typeparam>
        </member>
        <member name="F:Nito.KitchenSink.WeakReference`1.safeHandle">
            <summary>
            The contained <see cref="T:Nito.KitchenSink.SafeGCHandle"/>.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.WeakReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WeakReference`1"/> class, referencing the specified object.
            </summary>
            <param name="target">The object to track. May not be null.</param>
        </member>
        <member name="M:Nito.KitchenSink.WeakReference`1.Dispose">
            <summary>
            Frees the weak reference.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WeakReference`1.Target">
            <summary>
            Gets the referenced object. Will return null if the object has been garbage collected.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WeakReference`1.IsAlive">
            <summary>
            Gets a value indicating whether the object is still alive (has not been garbage collected).
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.UnsafeNativeMethods">
            <summary>
            Native methods that require a security check for use.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.MAX_PATH">
            <summary>
            Maximum path length.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.ERROR_INSUFFICIENT_BUFFER">
            <summary>
            Win32 error code for an insufficient buffer.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.ERROR_INTERNET_EXTENDED_ERROR">
            <summary>
            WinInet error code indicating that the server has sent its own error message.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.ERROR_NO_MORE_FILES">
            <summary>
            Win32 error code indicating that there are no more files.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.INTERNET_INVALID_STATUS_CALLBACK">
            <summary>
            An invalid internet status callback.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.InternetOpen(System.String,Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType,System.String,System.String,Nito.KitchenSink.WinInet.InternetOpenHandle.Flags)">
            <summary>
            Invokes <c>InternetOpen</c>, handling error conditions.
            </summary>
            <param name="agent">The user agent or process using WinInet. This is sent as the HTTP user agent and WinInet logs.</param>
            <param name="accessType">The type of the proxy used, if any.</param>
            <param name="proxyName">The name of the proxy server if <paramref name="accessType"/> is <see cref="F:Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType.Proxy"/>.</param>
            <param name="proxyBypass">The list of host names or IP addresses that are not routed through the proxy when <paramref name="accessType"/> is <see cref="F:Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType.Proxy"/>. This list may contain wildcards or be equal to the string <c>"&lt;local&gt;"</c>, but should not be an empty string.</param>
            <param name="flags">The flags to use for this internet handle.</param>
            <returns>The opened internet handle.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.InternetConnect(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String,System.UInt16,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Service,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
            <summary>
            Invokes <c>InternetConnect</c>, handling error conditions.
            </summary>
            <param name="internet">The parent opened internet handle.</param>
            <param name="serverName">Name of the server to which to connect.</param>
            <param name="serverPort">The server port to which to connect.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="service">The service type to which to connect.</param>
            <param name="flags">The connection flags.</param>
            <returns>The connected internet handle.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpCreateDirectory(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String)">
            <summary>
            Invokes <c>FtpCreateDirectory</c>, handling error conditions.
            </summary>
            <param name="connect">The connected internet handle.</param>
            <param name="directory">The directory to create.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpGetCurrentDirectory(Nito.KitchenSink.WinInet.SafeInternetHandle)">
            <summary>
            Invokes <c>FtpGetCurrentDirectory</c>, handling error conditions.
            </summary>
            <param name="connect">The connected internet handle.</param>
            <returns>The current working directory on the remote FTP server.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpDeleteFile(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String)">
            <summary>
            Invokes <c>FtpDeleteFile</c>, handling error conditions.
            </summary>
            <param name="connect">The connected internet handle.</param>
            <param name="fileName">The file to delete.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpGetFile(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String,System.String,System.Boolean,Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags)">
            <summary>
            Invokes <c>FtpGetFile</c>, handling error conditions.
            </summary>
            <param name="connect">The connected internet handle.</param>
            <param name="remoteFile">The remote file to download.</param>
            <param name="localFile">The local path and filename to which to save the file.</param>
            <param name="failIfExists">Whether to fail if the local file specified by <paramref name="localFile"/> already exists.</param>
            <param name="flags">Additional flags for this action. At least <see cref="F:Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags.Ascii"/> or <see cref="F:Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags.Binary"/> should be specified.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpPutFile(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String,System.String,Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags)">
            <summary>
            Invokes <c>FtpPutFile</c>, handling error conditions.
            </summary>
            <param name="connect">The connected internet handle.</param>
            <param name="localFile">The local file to upload.</param>
            <param name="remoteFile">The remote path and filename to which to save the file.</param>
            <param name="flags">Additional flags for this action. At least <see cref="F:Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags.Ascii"/> or <see cref="F:Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags.Binary"/> should be specified.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpRemoveDirectory(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String)">
            <summary>
            Invokes <c>FtpRemoveDirectory</c>, handling error conditions.
            </summary>
            <param name="connect">The connected internet handle.</param>
            <param name="directory">The directory to remove.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpRenameFile(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String,System.String)">
            <summary>
            Invokes <c>FtpRenameFile</c>, handling error conditions.
            </summary>
            <param name="connect">The connected internet handle.</param>
            <param name="oldName">The old file name.</param>
            <param name="newName">The new file name.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpSetCurrentDirectory(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String)">
            <summary>
            Invokes <c>FtpRenameFile</c>, handling error conditions.
            </summary>
            <param name="connect">The connected internet handle.</param>
            <param name="directory">The new current working directory.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.InternetSetStatusCallback(Nito.KitchenSink.WinInet.SafeInternetHandle,Nito.KitchenSink.WinInet.InternetHandle.InternetCallback)">
            <summary>
            Invokes <c>InternetSetStatusCallback</c>, handling error conditions. Returns the wrapper for the delegate, which is actually passed to <c>InternetSetStatusCallback</c>.
            </summary>
            <param name="internet">The internet handle.</param>
            <param name="callback">The internet status callback delegate, used to report progress.</param>
            <returns>The wrapper created for <paramref name="callback"/>, which is actually passed to the unmanaged <c>InternetSetStatusCallback</c> function.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpFindFirstFile(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String,Nito.KitchenSink.WinInet.FtpHandle.FindFilesFlags,Nito.KitchenSink.WinInet.FtpDirectoryEntry@,Nito.KitchenSink.WinInet.SafeInternetHandle@)">
            <summary>
            Invokes <c>FtpFindFirstFile</c>, handling error conditions. Returns <c>false</c> if there are no matching files.
            </summary>
            <param name="connect">The internet connection handle.</param>
            <param name="search">The search string, which may include wildcards and/or directory information.</param>
            <param name="flags">Additional flags for this action.</param>
            <param name="first">On return, the details for the first matching remote file/directory.</param>
            <param name="find">On return, the find handle.</param>
            <returns><c>true</c> if there is at least one matching file; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpFindNextFile(Nito.KitchenSink.WinInet.SafeInternetHandle,Nito.KitchenSink.WinInet.FtpDirectoryEntry@)">
            <summary>
            Invokes <c>FtpFindFirstFile</c>, handling error conditions. Returns <c>false</c> if there are no more matching files.
            </summary>
            <param name="find">The find handle.</param>
            <param name="next">On return, the details for the first matching remote file/directory.</param>
            <returns><c>true</c> if another file was found; <c>false</c> if there are no more matching files.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.CreateInternetStatusCallback(Nito.KitchenSink.WinInet.InternetHandle.InternetCallback)">
            <summary>
            Creates a wrapper for the provided internet status callback delegate.
            </summary>
            <param name="callback">The user-provided internet status callback delegate.</param>
            <returns>The wrapped internet status callback delegate.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.GetLastInternetException">
            <summary>
            Constructs an <see cref="T:System.Exception"/> instance for the last Win32 error, using server-reported error message if possible; otherwise WinInet.dll error messages; otherwise system error messages.
            </summary>
            <returns>An <see cref="T:System.Exception"/> instance for the last Win32 error.</returns>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.UnsafeNativeMethods.InternetStatusCallback">
            <summary>
            The delegate type of the internet status callback wrapper, passed to <c>InternetSetStatusCallback</c>.
            </summary>
            <param name="hInternet">The internet handle. This parameter is ignored.</param>
            <param name="dwContext">The context passed to the internet operation. This parameter is ignored.</param>
            <param name="dwInternetStatus">The type of notification.</param>
            <param name="lpvStatusInformation">Extra data associated with the notification.</param>
            <param name="dwStatusInformationLength">The length of the extra data in <paramref name="lpvStatusInformation"/>.</param>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpWin32FindData">
            <summary>
            Marshal structure for FTP find file details. Almost identical to <c>WIN32_FILE_DATA</c>, except that the FILETIME fields are local time.
            </summary>
            <remarks>
            <para>Normally, the Pack is correct at 8; however, for ease of use, we've redefined a couple of uint+uint pairs to be a single long,
            so we need to adjust the packing so that padding isn't inserted after "Attributes"</para>
            </remarks>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpWin32FindData.Attributes">
            <summary>
            The basic attributes of the file or subdirectory.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpWin32FindData.CreationTime">
            <summary>
            The time that the file or subdirectory was created, if known.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpWin32FindData.LastAccessTime">
            <summary>
            The time that the file or subdirectory was last accessed, if known.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpWin32FindData.LastWriteTime">
            <summary>
            The time that the file or subdirectory was last accessed, if known.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpWin32FindData.FileSizeHigh">
            <summary>
            The high 32 bits of the size of the file.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpWin32FindData.FileSizeLow">
            <summary>
            The low 32 bits of the size of the file.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpWin32FindData._">
            <summary>
            Reserved for future expansionB.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpWin32FindData.FileName">
            <summary>
            The name of the file/directory.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpWin32FindData.AlternateFileName">
            <summary>
            The 8.3 shortened name of the file/directory.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpWin32FindData.ToFtpDirectoryEntry">
            <summary>
            Converts from <see cref="T:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpWin32FindData"/> to <see cref="T:Nito.KitchenSink.WinInet.FtpDirectoryEntry"/>.
            </summary>
            <returns>An <see cref="T:Nito.KitchenSink.WinInet.FtpDirectoryEntry"/> instance</returns>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.SafeNativeMethods">
            <summary>
            Native methods that are safe for any caller.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.SafeNativeMethods.FtpLocalFileTimeToFileTime(System.Int64)">
            <summary>
            Converts a local FILETIME to a Utc FILETIME.
            </summary>
            <param name="localFileTime">The local FILETIME to convert.</param>
            <returns>Utc FILETIME.</returns>
        </member>
        <member name="T:Nito.KitchenSink.FileSystemPathExtensions">
            <summary>
            Provides extensions to expose <see cref="T:Nito.KitchenSink.FileSystemPath"/> with other system types.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.FileSystemPathExtensions.AsFileSystemPath(System.String)">
            <summary>
            Treats a string as a file system path.
            </summary>
            <param name="source">The source path.</param>
            <returns>The file system path.</returns>
        </member>
        <member name="M:Nito.KitchenSink.FileSystemPathExtensions.AsFileSystemPath(System.Environment.SpecialFolder)">
            <summary>
            Treats a special folder as a file system path. The resulting path is empty if the special folder does not exist or is virtual.
            </summary>
            <param name="specialFolder">The special folder.</param>
            <returns>The file system path of the special folder.</returns>
        </member>
        <member name="T:Nito.KitchenSink.SimplePropertyPath">
            <summary>
            Provides a way to monitor changes along a property path.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.NotifyPropertyChangedBase`1">
            <summary>
            A base class for classes that need to implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
            <typeparam name="TObject">The type of the derived class.</typeparam>
        </member>
        <member name="F:Nito.KitchenSink.NotifyPropertyChangedBase`1.propertyChanged">
            <summary>
            The backing delegate for <see cref="E:Nito.KitchenSink.NotifyPropertyChangedBase`1.PropertyChanged"/>.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.NotifyPropertyChangedBase`1.OnItemsPropertyChanged">
            <summary>
            Raises <see cref="E:Nito.KitchenSink.NotifyPropertyChangedBase`1.PropertyChanged"/> for the Items[] property.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.NotifyPropertyChangedBase`1.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Raises <see cref="E:Nito.KitchenSink.NotifyPropertyChangedBase`1.PropertyChanged"/> for the given property.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="expression">The lambda expression identifying the property that changed.</param>
        </member>
        <member name="M:Nito.KitchenSink.NotifyPropertyChangedBase`1.OnPropertyChanged">
            <summary>
            Raises <see cref="E:Nito.KitchenSink.NotifyPropertyChangedBase`1.PropertyChanged"/> for all properties.
            </summary>
        </member>
        <member name="E:Nito.KitchenSink.NotifyPropertyChangedBase`1.PropertyChanged">
            <summary>
            Provides notification of changes to a property value.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.SimplePropertyPath.trace">
            <summary>
            The trace source for binding errors (this is the same one used by WPF's bindings).
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.SimplePropertyPath.root">
            <summary>
            The actual root object for this property path.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.SimplePropertyPath.path">
            <summary>
            The path to evaluate.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.SimplePropertyPath.value">
            <summary>
            The result of evaluating <see cref="F:Nito.KitchenSink.SimplePropertyPath.path"/> on <see cref="F:Nito.KitchenSink.SimplePropertyPath.root"/>.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.SimplePropertyPath.subscriptions">
            <summary>
            The list of subscription steps (individual <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> subscriptions) used to keep <see cref="P:Nito.KitchenSink.SimplePropertyPath.Value"/> up-to-date.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.SimplePropertyPath.RefreshValue">
            <summary>
            Reevaluates <see cref="P:Nito.KitchenSink.SimplePropertyPath.Path"/> on <see cref="P:Nito.KitchenSink.SimplePropertyPath.Root"/>, updating <see cref="P:Nito.KitchenSink.SimplePropertyPath.Value"/> if necessary. May invoke <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>.
            </summary>
            <remarks>
            <para>Normally, this function will not be needed. It is only needed if an object evaluated by <see cref="P:Nito.KitchenSink.SimplePropertyPath.Path"/> does not support <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.</para>
            </remarks>
        </member>
        <member name="M:Nito.KitchenSink.SimplePropertyPath.Dispose">
            <summary>
            Unsubscribes from all objects in the property path.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.SimplePropertyPath.UpdateValue(System.Object)">
            <summary>
            Updates the evaluated value and raises <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> if necessary.
            </summary>
            <param name="newValue">The newly-evaluated value.</param>
        </member>
        <member name="M:Nito.KitchenSink.SimplePropertyPath.Dismantle">
            <summary>
            Completely tear down all subscription steps.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.SimplePropertyPath.Construct">
            <summary>
            Builds all subscription steps, if possible.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.SimplePropertyPath.Dismantle(System.Int32)">
            <summary>
            Unsubscribes from each subscription step starting at <paramref name="index"/>.
            </summary>
            <param name="index">The index at which to start dismantling the subscriptions.</param>
        </member>
        <member name="M:Nito.KitchenSink.SimplePropertyPath.Construct(System.Int32,System.Object)">
            <summary>
            Evaluates and subscribes to (if possible) each subscription step starting at <paramref name="index"/>.
            </summary>
            <param name="index">The index at which to start evaluating and subscribing.</param>
            <param name="root">The context object for the subscription step at <paramref name="index"/>.</param>
        </member>
        <member name="P:Nito.KitchenSink.SimplePropertyPath.Root">
            <summary>
            Gets or sets the root object for this property path.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.SimplePropertyPath.Path">
            <summary>
            Gets or sets the property path to evaluate.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.SimplePropertyPath.Value">
            <summary>
            Gets or sets the result of <see cref="P:Nito.KitchenSink.SimplePropertyPath.Path"/> evaluated on <see cref="P:Nito.KitchenSink.SimplePropertyPath.Root"/>.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep">
            <summary>
            Represents a single step in a property path subscription: a single property on a single object.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.eventHandler">
            <summary>
            The actual delegate that is subscribed. This is null if <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object"/> is null or if there is no subscription.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep"/> class with the given property name.
            </summary>
            <param name="name">The name of the property used for evaluation.</param>
        </member>
        <member name="M:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Subscribe(System.Action)">
            <summary>
            Subscribes to <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object"/> if it is not null.
            </summary>
            <param name="action">The action to subscribe.</param>
        </member>
        <member name="M:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Unsubscribe">
            <summary>
            Unsubscribes from <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object"/> if it is not null.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Evaluate">
            <summary>
            Returns the value of the property named <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Name"/> for <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object"/>. This cannot be called if <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object"/> is null.
            </summary>
            <returns>The result of evaluating this subscription step.</returns>
        </member>
        <member name="M:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Overwrite(System.Object)">
            <summary>
            Writes the value of the property named <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Name"/> for <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object"/>. This cannot be called if <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object"/> is null.
            </summary>
            <param name="value">The new value of the property.</param>
        </member>
        <member name="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object">
            <summary>
            Gets or sets the actual object at this subscription step. This may be null.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.IsSubscribed">
            <summary>
            Gets a value indicating whether this subscription step is subscribed.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.NotifyPropertyChangedObject">
            <summary>
            Gets the object used for subscriptions. This is null if <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object"/> does not support <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Name">
            <summary>
            Gets the name of the property subscribed to.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.LinkedListExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.LinkedListExtensions.Nodes``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            The nodes in this linked list, as a sequence. The nodes enumerated by this sequence are safe to pass to <see cref="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})"/> without disturbing the sequence iteration.
            </summary>
            <typeparam name="T">The type of elements contained in the linked list.</typeparam>
            <param name="list">The linked list.</param>
            <returns>A sequence containing each node in this linked list.</returns>
        </member>
        <member name="T:Nito.KitchenSink.EqualityComparer">
            <summary>
            Provides the <see cref="P:Nito.KitchenSink.EqualityComparer.Default"/> property, which is a default implementation of <see cref="T:System.Collections.IEqualityComparer"/>.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.EqualityComparer.valueDefault">
            <summary>
            An instance of <see cref="T:Nito.KitchenSink.EqualityComparer.DefaultEqualityComparer"/>.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.EqualityComparer.Default">
            <summary>
            Gets the default implementation of <see cref="T:System.Collections.IEqualityComparer"/>.
            </summary>
            <remarks>
            <para>The default implementation uses <see cref="M:System.Object.Equals(System.Object,System.Object)"/> and <see cref="M:System.Object.GetHashCode"/> to implement <see cref="T:System.Collections.IEqualityComparer"/>.</para>
            </remarks>
        </member>
        <member name="T:Nito.KitchenSink.EqualityComparer.DefaultEqualityComparer">
            <summary>
            The default implementation of <see cref="T:System.Collections.IEqualityComparer"/>.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.EqualityComparer.DefaultEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>Whether the two objects are equal.</returns>
        </member>
        <member name="M:Nito.KitchenSink.EqualityComparer.DefaultEqualityComparer.GetHashCode(System.Object)">
            <summary>
            Gets the hash code for an object.
            </summary>
            <param name="obj">The object to hash.</param>
            <returns>The hash code for the object.</returns>
        </member>
        <member name="T:Nito.KitchenSink.AnonymousComparer`1">
            <summary>
            An object that implements <see cref="T:System.Collections.Generic.IComparer`1"/> using a delegate.
            </summary>
            <typeparam name="T">The type of items to compare.</typeparam>
        </member>
        <member name="M:Nito.KitchenSink.AnonymousComparer`1.System#Collections#Generic#IComparer{T}#Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value less than 0 if <paramref name="x"/> is less than <paramref name="y"/>, 0 if <paramref name="x"/> is equal to <paramref name="y"/>, or greater than 0 if <paramref name="x"/> is greater than <paramref name="y"/>.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A value less than 0 if <paramref name="x"/> is less than <paramref name="y"/>, 0 if <paramref name="x"/> is equal to <paramref name="y"/>, or greater than 0 if <paramref name="x"/> is greater than <paramref name="y"/>.</returns>
        </member>
        <member name="P:Nito.KitchenSink.AnonymousComparer`1.Compare">
            <summary>
            Gets or sets the Compare delegate, which compares two objects and returns a value less than 0 if its first argument is less than its second argument, 0 if its two arguments are equal, or greater than 0 if its first argument is greater than its second argument.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.FileSystemPath">
            <summary>
            A string that is a file system path.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.FileSystemPath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.FileSystemPath"/> class with the specified actual path string.
            </summary>
            <param name="path">The actual path string. May not be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Nito.KitchenSink.FileSystemPath.op_Implicit(Nito.KitchenSink.FileSystemPath)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Nito.KitchenSink.FileSystemPath"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="source">The source path.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Nito.KitchenSink.FileSystemPath.op_Implicit(System.String)~Nito.KitchenSink.FileSystemPath">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Nito.KitchenSink.FileSystemPath"/>.
            </summary>
            <param name="source">The source path.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Nito.KitchenSink.FileSystemPath.ChangeExtension(System.String)">
            <summary>
            Changes the extension of the file name portion of this path. Returns an empty string if this path does not contain a file name portion.
            </summary>
            <param name="extension">The new extension, with or without the ".". May be <c>null</c> to remove an existing extension.</param>
            <returns>A path with a changed extension.</returns>
        </member>
        <member name="M:Nito.KitchenSink.FileSystemPath.Combine(Nito.KitchenSink.FileSystemPath[])">
            <summary>
            Combines two or more paths. Absolute paths remove previous path information.
            </summary>
            <param name="others">The other paths to combine with this one.</param>
            <returns>The combined path.</returns>
        </member>
        <member name="M:Nito.KitchenSink.FileSystemPath.ToAbsolute">
            <summary>
            Converts this path into an absolute path, using the current directory if necessary. This path may not be an empty path.
            </summary>
            <returns>An absolute path.</returns>
        </member>
        <member name="P:Nito.KitchenSink.FileSystemPath.RandomFileName">
            <summary>
            Gets random name that can be used as a folder or file name.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.FileSystemPath.TempFile">
            <summary>
            Gets the path of a temporary file that has been created.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.FileSystemPath.TempPath">
            <summary>
            Gets the path of the temporary directory.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.FileSystemPath.Path">
            <summary>
            Gets the actual path string. This is never <c>null</c>, but may be empty.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.FileSystemPath.Root">
            <summary>
            Gets the root portion of this path. Returns an empty path if this path does not contain a root portion.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.FileSystemPath.Directory">
            <summary>
            Gets the directory portion of this path. Returns an empty path if this path does not contain a directory portion.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.FileSystemPath.FileName">
            <summary>
            Gets the file name portion of this path. Returns an empty path if this path does not contain a file name portion.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.FileSystemPath.FileNameWithoutExtension">
            <summary>
            Gets the file name portion of this path, stripping the extension. Returns an empty path if this path does not contain a file name portion.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.FileSystemPath.Extension">
            <summary>
            Gets the extension of the file name portion of this path, including the ".". Returns an empty string if this path does not contain a file name portion or the file name does not have an extension.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.FileSystemPath.HasExtension">
            <summary>
            Gets a value indicating whether this path has an extension.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.FileSystemPath.IsAbsolute">
            <summary>
            Gets a value indicating whether this path is absolute.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.TaskExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Threading.Tasks.Task"/> class, and task-related functionality.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.TaskExtensions.Async``1(System.Func{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a delegate that invokes the original delegate asynchronously (on a ThreadPool thread), applying a timeout and supporting cancellation. If timeout or cancellation occurs, the delegate runs to completion but its results and any exceptions it raises are ignored.
            </summary>
            <typeparam name="TResult">The type of the result of the delegate.</typeparam>
            <param name="function">The delegate to invoke asynchronously.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> to wait indefinitely.</param>
            <param name="cancellationToken">The cancellation token to observe while waiting.</param>
            <returns>A delegate that invokes the original delegate asynchronously with a timeout and supporting cancellation.</returns>
        </member>
        <member name="M:Nito.KitchenSink.TaskExtensions.WaitOne(System.Threading.WaitHandle,System.Threading.CancellationToken)">
            <summary>
            Waits for a handle to be signalled, allowing cancellation.
            </summary>
            <param name="waitHandle">The wait handle to observe.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.OperationCanceledException">The cancellation token was signalled before the operation completed.</exception>
        </member>
        <member name="M:Nito.KitchenSink.TaskExtensions.WaitOne(System.Threading.WaitHandle,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for a handle to be signalled for a specified time, allowing cancellation. Returns <c>true</c> if the handle was signalled, and <c>false</c> if there was a timeout.
            </summary>
            <param name="waitHandle">The wait handle to observe.</param>
            <param name="millisecondsTimeout">The amount of time to wait for the handle to be signalled, in milliseconds; or <see cref="F:System.Threading.Timeout.Infinite"/> for an infinite wait.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.OperationCanceledException">The cancellation token was signalled before the operation completed.</exception>
            <returns>Returns <c>true</c> if the handle was signalled, and <c>false</c> if there was a timeout.</returns>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.InternetException">
            <summary>
            An error as reported by a remote server.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.InternetException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.InternetException"/> class with the specified attributes.
            </summary>
            <param name="code">The error code, as reported by the remote server.</param>
            <param name="message">The message, as reported by the remote server.</param>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.InternetException.Code">
            <summary>
            Gets the error code, as reported by the remote server.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.ExceptionExtensions">
            <summary>
            Provides useful extension methods for the <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.ExceptionExtensions.Dump(System.Exception,System.Boolean)">
            <summary>
            Returns a flattened, printable detailed error message for this exception and all inner exceptions.
            </summary>
            <param name="ex">The exception from which to get the error details.</param>
            <param name="includeStackTrace">Whether to include the stack trace in the error message.</param>
            <returns>A flattened, printable detailed error message.</returns>
        </member>
        <member name="M:Nito.KitchenSink.ExceptionExtensions.ErrorMessage(System.Exception,System.Boolean)">
            <summary>
            Returns a flattened, printable detailed error message for this exception.
            </summary>
            <param name="ex">The exception from which to get the error details.</param>
            <param name="includeStackTrace">Whether to include the stack trace in the error message.</param>
            <returns>A flattened, printable detailed error message.</returns>
        </member>
        <member name="M:Nito.KitchenSink.ExceptionExtensions.InnerExceptionsAndSelf(System.Exception)">
            <summary>
            Returns a collection of exceptions that contains this exception and all inner exceptions.
            </summary>
            <param name="ex">The exception to enumerate.</param>
            <returns>A sequence of inner exceptions, beginning at the current exception.</returns>
        </member>
        <member name="T:Nito.KitchenSink.CircularBuffer`1">
            <summary>
            A circular buffer, which provides O(1) indexed access, O(1) insertions to the back, O(1) removals from the front, and O(N) resizing. Inserting items is not supported.
            </summary>
            <typeparam name="T">The type of elements contained in the deque.</typeparam>
        </member>
        <member name="F:Nito.KitchenSink.CircularBuffer`1.buffer">
            <summary>
            The actual buffer that holds the view. When setting this, <see cref="F:Nito.KitchenSink.CircularBuffer`1.view"/> should be set to <c>null</c>.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.CircularBuffer`1.offset">
            <summary>
            The offset into <see cref="F:Nito.KitchenSink.CircularBuffer`1.buffer"/> where the view begins. When setting this, <see cref="F:Nito.KitchenSink.CircularBuffer`1.view"/> should be set to <c>null</c>.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.CircularBuffer`1.count">
            <summary>
            The number of valid elements in the view.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.CircularBuffer`1.view">
            <summary>
            The view, cached in a member variable. This may be null, and should be accessed via the <see cref="M:Nito.KitchenSink.CircularBuffer`1.View"/> method.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CircularBuffer`1"/> class with the specified capacity.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <exception cref="T:System.InvalidOperationException">Capacity may not be less than or equal to zero.</exception>
        </member>
        <member name="M:Nito.KitchenSink.CircularBuffer`1.Add(`0)">
            <summary>
            Adds a single element at the back of this circular buffer. If necessary, an element will be removed from the front of the buffer to make room.
            </summary>
            <param name="value">The element to add.</param>
        </member>
        <member name="M:Nito.KitchenSink.CircularBuffer`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of elements at the back of this circular buffer. If necessary, element(s) will be be removed from the front of the buffer to make room.
            </summary>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="M:Nito.KitchenSink.CircularBuffer`1.Remove">
            <summary>
            Removes and returns the first element of this circular buffer.
            </summary>
            <returns>The former first element.</returns>
            <exception cref="T:System.InvalidOperationException">The circular buffer is empty.</exception>
        </member>
        <member name="M:Nito.KitchenSink.CircularBuffer`1.RemoveRange(System.Int32)">
            <summary>
            Removes a range of elements from the front of this circular buffer.
            </summary>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:Nito.KitchenSink.CircularBuffer`1.Clear">
            <summary>
            Removes all items from this deque.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.CircularBuffer`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Nito.KitchenSink.CircularBuffer`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.KitchenSink.CircularBuffer`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.KitchenSink.CircularBuffer`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="M:Nito.KitchenSink.CircularBuffer`1.View">
            <summary>
            Retrieves the rotated view for this deque, with a length equal to <see cref="P:Nito.KitchenSink.CircularBuffer`1.Capacity"/>. The last <c><see cref="P:Nito.KitchenSink.CircularBuffer`1.Capacity"/> - <see cref="P:Nito.KitchenSink.CircularBuffer`1.Count"/></c> elements of this view are not valid elements.
            </summary>
            <returns>The rotated view of the deque.</returns>
        </member>
        <member name="M:Nito.KitchenSink.CircularBuffer`1.PostIncrement(System.Int32)">
            <summary>
            Increments <see cref="F:Nito.KitchenSink.CircularBuffer`1.offset"/> by <paramref name="value"/> using modulo-<see cref="P:Nito.KitchenSink.CircularBuffer`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to increase <see cref="F:Nito.KitchenSink.CircularBuffer`1.offset"/>. May not be negative.</param>
            <returns>The value of <see cref="F:Nito.KitchenSink.CircularBuffer`1.offset"/> after it was incremented.</returns>
        </member>
        <member name="M:Nito.KitchenSink.CircularBuffer`1.DoAdd(`0)">
            <summary>
            Inserts a single element to the back of the view. <see cref="P:Nito.KitchenSink.CircularBuffer`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Nito.KitchenSink.CircularBuffer`1.DoRemove">
            <summary>
            Removes and returns the last element in the view. <see cref="P:Nito.KitchenSink.CircularBuffer`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former last element.</returns>
        </member>
        <member name="P:Nito.KitchenSink.CircularBuffer`1.Capacity">
            <summary>
            Gets or sets the capacity for this circular buffer. This value is always greater than zero; setting this property to a negative or zero value will have no effect.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CircularBuffer`1.Count">
            <summary>
            Gets the number of valid elements contained in this circular buffer. This value is always greater than or equal to zero.
            </summary>
            <returns>The number of valid elements contained in this circular buffer.</returns>
        </member>
        <member name="P:Nito.KitchenSink.CircularBuffer`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CircularBuffer`1.IsFull">
            <summary>
            Gets a value indicating whether this instance is at full capacity.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CircularBuffer`1.IsSplit">
            <summary>
            Gets a value indicating whether the buffer is "split" (meaning the beginning of the view is at a later index in <see cref="F:Nito.KitchenSink.CircularBuffer`1.buffer"/> than the end).
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.A">
            <summary>
            Provides static creation methods for anonymous types.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.A.Comparer``1(System.Func{``0,``0,System.Int32})">
            <summary>
            Creates and returns an <see cref="T:Nito.KitchenSink.AnonymousComparer`1"/> using the specified delegate.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="compare">Compares two objects and returns a value less than 0 if its first argument is less than its second argument, 0 if its two arguments are equal, or greater than 0 if its first argument is greater than its second argument.</param>
            <returns>An <see cref="T:Nito.KitchenSink.AnonymousComparer`1"/>.</returns>
        </member>
        <member name="T:Nito.KitchenSink.ReferenceCountedDisposable`1">
            <summary>
            Provides a reference count for a wrapped disposable object.
            </summary>
            <typeparam name="T">The type of object to wrap.</typeparam>
        </member>
        <member name="F:Nito.KitchenSink.ReferenceCountedDisposable`1.disposable">
            <summary>
            The underlying reference counted disposable.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.ReferenceCountedDisposable`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.ReferenceCountedDisposable`1"/> class, wrapping the specified disposable object.
            </summary>
            <param name="value">The disposable object to wrap.</param>
        </member>
        <member name="M:Nito.KitchenSink.ReferenceCountedDisposable`1.System#IDisposable#Dispose">
            <summary>
            Reduces the reference count on the underlying disposable object.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.ReferenceCountedDisposable`1.AddReference">
            <summary>
            Adds a reference count to this wrapper.
            </summary>
            <returns>A reference-counted wrapper around the same disposable object.</returns>
        </member>
        <member name="P:Nito.KitchenSink.ReferenceCountedDisposable`1.Value">
            <summary>
            Gets the underlying disposable object.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.ReferenceCountedDisposable`1.Reference">
            <summary>
            A reference-counted wrapper around a disposable object.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.ReferenceCountedDisposable`1.Reference.disposable">
            <summary>
            A reference-counted child disposable object.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.ReferenceCountedDisposable`1.Reference.#ctor(Nito.KitchenSink.ReferenceCountedDisposable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.ReferenceCountedDisposable`1.Reference"/> class with the specified parent.
            </summary>
            <param name="parent">The parent, which shares this reference count.</param>
        </member>
        <member name="M:Nito.KitchenSink.ReferenceCountedDisposable`1.Reference.System#IDisposable#Dispose">
            <summary>
            Reduces the reference count on the underlying disposable object.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.ReferenceCountedDisposable`1.Reference.Value">
            <summary>
            Gets the underlying disposable object.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.SafeInternetHandle">
            <summary>
            Represents an unmanaged HINTERNET resource.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.SafeInternetHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.SafeInternetHandle"/> class.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.SafeInternetHandle.ReleaseHandle">
            <summary>
            Executes the code required to free the handle.
            </summary>
            <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.</returns>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.SafeInternetHandle.IsInvalid">
            <summary>
            Gets a value indicating whether the handle value is invalid.
            </summary>
            <returns>true if the handle value is invalid; otherwise, false.</returns>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs">
            <summary>
            Arguments for <see cref="T:Nito.KitchenSink.WinInet.InternetHandle.InternetCallback"/> delegates.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Code">
            <summary>
            Gets or sets the type of notification that this callback represents.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.RawData">
            <summary>
            Gets or sets the raw data of the notification.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode">
            <summary>
            The defined notification types. For future compatibility, notifications with unknown types should be ignored.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.ResolvingName">
            <summary>
            Looking up the IP address of the name. This is a <see cref="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.String"/> argument type, containing the name of the server.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.NameResolved">
            <summary>
            Successfully found the IP address of the name. This is a <see cref="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.String"/> argument type, containing the name of the server.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.ConnectingToServer">
            <summary>
            Connecting to the server endpoint. This is a <see cref="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Socket"/> argument type, containing the endpoint of the server.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.ConnectedToServer">
            <summary>
            Successfully connected to the server endpoint. This is a <see cref="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Socket"/> argument type, containing the endpoint of the server.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.SendingRequest">
            <summary>
            Sending the information request to the server.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.RequestSent">
            <summary>
            Successfully sent the information request to the server. This is a <see cref="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Number"/> argument type, containing the number of bytes sent.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.ReceivingResponse">
            <summary>
            Waiting for the server to respond to a request.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.ResponseReceived">
            <summary>
            Successfully received a response from the server. This is a <see cref="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Number"/> argument type, containing the number of bytes received.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.ClosingConnection">
            <summary>
            Closing the connection to the server.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.ConnectionClosed">
            <summary>
            Successfully closed the conection to the server.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.HandleCreated">
            <summary>
            The <c>InternetConnect</c> function has completed creating a new handle. This is an <see cref="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.AsyncResult"/> argument type, containing the result of the operation.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.HandleClosing">
            <summary>
            The handle value has been terminated.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.DetectingProxy">
            <summary>
            A proxy has been detected.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.RequestComplete">
            <summary>
            An asynchronous operation has completed. This is an <see cref="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.AsyncResult"/> argument type, containing the result of the operation.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.Redirect">
            <summary>
            An HTTP request is about to automatically redirect the request. This is a <see cref="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.String"/> argument type, containing the new URL.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.IntermediateResponse">
            <summary>
            Received an intermediate (100 level) status code message from the server.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.StateChange">
            <summary>
            Moved between a secure (HTTPS) and nonsecure (HTTP) site. This is a <see cref="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Number"/> argument type, containing additional flags.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.CookieSent">
            <summary>
            Indicates the number of cookies sent or suppressed when a request is sent. This is a <see cref="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Number"/> argument type, containing the number of cookies sent or suppressed.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.CookieReceived">
            <summary>
            Indicates the number of cookies accepted, rejected, downgraded, or leashed. This is a <see cref="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Number"/> argument type, containing the number of cookies received.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.P3PHeader">
            <summary>
            The response has a P3P header in it.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.CookieHistory">
            <summary>
            Retrieving content from the cache. This is a <see cref="F:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode.CookieHistory"/> argument type, containing information about past cookie events for this URL.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Socket">
            <summary>
            A notification including socket endpoint information.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Socket.EndPoint">
            <summary>
            Gets or sets the socket endpoint information.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.CookieHistory">
            <summary>
            A notification including cookie history information.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.CookieHistory.Accepted">
            <summary>
            Gets or sets a value indicating whether cookies were accepted.
            </summary>
            <value></value>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.CookieHistory.Leashed">
            <summary>
            Gets or sets a value indicating whether cookies were leashed.
            </summary>
            <value></value>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.CookieHistory.Downgraded">
            <summary>
            Gets or sets a value indicating whether cookies were downgraded.
            </summary>
            <value></value>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.CookieHistory.Rejected">
            <summary>
            Gets or sets a value indicating whether cookies were rejected.
            </summary>
            <value></value>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Number">
            <summary>
            A notification including numerical information.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Number.Value">
            <summary>
            Gets or sets the numerical information; this is actually a UInt32.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.AsyncResult">
            <summary>
            A notification including the result of an asynchronous operation.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.AsyncResult.Result">
            <summary>
            Gets or sets the result of the asynchronous operation.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.AsyncResult.Error">
            <summary>
            Gets or sets the error code; this is actually a UInt32.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.String">
            <summary>
            A notification including string information.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.String.Value">
            <summary>
            Gets or sets the string information.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.ReadOnlyAttribute">
            <summary>
            When used with CciSharp, makes an auto-property read-only. This can only be applied to non-virtual instance properties. The setter on the property must be private and only called from the constructor.
            See http://ccisamples.codeplex.com/wikipage?title=CciSharp.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.DisposableExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.IDisposable"/> types.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.DisposableExtensions.ReferenceCounted``1(``0)">
            <summary>
            Wraps this disposable object in a reference-counted disposable wrapper.
            </summary>
            <typeparam name="T">The type of the underlying disposable object.</typeparam>
            <param name="disposable">The underlying disposable object to wrap.</param>
            <returns>A reference-counted disposable wrapper.</returns>
        </member>
        <member name="T:Nito.KitchenSink.EncodingExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Text.Encoding"/> class.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.EncodingExtensions.GetString(System.Text.Encoding,System.IO.Stream,System.Boolean)">
            <summary>
            Decodes all bytes from a stream into a string.
            </summary>
            <param name="encoding">The character encoding to fall back to, if there are no byte order marks or if <paramref name="detectEncodingFromByteOrderMarks"/> is <c>false</c>.</param>
            <param name="stream">The stream to be read.</param>
            <param name="detectEncodingFromByteOrderMarks">Whether to look for byte order marks at the current position of the stream.</param>
            <returns>The data from the stream, interpreted as a string according to the specified encoding.</returns>
        </member>
        <member name="T:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer">
            <summary>
            Provides message framing for multiple-byte-delimiter-based protocols that support multiple delimiters. Does not perform any unescaping of the message data.
            </summary>
            <remarks>
            <para>No begin delimiter may start with another begin delimiter.</para>
            </remarks>
        </member>
        <member name="F:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.maxMessageSize">
            <summary>
            The maximum size of messages allowed, or 0 if there is no maximum.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.beginDelimiters">
            <summary>
            The beginning delimiters.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.endDelimiters">
            <summary>
            The ending delimiters.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.trace">
            <summary>
            The trace source used for all communications messages.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.dataBuffer">
            <summary>
            The data buffer, which grows dynamically as more data arrives. This is never null. This buffer contains the begin delimiter but not the end delimiter.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.delimiterIndex">
            <summary>
            The index of the matching begin delimiter at the front of the data buffer, and also the index of the end delimiter that must match. This is -1 if there are no matching begin delimiters yet.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.endDelimiterIndex">
            <summary>
            How much of the end delimiter has been seen (implicitly at the end of the data buffer).
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Byte[]},System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer"/> class.
            </summary>
            <param name="maxMessageSize">Maximum size of messages, or 0 if message size is not restricted.</param>
            <param name="beginDelimiters">The begin delimiters.</param>
            <param name="endDelimiters">The end delimiters.</param>
        </member>
        <member name="M:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.Reset">
            <summary>
            Re-initializes the framer instance to a clean state. After this method returns, the framer instance is identical to a newly-constructed instance.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.DataReceived(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Notifies the framer instance that incoming data has been received from the stream. This method will invoke <see cref="E:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.MessageArrived"/> as necessary.
            </summary>
            <remarks>
            <para>This method may invoke <see cref="E:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.MessageArrived"/> zero or more times.</para>
            <para>Zero-length receives are ignored. May streams use a 0-length read to indicate the end of a stream, but the framer takes no action in this case.</para>
            </remarks>
            <param name="data">The data received from the stream. Cannot be null. May be a slice of the read buffer for the stream.</param>
            <exception cref="T:System.Net.ProtocolViolationException">If the data received is not a properly-formed message.</exception>
        </member>
        <member name="M:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.AppendDataToDataBuffer(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Resizes the data buffer and appends the new range of data to it.
            </summary>
            <param name="data">The buffer containing the new data to be appended.</param>
        </member>
        <member name="M:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.CheckMaxMessageSize(System.Int32,System.Int32)">
            <summary>
            Checks for messages that exceed the maximum message size in an overflow-safe way.
            </summary>
            <param name="currentCount">The current size of the message so far.</param>
            <param name="additionalCount">The additional bytes that have arrived as part of this message.</param>
        </member>
        <member name="E:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.MessageArrived">
            <summary>
            Occurs when a message has arrived. Exceptions thrown from this method propogate through <see cref="M:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.DataReceived(System.Collections.Generic.IList{System.Byte})"/>, and may leave the framer instance in an invalid state.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.MessageArrivedEventHandler">
            <summary>
            Receives notification that a message has arrived.
            </summary>
            <param name="delimiterIndex">The index of the matching begin/end delimiters for this message.</param>
            <param name="message">The message that has arrived. This may contain an alias of the data passed to <see cref="M:Nito.KitchenSink.Communication.IFramer.DataReceived(System.Collections.Generic.IList{System.Byte})"/> in this call stack, but will not contain an alias to any data previously passed to <see cref="M:Nito.KitchenSink.Communication.IFramer.DataReceived(System.Collections.Generic.IList{System.Byte})"/>.</param>
        </member>
        <member name="T:Nito.KitchenSink.BooleanExtensions">
            <summary>
            Provides useful extension methods for the <see cref="T:System.Boolean"/> type.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.BooleanExtensions.ToInt32(System.Boolean)">
            <summary>
            Converts a boolean value to an integer value. Returns 0 if the boolean value is false, or 1 if the boolean value is true.
            </summary>
            <param name="value">The boolean value to convert.</param>
            <returns>0 if the boolean value is false, or 1 if the boolean value is true.</returns>
        </member>
        <member name="M:Nito.KitchenSink.BooleanExtensions.ToInt32(System.Nullable{System.Boolean})">
            <summary>
            Converts a nullable boolean value to a nullable integer value. Returns 0 if the boolean value is false, or 1 if the boolean value is true, or null if there is no boolean value.
            </summary>
            <param name="value">The boolean value to convert.</param>
            <returns>0 if the boolean value is false, or 1 if the boolean value is true, or null if there is no boolean value.</returns>
        </member>
        <member name="T:Nito.KitchenSink.HashAlgorithmExtensions">
            <summary>
            Provides OpenSSL-like extension methods for <see cref="T:System.Security.Cryptography.HashAlgorithm"/> and derived classes.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.HashAlgorithmExtensions.Update(System.Security.Cryptography.HashAlgorithm,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the hash value by hashing the provided byte buffer. <see cref="M:System.Security.Cryptography.HashAlgorithm.Initialize"/> should be called before invoking this method for the first time.
            </summary>
            <param name="hash">The hash algorithm, including its state.</param>
            <param name="buffer">The input byte array to include in the hash calculation.</param>
            <param name="offset">The offset into the input byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the input byte array to use as data.</param>
        </member>
        <member name="M:Nito.KitchenSink.HashAlgorithmExtensions.Update(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            Updates the hash value by hashing the provided byte buffer. <see cref="M:System.Security.Cryptography.HashAlgorithm.Initialize"/> should be called before invoking this method for the first time.
            </summary>
            <param name="hash">The hash algorithm, including its state.</param>
            <param name="buffer">The input byte array to include in the hash calculation.</param>
        </member>
        <member name="M:Nito.KitchenSink.HashAlgorithmExtensions.Final(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Finishes the hash calculation and returns the calculated hash value (<see cref="P:System.Security.Cryptography.HashAlgorithm.Hash"/>). This method should only be called once.
            </summary>
            <param name="hash">The hash algorithm, including its state.</param>
            <returns>The calcualted hash value.</returns>
        </member>
        <member name="T:Nito.KitchenSink.AnonymousDisposable">
            <summary>
            An object that implements <see cref="T:System.IDisposable"/> using a delegate.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.AnonymousDisposable.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.AnonymousDisposable.Dispose">
            <summary>
            Gets or sets the Dispose delegate, which implements <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.SafeNativeMethods">
            <summary>
            Native methods that are safe for any caller.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.SafeNativeMethods.FORMAT_MESSAGE_ALLOCATE_BUFFER">
            <summary>
            Instructs <c>FormatMessage</c> to allocate the message buffer.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.SafeNativeMethods.FORMAT_MESSAGE_FROM_HMODULE">
            <summary>
            Informs <c>FormatMessage</c> to search the given <c>HMODULE</c> for the message definition.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.SafeNativeMethods.FORMAT_MESSAGE_IGNORE_INSERTS">
            <summary>
            Instructs <c>FormatMessage</c> to ignore insertion parameters.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.SafeNativeMethods.LOAD_LIBRARY_AS_DATAFILE">
            <summary>
            Instructs <c>LoadLibraryEx</c> to load the DLL but not execute it.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.SafeNativeMethods.FormatMessageFromModule(System.String,System.UInt32)">
            <summary>
            Formats the message from the given DLL.
            </summary>
            <param name="dllName">The name of the DLL to search for the message definition.</param>
            <param name="code">The code identifying the message to look up.</param>
            <returns>The message definition.</returns>
        </member>
        <member name="M:Nito.KitchenSink.SafeNativeMethods.TryFormatMessageFromModule(System.String,System.UInt32)">
            <summary>
            Tries to format the message from the given DLL. Returns <c>null</c> if the DLL could not be loaded or does not contain a definition for the message.
            </summary>
            <param name="dllName">The name of the DLL to search for the message definition.</param>
            <param name="code">The code identifying the message to look up.</param>
            <returns>The message definition.</returns>
        </member>
        <member name="M:Nito.KitchenSink.SafeNativeMethods.LoadLibraryEx(System.String,System.UInt32)">
            <summary>
            Loads the specified DLL library.
            </summary>
            <param name="fileName">Name of the DLL to load.</param>
            <param name="flags">Flags that affect the loading of the library.</param>
            <returns>A handle to the loaded DLL.</returns>
        </member>
        <member name="M:Nito.KitchenSink.SafeNativeMethods.FormatMessageFromModuleAllocatingBuffer(System.UInt32,Nito.KitchenSink.SafeNativeMethods.SafeModuleHandle,System.UInt32,Nito.KitchenSink.SafeNativeMethods.SafeLocalMemoryHandle@,System.UInt32)">
            <summary>
            Formats the message from the given DLL, having the system allocate the message buffer.
            </summary>
            <param name="flags">The formatting message flags. This must include <see cref="F:Nito.KitchenSink.SafeNativeMethods.FORMAT_MESSAGE_ALLOCATE_BUFFER"/>, <see cref="F:Nito.KitchenSink.SafeNativeMethods.FORMAT_MESSAGE_FROM_HMODULE"/>, and <see cref="F:Nito.KitchenSink.SafeNativeMethods.FORMAT_MESSAGE_IGNORE_INSERTS"/>.</param>
            <param name="dll">The DLL to search for the message definition.</param>
            <param name="code">The code identifying the message to look up.</param>
            <param name="localMemory">On return, contains a handle to a local memory buffer allocated by the system.</param>
            <param name="minimumBufferSize">Minimum size of the buffer local memory buffer to allocate.</param>
            <returns>The number of valid characters in the local memory buffer.</returns>
        </member>
        <member name="T:Nito.KitchenSink.SafeNativeMethods.SafeModuleHandle">
            <summary>
            A handle to a DLL (HMODULE).
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.SafeNativeMethods.SafeModuleHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.SafeNativeMethods.SafeModuleHandle"/> class.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.SafeNativeMethods.SafeModuleHandle.ReleaseHandle">
            <summary>
            Frees the handle.
            </summary>
            <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.</returns>
        </member>
        <member name="P:Nito.KitchenSink.SafeNativeMethods.SafeModuleHandle.IsInvalid">
            <summary>
            Gets a value indicating whether the handle value is invalid.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.SafeNativeMethods.SafeLocalMemoryHandle">
            <summary>
            A handle to local memory (PVOID) that must be freed by <c>LocalFree</c>.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.SafeNativeMethods.SafeLocalMemoryHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.SafeNativeMethods.SafeLocalMemoryHandle"/> class.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.SafeNativeMethods.SafeLocalMemoryHandle.ReleaseHandle">
            <summary>
            Frees the handle.
            </summary>
            <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.</returns>
        </member>
        <member name="P:Nito.KitchenSink.SafeNativeMethods.SafeLocalMemoryHandle.IsInvalid">
            <summary>
            Gets a value indicating whether the handle value is invalid.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.Interop">
            <summary>
            Useful methods for p/Invoke interop.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.Interop.GetDelegateForFunctionPointer``1(System.IntPtr)">
            <summary>
            Converts an unmanaged function pointer to a delegate.
            </summary>
            <typeparam name="T">The type of delegate to convert to.</typeparam>
            <param name="pointer">The pointer to convert.</param>
            <returns>The function pointer, as a delegate.</returns>
        </member>
        <member name="M:Nito.KitchenSink.Interop.GetLastWin32Exception">
            <summary>
            Returns a <see cref="T:System.ComponentModel.Win32Exception"/> with the error code of <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
            </summary>
            <returns>A <see cref="T:System.ComponentModel.Win32Exception"/> with the error code of <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
        </member>
        <member name="M:Nito.KitchenSink.Interop.GetLastWin32Exception(System.String)">
            <summary>
            Returns a <see cref="T:System.ComponentModel.Win32Exception"/> with the error code of <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
            </summary>
            <param name="function">The name of the last function that was called. This is included in the error message.</param>
            <returns>A <see cref="T:System.ComponentModel.Win32Exception"/> with the error code of <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
        </member>
        <member name="M:Nito.KitchenSink.Interop.FormatMessageFromDll(System.String,System.Int32)">
            <summary>
            Returns an error message from a message table in a specific DLL; throws an exception if the error code is not defined in the dll. This method will affect <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
            </summary>
            <param name="dll">The DLL to search for the message.</param>
            <param name="code">The code of the message to find.</param>
            <returns>The error message, if found in the DLL; otherwise, an exception is thrown.</returns>
        </member>
        <member name="M:Nito.KitchenSink.Interop.TryFormatMessageFromDll(System.String,System.Int32)">
            <summary>
            Returns an error message from a message table in a specific DLL; returns null if there was some error retrieving the error message. This method will affect <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.
            </summary>
            <param name="dll">The DLL to search for the message.</param>
            <param name="code">The code of the message to find.</param>
            <returns>The error message, if found in the DLL; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:Nito.KitchenSink.CRC16">
            <summary>
            A generalized CRC-16 algorithm.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.CRC16.NormalLookupTables">
            <summary>
            The lookup tables for non-reversed polynomials.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.CRC16.ReversedLookupTables">
            <summary>
            The lookup tables for reversed polynomials.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.CRC16.lookupTable">
            <summary>
            A reference to the lookup table.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.CRC16.definition">
            <summary>
            The CRC-32 algorithm definition.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.CRC16.remainder">
            <summary>
            The current value of the remainder.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.CRC16.#ctor(Nito.KitchenSink.CRC16.Definition,System.UInt16[])">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CRC16"/> class with the specified definition and lookup table.
            </summary>
            <param name="definition">The CRC-16 algorithm definition.</param>
            <param name="lookupTable">The lookup table.</param>
        </member>
        <member name="M:Nito.KitchenSink.CRC16.#ctor(Nito.KitchenSink.CRC16.Definition)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CRC16"/> class with the specified definition.
            </summary>
            <param name="definition">The CRC-16 algorithm definition.</param>
        </member>
        <member name="M:Nito.KitchenSink.CRC16.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CRC16"/> class with the default definition.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.CRC16.FindOrGenerateLookupTable(Nito.KitchenSink.CRC16.Definition)">
            <summary>
            Searches the known lookup tables for one matching the given CRC-16 definition; if none is found, a new lookup table is generated and added to the known lookup tables.
            </summary>
            <param name="definition">The CRC-16 definition.</param>
            <returns>The lookup table for the given CRC-16 definition.</returns>
        </member>
        <member name="M:Nito.KitchenSink.CRC16.GenerateLookupTable(Nito.KitchenSink.CRC16.Definition)">
            <summary>
            Generates a lookup table for a CRC-16 algorithm definition. Both <see cref="P:Nito.KitchenSink.CRC16.Definition.TruncatedPolynomial"/> and <see cref="P:Nito.KitchenSink.CRC16.Definition.ReverseDataBytes"/> are used in the calculations.
            </summary>
            <param name="definition">The CRC-16 algorithm definition.</param>
            <returns>The lookup table.</returns>
        </member>
        <member name="M:Nito.KitchenSink.CRC16.Initialize">
            <summary>
            Initializes the CRC-16 calculations.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.CRC16.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Nito.KitchenSink.CRC16.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Nito.KitchenSink.CRC16.ReflectedIndex(System.UInt16,System.Byte)">
            <summary>
            Gets the index into the lookup array for a given remainder and data byte. Data byte reversal is taken into account.
            </summary>
            <param name="remainder">The current remainder.</param>
            <param name="data">The data byte.</param>
            <returns>The index into the lookup array.</returns>
        </member>
        <member name="M:Nito.KitchenSink.CRC16.ReflectedShift(System.UInt16)">
            <summary>
            Shifts a byte out of the remainder. This is the high byte or low byte, depending on whether the data bytes are reversed.
            </summary>
            <param name="remainder">The remainder value.</param>
            <returns>The shifted remainder value.</returns>
        </member>
        <member name="P:Nito.KitchenSink.CRC16.Result">
            <summary>
            Gets the result of the CRC-16 algorithm.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.CRC16.Definition">
            <summary>
            Holds parameters for a CRC-16 algorithm.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC16.Definition.Default">
            <summary>
            Gets a common CRC-16, used by ARC and LHA.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC16.Definition.CcittFalse">
            <summary>
            Gets a CRC-16 used by floppy disk formats, commonly misidentified as CCITT.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC16.Definition.Ccitt">
            <summary>
            Gets a CRC-16 known as CCITT, used by Kermit. Appears in "Numerical Recipes in C".
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC16.Definition.XModem">
            <summary>
            Gets a CRC-16 used by XMODEM and ZMODEM. Appears in "Numerical Recipes in C".
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC16.Definition.X25">
            <summary>
            Gets a CRC-16 used by X.25, V.42, T.30, RFC 1171. Appears in "Numerical Recipes in C".
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC16.Definition.TruncatedPolynomial">
            <summary>
            Gets or sets the normal (non-reversed, non-reciprocal) polynomial to use for the CRC calculations.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC16.Definition.Initializer">
            <summary>
            Gets or sets the value to which the remainder is initialized at the beginning of the CRC calculation.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC16.Definition.FinalXorValue">
            <summary>
            Gets or sets the value by which the remainder is XOR'ed at the end of the CRC calculation.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC16.Definition.ReverseDataBytes">
            <summary>
            Gets or sets a value indicating whether incoming data bytes are reversed/reflected.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.CRC16.Definition.ReverseResultBeforeFinalXor">
            <summary>
            Gets or sets a value indicating whether the final remainder is reversed/reflected at the end of the CRC calculation before it is XOR'ed with <see cref="P:Nito.KitchenSink.CRC16.Definition.FinalXorValue"/>.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer">
            <summary>
            Provides message framing for multiple-byte-delimiter-based protocols. Does not perform any unescaping of the message data.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.Communication.IFramer">
            <summary>
            A message framer. Converts a stream of bytes into a stream of messages, represented as byte arrays.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.Communication.IFramer.DataReceived(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Notifies the framer instance that incoming data has been received from the stream. This method will invoke <see cref="E:Nito.KitchenSink.Communication.IFramer.MessageArrived"/> as necessary.
            </summary>
            <remarks>
            <para>This method may invoke <see cref="E:Nito.KitchenSink.Communication.IFramer.MessageArrived"/> zero or more times.</para>
            <para>Zero-length receives are ignored. May streams use a 0-length read to indicate the end of a stream, but the framer takes no action in this case.</para>
            </remarks>
            <param name="data">The data received from the stream. Cannot be null. May be a slice of the read buffer for the stream.</param>
            <exception cref="T:System.Net.ProtocolViolationException">If the data received is not a properly-formed message.</exception>
        </member>
        <member name="M:Nito.KitchenSink.Communication.IFramer.Reset">
            <summary>
            Re-initializes the framer instance to a clean state. After this method returns, the framer instance is identical to a newly-constructed instance.
            </summary>
        </member>
        <member name="E:Nito.KitchenSink.Communication.IFramer.MessageArrived">
            <summary>
            Occurs when a message has arrived. Exceptions thrown from this method propogate through <see cref="M:Nito.KitchenSink.Communication.IFramer.DataReceived(System.Collections.Generic.IList{System.Byte})"/>, and may leave the framer instance in an invalid state.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.maxMessageSize">
            <summary>
            The maximum size of messages allowed, or 0 if there is no maximum.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.beginDelimiter">
            <summary>
            The beginning delimiter.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.endDelimiter">
            <summary>
            The ending delimiter.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.trace">
            <summary>
            The trace source used for all communications messages.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.dataBuffer">
            <summary>
            The data buffer, which grows dynamically as more data arrives. This is never null.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.beginDelimiterIndex">
            <summary>
            How much of the begin delimiter has been seen (implicitly at the beginning of the data buffer).
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.endDelimiterIndex">
            <summary>
            How much of the end delimiter has been seen (implicitly at the end of the data buffer).
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.#ctor(System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer"/> class.
            </summary>
            <param name="maxMessageSize">Maximum size of messages, or 0 if message size is not restricted.</param>
            <param name="beginDelimiter">The begin delimiter.</param>
            <param name="endDelimiter">The end delimiter.</param>
        </member>
        <member name="M:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.Reset">
            <summary>
            Re-initializes the framer instance to a clean state. After this method returns, the framer instance is identical to a newly-constructed instance.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.DataReceived(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Notifies the framer instance that incoming data has been received from the stream. This method will invoke <see cref="E:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.MessageArrived"/> as necessary.
            </summary>
            <remarks>
            <para>This method may invoke <see cref="E:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.MessageArrived"/> zero or more times.</para>
            <para>Zero-length receives are ignored. May streams use a 0-length read to indicate the end of a stream, but the framer takes no action in this case.</para>
            </remarks>
            <param name="data">The data received from the stream. Cannot be null. May be a slice of the read buffer for the stream.</param>
            <exception cref="T:System.Net.ProtocolViolationException">If the data received is not a properly-formed message.</exception>
        </member>
        <member name="M:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.AppendDataToDataBuffer(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
            <summary>
            Resizes the data buffer and appends the new range of data to it.
            </summary>
            <param name="data">The buffer containing the new data to be appended.</param>
            <param name="index">The index into <paramref name="data"/> marking the start of the new data.</param>
            <param name="count">The number of bytes to append from <paramref name="data"/> into the data buffer.</param>
        </member>
        <member name="M:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.CheckMaxMessageSize(System.Int32,System.Int32)">
            <summary>
            Checks for messages that exceed the maximum message size in an overflow-safe way.
            </summary>
            <param name="currentCount">The current size of the message so far.</param>
            <param name="additionalCount">The additional bytes that have arrived as part of this message.</param>
        </member>
        <member name="E:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.MessageArrived">
            <summary>
            Occurs when a message has arrived. Exceptions thrown from this method propogate through <see cref="M:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.DataReceived(System.Collections.Generic.IList{System.Byte})"/>, and may leave the framer instance in an invalid state.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.Reflection.ObjectExtensions">
            <summary>
            Defines extension methods useful when doing reflection.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.Reflection.ObjectExtensions.GetProperty(System.Object,System.String)">
            <summary>
            Reads an untyped property from an object.
            </summary>
            <param name="this">The object from which to read the property. May not be <c>null</c>.</param>
            <param name="name">The name of the property to read. This property must exist.</param>
            <returns>The value of the property for that object.</returns>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="this"/> or <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The object <paramref name="this"/> does not have a property named <paramref name="name"/>.</exception>
        </member>
        <member name="M:Nito.KitchenSink.Reflection.ObjectExtensions.GetProperty``1(System.Object,System.String)">
            <summary>
            Reads a property from an object.
            </summary>
            <typeparam name="T">The type of the property that is returned.</typeparam>
            <param name="this">The object from which to read the property. May not be <c>null</c>.</param>
            <param name="name">The name of the property to read. This property must exist.</param>
            <returns>The value of the property for that object.</returns>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="this"/> or <paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The object <paramref name="this"/> does not have a property named <paramref name="name"/>.</exception>
            <exception cref="T:System.InvalidCastException">The property was found, but is not of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="T:Nito.KitchenSink.ObjectExtensions">
            <summary>
            Provides extension methods applicable to all objects.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.ObjectExtensions.GetPropertyName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Retrieves the name of a property referenced by a lambda expression.
            </summary>
            <typeparam name="TObject">The type of object containing the property.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="this">The object containing the property.</param>
            <param name="expression">A lambda expression selecting the property from the containing object.</param>
            <returns>The name of the property referenced by <paramref name="expression"/>.</returns>
        </member>
        <member name="T:Nito.KitchenSink.INotifyPropertyChangedExtensions">
            <summary>
            Provides extension methods for objects implementing <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.INotifyPropertyChangedExtensions.SubscribeToPropertyChanged``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{``0})">
            <summary>
            Subscribes a handler to the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event for a specific property.
            </summary>
            <typeparam name="TObject">The type implementing <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="source">The object implementing <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.</param>
            <param name="expression">The lambda expression selecting the property.</param>
            <param name="handler">The handler that is invoked when the property changes.</param>
            <returns>The actual delegate subscribed to <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>.</returns>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.FtpConnection">
            <summary>
            A connection to an FTP server. This class has thread affinity except for the <see cref="M:Nito.KitchenSink.WinInet.FtpConnection.Dispose"/> method, which may be called by any thread. Other threads may call <see cref="M:Nito.KitchenSink.WinInet.FtpConnection.Dispose"/> to cancel long-running operations.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpConnection.internetOpenHandle">
            <summary>
            The underlying InternetOpen handle.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpConnection.ftpHandle">
            <summary>
            The underlying FTP handle.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpConnection.currentDirectory">
            <summary>
            The current working directory on the remote FTP server, if known. May be <c>null</c>.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.FtpConnection"/> class.
            </summary>
            <param name="process">The name of the process or component making use of this FTP connection (used for logging).</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Connect(System.String,System.Int32,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
            <summary>
            Connects to the specified FTP server.
            </summary>
            <param name="serverName">Name of the server to which to connect.</param>
            <param name="serverPort">The server port to which to connect.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="internetConnectFlags">The connection flags, such as <see cref="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Flags.Passive"/> for passive FTP.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Connect(System.String,System.Int32,System.String,System.String)">
            <summary>
            Connects to the specified FTP server.
            </summary>
            <param name="serverName">Name of the server to which to connect.</param>
            <param name="serverPort">The server port to which to connect.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Connect(System.String,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
            <summary>
            Connects to the specified FTP server.
            </summary>
            <param name="serverName">Name of the server to which to connect.</param>
            <param name="username">The username to use for authentication.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="internetConnectFlags">The connection flags, such as <see cref="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Flags.Passive"/> for passive FTP.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Connect(System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
            <summary>
            Connects to the specified FTP server.
            </summary>
            <param name="serverName">Name of the server to which to connect.</param>
            <param name="internetConnectFlags">The connection flags, such as <see cref="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Flags.Passive"/> for passive FTP.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Connect(System.String)">
            <summary>
            Connects to the specified FTP server.
            </summary>
            <param name="serverName">Name of the server to which to connect.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Connect(System.String,System.Int32,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
            <summary>
            Connects to the specified FTP server.
            </summary>
            <param name="serverName">Name of the server to which to connect.</param>
            <param name="serverPort">The server port to which to connect.</param>
            <param name="internetConnectFlags">The connection flags, such as <see cref="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Flags.Passive"/> for passive FTP.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Connect(System.String,System.Int32)">
            <summary>
            Connects to the specified FTP server.
            </summary>
            <param name="serverName">Name of the server to which to connect.</param>
            <param name="serverPort">The server port to which to connect.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.CreateDirectory(System.String)">
            <summary>
            Creates the specified directory on the remote FTP server. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect"/> must be called before invoking this method.
            </summary>
            <param name="directory">The directory to create.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.DeleteFile(System.String)">
            <summary>
            Deletes the specified file on the remote FTP server. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect"/> must be called before invoking this method.
            </summary>
            <param name="fileName">The file to delete.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.GetFile(System.String,System.String,System.Boolean,Nito.KitchenSink.WinInet.FtpConnection.FileTransferType)">
            <summary>
            Downloads the specified remote file from the FTP server, saving it at a local path and filename. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect"/> must be called before invoking this method.
            </summary>
            <param name="remoteFile">The remote file to download.</param>
            <param name="localFile">The local path and filename to which to save the file.</param>
            <param name="failIfExists">Whether to fail if the local file specified by <paramref name="localFile"/> already exists.</param>
            <param name="type">The type of file to transfer.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.PutFile(System.String,System.String,Nito.KitchenSink.WinInet.FtpConnection.FileTransferType)">
            <summary>
            Uploads the specified local file to the FTP server, saving it at a remote path and filename. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect"/> must be called before invoking this method.
            </summary>
            <param name="localFile">The local file to upload.</param>
            <param name="remoteFile">The remote path and filename to which to save the file.</param>
            <param name="type">The type of file to transfer.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.RemoveDirectory(System.String)">
            <summary>
            Removes the specified directory from the remote FTP server. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect"/> must be called before invoking this method.
            </summary>
            <param name="directory">The directory to remove.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.RenameFile(System.String,System.String)">
            <summary>
            Renames the specified file on the FTP server. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect"/> must be called before invoking this method.
            </summary>
            <param name="oldName">The old file name.</param>
            <param name="newName">The new file name.</param>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.FindFiles(System.String)">
            <summary>
            Finds matching files on the remote FTP server. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect"/> must be called before invoking this method.
            </summary>
            <param name="search">The search string, which may include wildcards and/or directory information.</param>
            <returns>All files matching the query on the remote FTP server.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.FindFiles">
            <summary>
            Retrieves a directory listing of all files from the current working directory on the remote FTP server. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect"/> must be called before invoking this method.
            </summary>
            <returns>All files in the current working directory on the remote FTP server.</returns>
        </member>
        <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Dispose">
            <summary>
            Closes the FTP connection, aborting any operations that are in progress on another thread. This may be used to abort a  <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect"/> operation as well.
            </summary>
        </member>
        <member name="E:Nito.KitchenSink.WinInet.FtpConnection.Progress">
            <summary>
            Occurs when progress is made on a requested operation. This delegate may be invoked from within the methods on this class.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.WinInet.FtpConnection.CurrentDirectory">
            <summary>
            Gets or sets the current directory on the remote FTP server. This may be set to an absolute or relative directory. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect"/> must be called before reading or writing this property.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.WinInet.FtpConnection.FileTransferType">
            <summary>
            File transfer options.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpConnection.FileTransferType.Ascii">
            <summary>
            Transfers file as ASCII.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.WinInet.FtpConnection.FileTransferType.Binary">
            <summary>
            Transfers file as binary.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.DependencyPropertyAttribute">
            <summary>
            When used with CciSharp, turns an auto-property into a property that supports DependencyProperty. This can only be applied to non-virtual instance properties.
            See http://ccisamples.codeplex.com/wikipage?title=CciSharp.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.GuidVariant">
            <summary>
            Known values for the <see cref="T:System.Guid"/> Variant field.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.GuidVariant.NCSBackwardCompatibility">
            <summary>
            Reserved for NCS backward compatibility.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.GuidVariant.RFC4122">
            <summary>
            A GUID conforming to RFC 4122.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.GuidVariant.MicrosoftBackwardCompatibility">
            <summary>
            Reserved for Microsoft backward compatibility.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.GuidVariant.ReservedForFutureDefinition">
            <summary>
            Reserved for future definition.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.GuidVersion">
            <summary>
            Known values for the <see cref="T:System.Guid"/> Version field.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.GuidVersion.TimeBasedRFC4122">
            <summary>
            Time-based (sequential) GUID.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.GuidVersion.DCESecurityWithEmbeddedPOSIXUIDs">
            <summary>
            DCE Security GUID with embedded POSIX UIDs.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.GuidVersion.NameBasedRFC4122UsingMD5">
            <summary>
            Name-based GUID using the MD5 hashing algorithm.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.GuidVersion.RandomRFC4122">
            <summary>
            Random GUID.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.GuidVersion.NameBasedRFC4122UsingSHA1">
            <summary>
            Name-based GUID using the SHA-1 hashing algorithm.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.GuidExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Guid"/> structure.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.GuidExtensions.GetVariant(System.Guid)">
            <summary>
            Gets the 3-bit Variant field of the GUID.
            </summary>
            <param name="guid">The GUID from which to extract the field.</param>
            <returns>The Variant field of the GUID.</returns>
        </member>
        <member name="M:Nito.KitchenSink.GuidExtensions.GetVersion(System.Guid)">
            <summary>
            Gets the 4-bit Version field of the GUID. This is only valid if <see cref="M:Nito.KitchenSink.GuidExtensions.GetVariant(System.Guid)"/> returns <see cref="F:Nito.KitchenSink.GuidVariant.RFC4122"/>.
            </summary>
            <param name="guid">The GUID from which to extract the field.</param>
            <returns>The Version field of the GUID.</returns>
        </member>
        <member name="M:Nito.KitchenSink.GuidExtensions.GetTimestamp(System.Guid)">
            <summary>
            Gets the 60-bit Timestamp field of the GUID. This is only valid if <see cref="M:Nito.KitchenSink.GuidExtensions.GetVersion(System.Guid)"/> returns <see cref="F:Nito.KitchenSink.GuidVersion.TimeBasedRFC4122"/>.
            </summary>
            <param name="guid">The GUID from which to extract the field.</param>
            <returns>The Timestamp field of the GUID.</returns>
        </member>
        <member name="M:Nito.KitchenSink.GuidExtensions.GetCreateTime(System.Guid)">
            <summary>
            Gets the date and time that this GUID was created, in UTC. This is only valid if <see cref="M:Nito.KitchenSink.GuidExtensions.GetVersion(System.Guid)"/> returns <see cref="F:Nito.KitchenSink.GuidVersion.TimeBasedRFC4122"/>.
            </summary>
            <param name="guid">The GUID from which to extract the field.</param>
            <returns>The date and time that this GUID was created, in UTC.</returns>
        </member>
        <member name="M:Nito.KitchenSink.GuidExtensions.GetClockSequence(System.Guid)">
            <summary>
            Gets the 14-bit Clock Sequence field of the GUID. This is only valid if <see cref="M:Nito.KitchenSink.GuidExtensions.GetVersion(System.Guid)"/> returns <see cref="F:Nito.KitchenSink.GuidVersion.TimeBasedRFC4122"/>.
            </summary>
            <param name="guid">The GUID from which to extract the field.</param>
            <returns>The Clock Sequence field of the GUID.</returns>
        </member>
        <member name="M:Nito.KitchenSink.GuidExtensions.GetNode(System.Guid)">
            <summary>
            Gets the 6-byte (48-bit) Node field of the GUID. This is only valid if <see cref="M:Nito.KitchenSink.GuidExtensions.GetVersion(System.Guid)"/> returns <see cref="F:Nito.KitchenSink.GuidVersion.TimeBasedRFC4122"/>.
            </summary>
            <param name="guid">The GUID from which to extract the field.</param>
            <returns>The Node field of the GUID.</returns>
        </member>
        <member name="M:Nito.KitchenSink.GuidExtensions.NodeIsMAC(System.Guid)">
            <summary>
            Returns <c>true</c> if the Node field is a MAC address; returns <c>false</c> if the Node field is a random value. This is only valid if <see cref="M:Nito.KitchenSink.GuidExtensions.GetVersion(System.Guid)"/> returns <see cref="F:Nito.KitchenSink.GuidVersion.TimeBasedRFC4122"/>.
            </summary>
            <param name="guid">The GUID to inspect.</param>
            <returns>Returns <c>true</c> if the Node field is a MAC address; returns <c>false</c> if the Node field is a random value.</returns>
        </member>
        <member name="M:Nito.KitchenSink.GuidExtensions.GetHash(System.Guid)">
            <summary>
            Gets what remains of the 128-bit MD5 or SHA-1 hash of the name used to create this GUID. This is only valid if <see cref="M:Nito.KitchenSink.GuidExtensions.GetVersion(System.Guid)"/> returns <see cref="F:Nito.KitchenSink.GuidVersion.NameBasedRFC4122UsingMD5"/> or <see cref="F:Nito.KitchenSink.GuidVersion.NameBasedRFC4122UsingSHA1"/>. Note that bits 60-63 and bits 70-71 will always be zero (their original values are permanently lost).
            </summary>
            <param name="guid">The GUID from which to extract the hash value.</param>
            <returns>The hash value from the GUID.</returns>
        </member>
        <member name="M:Nito.KitchenSink.GuidExtensions.GetRandom(System.Guid)">
            <summary>
            Gets the 122-bit random value used to create this GUID. This is only valid if <see cref="M:Nito.KitchenSink.GuidExtensions.GetVersion(System.Guid)"/> returns <see cref="F:Nito.KitchenSink.GuidVersion.RandomRFC4122"/>. The most-significant 6 bits of the first octet in the returned array are always 0.
            </summary>
            <param name="guid">The GUID from which to extract the random value.</param>
            <returns>The random value of the GUID.</returns>
        </member>
        <member name="T:Nito.KitchenSink.Deque`1">
            <summary>
            A double-ended queue (deque), which provides O(1) indexed access, O(1) removals from the front and back, amortized O(1) insertions to the front and back, and O(N) insertions and removals anywhere else (with the operations getting slower as the index approaches the middle).
            </summary>
            <typeparam name="T">The type of elements contained in the deque.</typeparam>
        </member>
        <member name="F:Nito.KitchenSink.Deque`1.DefaultCapacity">
            <summary>
            The default capacity.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Deque`1.buffer">
            <summary>
            The circular buffer that holds the view. When setting this, <see cref="F:Nito.KitchenSink.Deque`1.view"/> should be set to <c>null</c>.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Deque`1.offset">
            <summary>
            The offset into <see cref="F:Nito.KitchenSink.Deque`1.buffer"/> where the view begins. When setting this, <see cref="F:Nito.KitchenSink.Deque`1.view"/> should be set to <c>null</c>.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Deque`1.count">
            <summary>
            The number of elements in the view.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Deque`1.view">
            <summary>
            The view, cached in a member variable. This may be null, and should be accessed via the <see cref="M:Nito.KitchenSink.Deque`1.View"/> method.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.Deque`1"/> class with the specified capacity.
            </summary>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.Deque`1"/> class with the elements from the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.Deque`1"/> class.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.AddToBack(`0)">
            <summary>
            Inserts a single element at the back of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.AddToFront(`0)">
            <summary>
            Inserts a single element at the front of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a collection of elements into this deque.
            </summary>
            <param name="index">The index at which the collection is inserted.</param>
            <param name="collection">The collection of elements to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an insertion point for the source.</exception>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from this deque.
            </summary>
            <param name="offset">The index into the deque at which the range begins.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The range [<paramref name="offset"/>, <paramref name="offset"/> + <paramref name="count"/>) is not within the range [0, <see cref="P:Nito.KitchenSink.Deque`1.Count"/>).</exception>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.RemoveFromBack">
            <summary>
            Removes and returns the last element of this deque.
            </summary>
            <returns>The former last element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.RemoveFromFront">
            <summary>
            Removes and returns the first element of this deque.
            </summary>
            <returns>The former first element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.Clear">
            <summary>
            Removes all items from this deque.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.View">
            <summary>
            Retrieves the rotated view for this deque, with a length equal to <see cref="P:Nito.KitchenSink.Deque`1.Capacity"/>. The last <c><see cref="P:Nito.KitchenSink.Deque`1.Capacity"/> - <see cref="P:Nito.KitchenSink.Deque`1.Count"/></c> elements of this view are not valid elements.
            </summary>
            <returns>The rotated view of the deque.</returns>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.PostIncrement(System.Int32)">
            <summary>
            Increments <see cref="F:Nito.KitchenSink.Deque`1.offset"/> by <paramref name="value"/> using modulo-<see cref="P:Nito.KitchenSink.Deque`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to increase <see cref="F:Nito.KitchenSink.Deque`1.offset"/>. May not be negative.</param>
            <returns>The value of <see cref="F:Nito.KitchenSink.Deque`1.offset"/> after it was incremented.</returns>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.PreDecrement(System.Int32)">
            <summary>
            Decrements <see cref="F:Nito.KitchenSink.Deque`1.offset"/> by <paramref name="value"/> using modulo-<see cref="P:Nito.KitchenSink.Deque`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to reduce <see cref="F:Nito.KitchenSink.Deque`1.offset"/>. May not be negative or greater than <see cref="P:Nito.KitchenSink.Deque`1.Capacity"/>.</param>
            <returns>The value of <see cref="F:Nito.KitchenSink.Deque`1.offset"/> before it was decremented.</returns>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.DoAddToBack(`0)">
            <summary>
            Inserts a single element to the back of the view. <see cref="P:Nito.KitchenSink.Deque`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.DoAddToFront(`0)">
            <summary>
            Inserts a single element to the front of the view. <see cref="P:Nito.KitchenSink.Deque`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.DoRemoveFromBack">
            <summary>
            Removes and returns the last element in the view. <see cref="P:Nito.KitchenSink.Deque`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former last element.</returns>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.DoRemoveFromFront">
            <summary>
            Removes and returns the first element in the view. <see cref="P:Nito.KitchenSink.Deque`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former first element.</returns>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.DoInsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Inserts a range of elements into the view.
            </summary>
            <param name="index">The index into the view at which the elements are to be inserted.</param>
            <param name="collection">The elements to insert.</param>
            <param name="collectionCount">The number of elements in <paramref name="collection"/>. Must be greater than zero, and the sum of <paramref name="collectionCount"/> and <see cref="P:Nito.KitchenSink.Deque`1.Count"/> must be less than or equal to <see cref="P:Nito.KitchenSink.Deque`1.Capacity"/>.</param>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.DoRemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the view.
            </summary>
            <param name="index">The index into the view at which the range begins.</param>
            <param name="collectionCount">The number of elements in the range. This must be greater than 0 and less than or equal to <see cref="P:Nito.KitchenSink.Deque`1.Count"/>.</param>
        </member>
        <member name="M:Nito.KitchenSink.Deque`1.EnsureCapacityForOneElement">
            <summary>
            Doubles the capacity if necessary to make room for one more element. When this method returns, <see cref="P:Nito.KitchenSink.Deque`1.IsFull"/> is false.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.Deque`1.Capacity">
            <summary>
            Gets or sets the capacity for this deque. This value is always greater than zero; setting it to a value of zero will set it to the default capacity.
            </summary>
            <exception cref="T:System.InvalidOperationException"><c>Capacity</c> cannot be set to a value less than <see cref="P:Nito.KitchenSink.Deque`1.Count"/>.</exception>
        </member>
        <member name="P:Nito.KitchenSink.Deque`1.Count">
            <summary>
            Gets the number of elements contained in this deque.
            </summary>
            <returns>The number of elements contained in this deque.</returns>
        </member>
        <member name="P:Nito.KitchenSink.Deque`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.Deque`1.IsFull">
            <summary>
            Gets a value indicating whether this instance is at full capacity.
            </summary>
        </member>
        <member name="P:Nito.KitchenSink.Deque`1.IsSplit">
            <summary>
            Gets a value indicating whether the buffer is "split" (meaning the beginning of the view is at a later index in <see cref="F:Nito.KitchenSink.Deque`1.buffer"/> than the end).
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.StreamExtensions">
            <summary>
            Provides methods useful when dealing with streams.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.StreamExtensions.TryGetLength(System.IO.Stream)">
            <summary>
            Attempts to get the length of the stream. Returns -1 if the length of the stream could not be determined.
            </summary>
            <param name="stream">The stream to query.</param>
            <returns>The length of the stream, or -1 if the stream has an undefined length.</returns>
        </member>
        <member name="M:Nito.KitchenSink.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Byte[],System.Action{System.Int64})">
            <summary>
            Synchronously copies the contents of this stream into another stream.
            </summary>
            <param name="source">The stream that is the source of the copy.</param>
            <param name="destination">The stream that is the destination of the copy.</param>
            <param name="buffer">The buffer used by the copy. The size of this buffer determines the sizes of reads and writes made to the streams.</param>
            <param name="progress">A callback method invoked with the number of bytes transferred so far. May be null.</param>
        </member>
        <member name="M:Nito.KitchenSink.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Byte[],System.Action{System.Int64},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Synchronously copies the contents of this stream into another stream, enabling cancellation.
            </summary>
            <param name="source">The stream that is the source of the copy.</param>
            <param name="destination">The stream that is the destination of the copy.</param>
            <param name="buffer">The buffer used by the copy. The size of this buffer determines the sizes of reads and writes made to the streams.</param>
            <param name="progress">A callback method invoked with the number of bytes transferred so far. May be null.</param>
            <param name="cancellationToken">A cancellation token which may be used to cancel the stream copy. May be null.</param>
        </member>
        <member name="T:Nito.KitchenSink.PropertyChangedEventHandlerExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.ComponentModel.PropertyChangedEventHandler"/> delegates.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.PropertyChangedEventHandlerExtensions.Raise``2(System.ComponentModel.PropertyChangedEventHandler,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Raises the delegate for the property identified by a lambda expression.
            </summary>
            <typeparam name="TObject">The type of object containing the property.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="handler">The delegate to raise. If this parameter is null, then no action is taken.</param>
            <param name="sender">The object raising this event.</param>
            <param name="expression">The lambda expression identifying the property that changed.</param>
        </member>
        <member name="M:Nito.KitchenSink.PropertyChangedEventHandlerExtensions.RaiseItems(System.ComponentModel.PropertyChangedEventHandler,System.Object)">
            <summary>
            Raises the delegate for the items property (with the name "Items[]").
            </summary>
            <param name="handler">The delegate to raise. If this parameter is null, then no action is taken.</param>
            <param name="sender">The object raising this event.</param>
        </member>
        <member name="M:Nito.KitchenSink.PropertyChangedEventHandlerExtensions.Raise(System.ComponentModel.PropertyChangedEventHandler,System.Object)">
            <summary>
            Raises the delegate for all properties.
            </summary>
            <param name="handler">The delegate to raise. If this parameter is null, then no action is taken.</param>
            <param name="sender">The object raising this event.</param>
        </member>
        <member name="T:Nito.KitchenSink.Communication.SingleByteDelimiterFramer">
            <summary>
            Provides message framing for single-byte-delimiter-based protocols. Does not perform any unescaping of the message data.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.maxMessageSize">
            <summary>
            The maximum size of messages allowed, or 0 if there is no maximum.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.beginDelimiter">
            <summary>
            The beginning delimiter.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.endDelimiter">
            <summary>
            The ending delimiter.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.trace">
            <summary>
            The trace source used for all communications messages.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.dataBuffer">
            <summary>
            The data buffer, which grows dynamically as more data arrives. This is never null.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.sawBeginDelimiter">
            <summary>
            Whether the begin delimiter has been seen.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.#ctor(System.Int32,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.Communication.SingleByteDelimiterFramer"/> class.
            </summary>
            <param name="maxMessageSize">Maximum size of messages, or 0 if message size is not restricted.</param>
            <param name="beginDelimiter">The begin delimiter.</param>
            <param name="endDelimiter">The end delimiter.</param>
        </member>
        <member name="M:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.Reset">
            <summary>
            Re-initializes the framer instance to a clean state. After this method returns, the framer instance is identical to a newly-constructed instance.
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.DataReceived(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Notifies the framer instance that incoming data has been received from the stream. This method will invoke <see cref="E:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.MessageArrived"/> as necessary.
            </summary>
            <remarks>
            <para>This method may invoke <see cref="E:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.MessageArrived"/> zero or more times.</para>
            <para>Zero-length receives are ignored. May streams use a 0-length read to indicate the end of a stream, but the framer takes no action in this case.</para>
            </remarks>
            <param name="data">The data received from the stream. Cannot be null. May be a slice of the read buffer for the stream.</param>
            <exception cref="T:System.Net.ProtocolViolationException">If the data received is not a properly-formed message.</exception>
        </member>
        <member name="M:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.AppendDataToDataBuffer(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Resizes the data buffer and appends the new range of data to it.
            </summary>
            <param name="data">The buffer containing the new data to be appended.</param>
        </member>
        <member name="M:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.CheckMaxMessageSize(System.Int32,System.Int32)">
            <summary>
            Checks for messages that exceed the maximum message size in an overflow-safe way.
            </summary>
            <param name="currentCount">The current size of the message so far.</param>
            <param name="additionalCount">The additional bytes that have arrived as part of this message.</param>
        </member>
        <member name="E:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.MessageArrived">
            <summary>
            Occurs when a message has arrived. Exceptions thrown from this method propogate through <see cref="M:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.DataReceived(System.Collections.Generic.IList{System.Byte})"/>, and may leave the framer instance in an invalid state.
            </summary>
        </member>
        <member name="T:Nito.KitchenSink.StringExtensions">
            <summary>
            Provides useful extension methods for string operations.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.StringExtensions.csharpEscapeSequences">
            <summary>
            The standard escape sequences defined by the C# language.
            </summary>
        </member>
        <member name="F:Nito.KitchenSink.StringExtensions.prettyEscapeSequences">
            <summary>
            The escape sequences used by "pretty printing".
            </summary>
        </member>
        <member name="M:Nito.KitchenSink.StringExtensions.PrintableEscape(System.String)">
            <summary>
            Returns a flattened, printable C#-escaped equivalent of the input string.
            </summary>
            <param name="source">The source string.</param>
            <returns>A backslash-escaped copy of the source string.</returns>
        </member>
        <member name="M:Nito.KitchenSink.StringExtensions.Printable(System.String)">
            <summary>
            Returns the string itself if it is printable and flattened, otherwise a <see cref="M:Nito.KitchenSink.StringExtensions.PrintableEscape(System.String)"/> copy of the string.
            </summary>
            <param name="source">The source string.</param>
            <returns>The source string or a backslash-escaped copy of the source string.</returns>
        </member>
        <member name="M:Nito.KitchenSink.StringExtensions.PrettyDump(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Returns a printable string of the byte sequence, interpreting it as ASCII if possible. If the sequence is interpreted as a string, the flattened, escaped string is returned enclosed in double-quotes; otherwise, each byte of the sequence is converted to hex, separated by spaces, and enclosed in square brackets.
            </summary>
            <param name="data">The data to dump.</param>
            <returns>A printable string.</returns>
        </member>
        <member name="M:Nito.KitchenSink.StringExtensions.Flatten(System.String)">
            <summary>
            Replaces any '\r' or '\n' characters in the string with spaces.
            </summary>
            <param name="source">The source string.</param>
            <returns>The flattened string.</returns>
        </member>
        <member name="M:Nito.KitchenSink.StringExtensions.TextElements(System.String)">
            <summary>
            Gets all text elements (Unicode glyphs) for a given string.
            </summary>
            <param name="source">The source string.</param>
            <returns>All the text elements in the source string.</returns>
        </member>
        <member name="M:Nito.KitchenSink.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates a separator between each element of a string enumeration.
            </summary>
            <param name="source">The string enumeration.</param>
            <param name="separator">The separator string. This may not be null.</param>
            <returns>The concatenated string.</returns>
        </member>
        <member name="M:Nito.KitchenSink.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates a sequence of strings.
            </summary>
            <param name="source">The sequence of strings.</param>
            <returns>The concatenated string.</returns>
        </member>
        <member name="T:Nito.KitchenSink.Communication.MessageArrivedEventHandler">
            <summary>
            Receives notification that a message has arrived.
            </summary>
            <param name="message">The message that has arrived. This may contain an alias of the data passed to <see cref="M:Nito.KitchenSink.Communication.IFramer.DataReceived(System.Collections.Generic.IList{System.Byte})"/> in this call stack, but will not contain an alias to any data previously passed to <see cref="M:Nito.KitchenSink.Communication.IFramer.DataReceived(System.Collections.Generic.IList{System.Byte})"/>.</param>
        </member>
    </members>
</doc>
