<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nito.Linq</name>
    </assembly>
    <members>
        <member name="T:Nito.Linq.ListExtensions">
            <summary>
            Extension methods for <see cref="T:Nito.Linq.ISortedList`1"/>.
            </summary>
            <summary>
            Provides useful extension methods for the <see cref="T:System.Collections.Generic.List`1"/> class.
            </summary>
            <summary>
            Provides useful extension methods for the <see cref="T:System.Collections.Generic.List`1"/> class.
            </summary>
            <summary>
            Provides useful extension methods for the <see cref="T:System.Collections.Generic.List`1"/> class.
            </summary>
            <summary>
            Provides useful extension methods for the <see cref="T:System.Collections.Generic.List`1"/> class.
            </summary>
            <summary>
            Provides useful extension methods for the <see cref="T:System.Collections.Generic.List`1"/> class.
            </summary>
            <summary>
            Provides useful extension methods for the <see cref="T:System.Collections.Generic.List`1"/> class.
            </summary>
            <summary>
            Provides useful extension methods for lists.
            </summary>
            <summary>
            Provides useful extension methods for the <see cref="T:System.Collections.Generic.List`1"/> class.
            </summary>
        </member>
        <member name="M:Nito.Linq.ListExtensions.AsSwappable``1(System.Collections.Generic.IList{``0})">
            <summary>
            Provides a non-generic <see cref="T:Nito.Linq.ListExtensions.ISwappable"/> interface for the source list.
            </summary>
            <typeparam name="T">The type of elements in the source list.</typeparam>
            <param name="source">The source list.</param>
            <returns>A non-generic <see cref="T:Nito.Linq.ListExtensions.ISwappable"/> interface for the source list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps two elements in-place in the source list.
            </summary>
            <typeparam name="T">The type of elements in the source list.</typeparam>
            <param name="source">The source list.</param>
            <param name="indexA">The index of the first element to swap.</param>
            <param name="indexB">The index of the second element to swap.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.SwapAll``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{Nito.Linq.ListExtensions.ISwappable},System.Int32,System.Int32)">
            <summary>
            Swaps two element positions in-place in the source list and in a sequence of swappable lists.
            </summary>
            <typeparam name="T">The type of elements in the source list.</typeparam>
            <param name="source">The source list.</param>
            <param name="others">Other lists to keep in sync with the source list.</param>
            <param name="indexA">The index of the first element position to swap.</param>
            <param name="indexB">The index of the second element position to swap.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.AsList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the source typed as <see cref="T:System.Collections.Generic.IList`1"/>. This method has no effect other than to restrict the compile-time type of an object implementing <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="list"/>.</typeparam>
            <param name="list">The source list.</param>
            <returns>The source list, typed as <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.AsList``1(System.Collections.IList,System.Boolean)">
            <summary>
            Casts or converts a non-generic <see cref="T:System.Collections.IList"/> object into a strongly-typed list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The non-generic source list to cast or wrap.</param>
            <param name="isReadOnly">Whether the wrapper should return <c>true</c> for <see cref="!:IList&lt;T&gt;.IsReadOnly"/>, if a wrapper is used.</param>
            <returns>The source list, if it implements <see cref="T:System.Collections.Generic.IList`1"/>; otherwise, a wrapper around the source list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.AsList``1(System.Collections.IList)">
            <summary>
            Casts or converts a non-generic <see cref="T:System.Collections.IList"/> object into a strongly-typed list. If a wrapper is used, then the wrapper will return <c>true</c> for <see cref="!:IList&lt;T&gt;.IsReadOnly"/>.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The non-generic source list to cast or wrap.</param>
            <returns>The source list, if it implements <see cref="T:System.Collections.Generic.IList`1"/>; otherwise, a wrapper around the source list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.AsConcreteList``1(System.Collections.Generic.IList{``0},System.Boolean,System.Boolean)">
            <summary>
            Casts or converts a generic <see cref="T:System.Collections.Generic.IList`1"/> into a non-generic <see cref="T:System.Collections.IList"/> object.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The generic source list to cast or wrap.</param>
            <param name="isFixedSize">Whether the wrapper should return <c>true</c> for <see cref="P:System.Collections.IList.IsFixedSize"/>, if a wrapper is used.</param>
            <param name="isReadOnly">Whether the wrapper should return <c>true</c> for <see cref="P:System.Collections.IList.IsReadOnly"/>, if a wrapper is used.</param>
            <returns>The source list, if it implements <see cref="T:System.Collections.IList"/>; otherwise, a wrapper around the source list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.AsConcreteList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Casts or converts a generic <see cref="T:System.Collections.Generic.IList`1"/> into a non-generic <see cref="T:System.Collections.IList"/> object. If a wrapper is used, then the wrapper will return <c>true</c> for <see cref="P:System.Collections.IList.IsFixedSize"/> and <see cref="P:System.Collections.IList.IsReadOnly"/>.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The generic source list to cast or wrap.</param>
            <returns>The source list, if it implements <see cref="T:System.Collections.IList"/>; otherwise, a wrapper around the source list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns a read-only list wrapper for a given list.
            </summary>
            <typeparam name="T">The type of elements in the source list.</typeparam>
            <param name="list">The source list.</param>
            <returns>A read-only wrapper for the source list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.Select``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Projects the elements of a specified list into a result list.
            </summary>
            <typeparam name="TSource">The type of the elements in the source list.</typeparam>
            <typeparam name="TResult">The type of the elements in the resulting list.</typeparam>
            <param name="list">The source list.</param>
            <param name="selector">The projection delegate.</param>
            <returns>The projected list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.Select``2(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Projects the elements of a specified list into a result list.
            </summary>
            <typeparam name="TSource">The type of the elements in the source list.</typeparam>
            <typeparam name="TResult">The type of the elements in the resulting list.</typeparam>
            <param name="list">The source list.</param>
            <param name="selector">The projection delegate, which takes the index of the item as its second parameter.</param>
            <returns>The projected list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.Select``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
            Projects the elements of a specified list into a result list that supports updating.
            </summary>
            <typeparam name="TSource">The type of the elements in the source list.</typeparam>
            <typeparam name="TResult">The type of the elements in the resulting list.</typeparam>
            <param name="list">The source list.</param>
            <param name="selector">The projection delegate from source elements to result elements.</param>
            <param name="reverseSelector">The projection delegate from result elements to source elements.</param>
            <returns>The projected list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.Skip``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Returns a sliced list, which acts as a window into a subset of the original list.
            </summary>
            <typeparam name="T">The type of object contained in the list.</typeparam>
            <param name="list">The list to slice.</param>
            <param name="offset">The offset into the list at which the slice begins. If <paramref name="offset"/> is less than or equal to zero, then a list equivalent to the source list is returned; if <paramref name="offset"/> is greater than or equal to the count of the source list, then an empty list is returned.</param>
            <returns>A list that is a slice of the source list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.Take``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Returns a sliced list, which acts as a window into a subset of the original list.
            </summary>
            <typeparam name="T">The type of object contained in the list.</typeparam>
            <param name="list">The list to slice.</param>
            <param name="count">The number of elements in the slice. If <paramref name="count"/> is less than or equal to zero, then an empty list is returned; if <paramref name="count"/> is greater than or equal to the count of the source list, then a list equivalent to the source list is returned.</param>
            <returns>A list that is a slice of the source list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.Slice``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Returns a sliced list, which acts as a window into a subset of the original list. Similar to Skip followed by Take, only this has tighter restrictions on the <paramref name="offset"/> and <paramref name="count"/> parameters.
            </summary>
            <typeparam name="T">The type of object contained in the list.</typeparam>
            <param name="list">The list to slice.</param>
            <param name="offset">The offset into the list at which the slice begins. Must be a valid index into the source list, or equal to the count of the source list.</param>
            <param name="count">The number of elements in the slice. May not be less than zero. If count is greater than 0, then every value in the range [offset, offset + count) must be valid indexes into the source list.</param>
            <returns>A list that is a slice of the source list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.Step``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Steps through a list using a specified step size. The first element of the resulting list is the first element of the source list.
            </summary>
            <typeparam name="T">The type of object contained in the list.</typeparam>
            <param name="list">The list to step through.</param>
            <param name="step">The step size. Must be greater than 0.</param>
            <returns>The stepped list.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="step"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:Nito.Linq.ListExtensions.Reverse``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns a list that acts as though the list has been reversed.
            </summary>
            <typeparam name="T">The type of elements contained in the list.</typeparam>
            <param name="list">The source list.</param>
            <returns>The reverse list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.Repeat``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Repeats a list of values a specified number of times.
            </summary>
            <typeparam name="T">The type of object contained in the list.</typeparam>
            <param name="list">The list of values to repeat.</param>
            <param name="count">The number of times to repeat all elements in the source list. If <paramref name="count"/> is less than or equal to 0, an empty list is returned.</param>
            <returns>A list containing the source list repeated the specified number of times.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.Concat``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0}[])">
            <summary>
            Concatenates the specified lists.
            </summary>
            <typeparam name="T">The type of elements in the source lists.</typeparam>
            <param name="list">The first source list to concatenate.</param>
            <param name="others">The other source lists to concatenate.</param>
            <returns>The concatenated list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.Concat``1(System.Collections.Generic.IList{System.Collections.Generic.IList{``0}})">
            <summary>
            Concatenates the specified lists.
            </summary>
            <typeparam name="T">The type of elements in the source lists.</typeparam>
            <param name="lists">The source lists to concatenate.</param>
            <returns>The concatenated list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.FlattenList``1(System.Collections.Generic.IList{System.Collections.Generic.IList{``0}})">
            <summary>
            Flattens a list of lists into one long list.
            </summary>
            <typeparam name="T">The type of elements in the resulting list.</typeparam>
            <param name="list">The list of lists.</param>
            <returns>The flattened list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.Zip``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Func{``0,``1,``2})">
            <summary>
            Combines two source lists into a result list. If the source lists are of different lengths, the resulting list has a length equal to the smaller of the two.
            </summary>
            <typeparam name="TFirst">The type of elements in the first source list.</typeparam>
            <typeparam name="TSecond">The type of elements in the second source list.</typeparam>
            <typeparam name="TResult">The type of elements in the resulting list.</typeparam>
            <param name="first">The first source list.</param>
            <param name="second">The second source list.</param>
            <param name="zipper">The delegate that creates a new element from corresponding elements of the two source lists.</param>
            <returns>The combined list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.Zip``4(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Combines three source lists into a result list. If the source lists are of different lengths, the resulting list has a length equal to the smallest of the three.
            </summary>
            <typeparam name="TFirst">The type of elements in the first source list.</typeparam>
            <typeparam name="TSecond">The type of elements in the second source list.</typeparam>
            <typeparam name="TThird">The type of elements in the third source list.</typeparam>
            <typeparam name="TResult">The type of elements in the resulting list.</typeparam>
            <param name="first">The first source list.</param>
            <param name="second">The second source list.</param>
            <param name="third">The third source list.</param>
            <param name="zipper">The delegate that creates a new element from corresponding elements of the two source lists.</param>
            <returns>The combined list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.Rotate``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Rotates a list by a given offset.
            </summary>
            <typeparam name="T">The type of elements in the source list.</typeparam>
            <param name="list">The source list.</param>
            <param name="offset">The number of elements to rotate. If <paramref name="offset"/> is less than or equal to 0, or if <paramref name="offset"/> is greater than or equal to the number of elements in the list, then the result of this method is identical to the source list.</param>
            <returns>The rotated list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.RandomShuffle``1(System.Collections.Generic.IList{``0},System.Func{System.Int32,System.Int32},Nito.Linq.ListExtensions.ISwappable[])">
            <summary>
            Randomly reorders the elements of a list in-place using the specified random number generator delegate.
            </summary>
            <typeparam name="T">The type of elements in the source list.</typeparam>
            <param name="list">The source list.</param>
            <param name="randomNumberGenerator">The random number generator delegate; when invoked with a value <c>n</c>, this delegate must return a random number in the range [0, n).</param>
            <param name="others">Other lists to be kept in sync with the randomized list. As <paramref name="list"/> is randomized, the same relative elements are rearranged in these lists.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.RandomShuffle``1(System.Collections.Generic.IList{``0},System.Random,Nito.Linq.ListExtensions.ISwappable[])">
            <summary>
            Randomly reorders the elements of a list in-place using the specified random number generator.
            </summary>
            <typeparam name="T">The type of elements in the source list.</typeparam>
            <param name="list">The source list.</param>
            <param name="randomNumberGenerator">The random number generator.</param>
            <param name="others">Other lists to be kept in sync with the randomized list. As <paramref name="list"/> is randomized, the same relative elements are rearranged in these lists.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.RandomShuffle``1(System.Collections.Generic.IList{``0},Nito.Linq.ListExtensions.ISwappable[])">
            <summary>
            Randomly reorders the elements of a list in-place using the default pseudo-random number generator.
            </summary>
            <typeparam name="T">The type of elements in the source list.</typeparam>
            <param name="list">The source list.</param>
            <param name="others">Other lists to be kept in sync with the randomized list. As <paramref name="list"/> is randomized, the same relative elements are rearranged in these lists.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.RandomShuffleIndirect``1(System.Collections.Generic.IList{``0},System.Func{System.Int32,System.Int32},Nito.Linq.ListExtensions.ISwappable[])">
            <summary>
            Creates and returns a view of the source list in which the elements are in a random order, using the specified random number generator delegate.
            </summary>
            <typeparam name="T">The type of elements in the source list.</typeparam>
            <param name="list">The source list. As long as the returned view is referenced, the size of the source list should not change.</param>
            <param name="randomNumberGenerator">The random number generator delegate; when invoked with a value <c>n</c>, this delegate must return a random number in the range [0, n).</param>
            <param name="others">Other lists to be kept in sync with the randomized view. As the view is randomized, the same relative elements are rearranged in these lists.</param>
            <returns>The randomized view of the source list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.RandomShuffleIndirect``1(System.Collections.Generic.IList{``0},System.Random,Nito.Linq.ListExtensions.ISwappable[])">
            <summary>
            Creates and returns a view of the source list in which the elements are in a random order, using the specified random number generator.
            </summary>
            <typeparam name="T">The type of elements in the source list.</typeparam>
            <param name="list">The source list. As long as the returned view is referenced, the size of the source list should not change.</param>
            <param name="randomNumberGenerator">The random number generator.</param>
            <param name="others">Other lists to be kept in sync with the randomized view. As the view is randomized, the same relative elements are rearranged in these lists.</param>
            <returns>The randomized view of the source list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.RandomShuffleIndirect``1(System.Collections.Generic.IList{``0},Nito.Linq.ListExtensions.ISwappable[])">
            <summary>
            Creates and returns a view of the source list in which the elements are in a random order, using the default pseudo-random number generator.
            </summary>
            <typeparam name="T">The type of elements in the source list.</typeparam>
            <param name="list">The source list. As long as the returned view is referenced, the size of the source list should not change.</param>
            <param name="others">Other lists to be kept in sync with the randomized view. As the view is randomized, the same relative elements are rearranged in these lists.</param>
            <returns>The randomized view of the source list.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.LastIndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines the index of the last matching element in a list.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="list"/>.</typeparam>
            <param name="list">The list in which to locate the value.</param>
            <param name="match">The delegate that defines the conditions of the element to search for.</param>
            <returns>The index of the last element that returned true from <paramref name="match"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.LastIndexOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Determines the index of the last matching element in a list.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="list"/>.</typeparam>
            <param name="list">The list in which to locate the value.</param>
            <param name="value">The value to locate in the list.</param>
            <returns>The index of the last instance of <paramref name="value"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.Last``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of a list that satisfies a specified condition.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="list"/>.</typeparam>
            <param name="list">The list in which to locate the value.</param>
            <param name="match">The delegate that defines the conditions of the element to search for.</param>
            <returns>The last element of the list that returned true from <paramref name="match"/>.</returns>
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition.</exception>
        </member>
        <member name="M:Nito.Linq.ListExtensions.LastOrDefault``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of a list that satisfies a specified condition, or a default value if no element is found.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="list"/>.</typeparam>
            <param name="list">The list in which to locate the value.</param>
            <param name="match">The delegate that defines the conditions of the element to search for.</param>
            <returns>The last element of the list that returned true from <paramref name="match"/>, or <c>default(T)</c> if no element is found.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.CopyTo``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Copies a range of the list to a range in a destination list. The elements are copied in index order.
            </summary>
            <typeparam name="T">The type of elements contained in the lists.</typeparam>
            <param name="list">The source list.</param>
            <param name="index">The zero-based index into the source list at which copying begins.</param>
            <param name="destination">The destination list.</param>
            <param name="destinationIndex">The zero-based index into the destination list at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.CopyTo``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Copies the entire list to a destination list, starting at the specified index of the destination list. The elements are copied in index order.
            </summary>
            <typeparam name="T">The type of elements contained in the lists.</typeparam>
            <param name="list">The source list.</param>
            <param name="destination">The destination list.</param>
            <param name="destinationIndex">The zero-based index into the destination list at which copying begins.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.CopyTo``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Copies the entire list to a destination list, starting at the beginning of the destination list. The elements are copied in index order.
            </summary>
            <typeparam name="T">The type of elements contained in the lists.</typeparam>
            <param name="list">The source list.</param>
            <param name="destination">The destination list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.CopyBackward``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Copies a range of the list to a range in a destination list. The elements are copied in reverse index order.
            </summary>
            <typeparam name="T">The type of elements contained in the lists.</typeparam>
            <param name="list">The source list.</param>
            <param name="index">The zero-based index into the source list at which copying begins.</param>
            <param name="destination">The destination list.</param>
            <param name="destinationIndex">The zero-based index into the destination list at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.SequenceEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sequences and determines if they are equal, using the specified element equality comparer.
            </summary>
            <typeparam name="T">The type of elements contained in the lists.</typeparam>
            <param name="list">The first source list.</param>
            <param name="other">The second source list.</param>
            <param name="comparer">The comparison object used to compare elements for equality.</param>
            <returns><c>true</c> if every element in both lists are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.SequenceEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Compares two sequences and determines if they are equal, using the default element equality comparer.
            </summary>
            <typeparam name="T">The type of elements contained in the lists.</typeparam>
            <param name="list">The first source list.</param>
            <param name="other">The second source list.</param>
            <returns><c>true</c> if every element in both lists are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Nito.Linq.ListExtensions.ISwappable">
            <summary>
            Non-generic interface that allows swapping list elements.
            </summary>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ISwappable.Swap(System.Int32,System.Int32)">
            <summary>
            Swaps two elements in the list.
            </summary>
            <param name="indexA">The index of the first element to swap.</param>
            <param name="indexB">The index of the second element to swap.</param>
        </member>
        <member name="P:Nito.Linq.ListExtensions.ISwappable.Count">
            <summary>
            Gets the number of elements in this list.
            </summary>
        </member>
        <member name="T:Nito.Linq.ListExtensions.SwappableList`1">
            <summary>
            A wrapper around a generic list that allows swapping elements.
            </summary>
            <typeparam name="T">The type of items contained in the list.</typeparam>
        </member>
        <member name="F:Nito.Linq.ListExtensions.SwappableList`1.source">
            <summary>
            The source list.
            </summary>
        </member>
        <member name="M:Nito.Linq.ListExtensions.SwappableList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.ListExtensions.SwappableList`1"/> class with a specified source list.
            </summary>
            <param name="source">The source list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.SwappableList`1.Swap(System.Int32,System.Int32)">
            <summary>
            Swaps two elements in the list.
            </summary>
            <param name="indexA">The index of the first element to swap.</param>
            <param name="indexB">The index of the second element to swap.</param>
        </member>
        <member name="P:Nito.Linq.ListExtensions.SwappableList`1.Count">
            <summary>
            Gets the number of elements in this list.
            </summary>
        </member>
        <member name="T:Nito.Linq.ListExtensions.ConcreteList`1">
            <summary>
            Wraps a generic source list, treating it as a non-generic list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="T:Nito.Linq.Implementation.ListBase`1">
            <summary>
            Provides common implementations of some list methods.
            </summary>
            <typeparam name="T">The type of element contained in the list.</typeparam>
        </member>
        <member name="M:Nito.Linq.Implementation.ListBase`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to this list at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into this list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Nito.Linq.Implementation.ListBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Nito.Linq.Implementation.ListBase`1.Clear">
            <summary>
            Removes all items from this list.
            </summary>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Nito.Linq.Implementation.ListBase`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in this list.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>The index of <paramref name="item"/> if found in this list; otherwise, -1.</returns>
        </member>
        <member name="M:Nito.Linq.Implementation.ListBase`1.Add(`0)">
            <summary>
            Adds an item to the end of this list.
            </summary>
            <param name="item">The object to add to this list.</param>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Nito.Linq.Implementation.ListBase`1.Contains(`0)">
            <summary>
            Determines whether this list contains a specific value.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>
            true if <paramref name="item"/> is found in this list; otherwise, false.
            </returns>
        </member>
        <member name="M:Nito.Linq.Implementation.ListBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of this list to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from this slice. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Nito.Linq.Implementation.ListBase`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from this list.
            </summary>
            <param name="item">The object to remove from this list.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from this list; otherwise, false. This method also returns false if <paramref name="item"/> is not found in this list.
            </returns>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Nito.Linq.Implementation.ListBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Nito.Linq.Implementation.ListBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Nito.Linq.Implementation.ListBase`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Nito.Linq.Implementation.ListBase`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.Implementation.ListBase`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.Implementation.ListBase`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="P:Nito.Linq.Implementation.ListBase`1.Count">
            <summary>
            Gets the number of elements contained in this list.
            </summary>
            <returns>The number of elements contained in this list.</returns>
        </member>
        <member name="P:Nito.Linq.Implementation.ListBase`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this list is read-only. This implementation always returns <c>false</c>.
            </summary>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Nito.Linq.Implementation.ListBase`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This property is set and the list is read-only.
            </exception>
        </member>
        <member name="F:Nito.Linq.ListExtensions.ConcreteList`1.source">
            <summary>
            The wrapped generic list.
            </summary>
        </member>
        <member name="F:Nito.Linq.ListExtensions.ConcreteList`1.isFixedSize">
            <summary>
            Backing field for <see cref="P:System.Collections.IList.IsFixedSize"/>.
            </summary>
        </member>
        <member name="F:Nito.Linq.ListExtensions.ConcreteList`1.isReadOnly">
            <summary>
            Backing field for <see cref="P:System.Collections.IList.IsReadOnly"/>.
            </summary>
        </member>
        <member name="F:Nito.Linq.ListExtensions.ConcreteList`1.syncRoot">
            <summary>
            Backing field for <see cref="P:System.Collections.ICollection.SyncRoot"/>.
            </summary>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.#ctor(System.Collections.Generic.IList{`0},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.ListExtensions.ConcreteList`1"/> class.
            </summary>
            <param name="source">The generic source list to wrap.</param>
            <param name="isFixedSize">The fixed-size setting for this list.</param>
            <param name="isReadOnly">The read-only setting for this list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.Clear">
            <summary>
            Removes all items from this list.
            </summary>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
            <exception cref="T:System.ArgumentException">The type of the item indicates it is not appropriate for storing in this list.</exception>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
            <exception cref="T:System.ArgumentException">The type of the item indicates it is not appropriate for storing in this list.</exception>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.
            -or-
            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.ObjectIsT(System.Object)">
            <summary>
            Returns whether or not the type of a given item indicates it is appropriate for storing in this list.
            </summary>
            <param name="item">The item to test.</param>
            <returns><c>true</c> if the item is appropriate to store in this list; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.WrongObjectType">
            <summary>
            Returns an exception indicating that the type of an item indicates it is not appropriate for storing in this list.
            </summary>
            <returns>An exception indicating that the type of an item indicates it is not appropriate for storing in this list.</returns>
        </member>
        <member name="P:Nito.Linq.ListExtensions.ConcreteList`1.Count">
            <summary>
            Gets the number of elements contained in this list.
            </summary>
            <returns>The number of elements contained in this list.</returns>
        </member>
        <member name="P:Nito.Linq.ListExtensions.ConcreteList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this list is read-only.
            </summary>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Nito.Linq.ListExtensions.ConcreteList`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:Nito.Linq.ListExtensions.ConcreteList`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether this list is read-only.
            </summary>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Nito.Linq.ListExtensions.ConcreteList`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:Nito.Linq.ListExtensions.ConcreteList`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:Nito.Linq.ListExtensions.ConcreteList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which to get or set the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This property is set and the list is read-only.
            </exception>
            <exception cref="T:System.ArgumentException">This property is set and the type of the item indicates it is not appropriate for storing in this list.</exception>
        </member>
        <member name="T:Nito.Linq.ListExtensions.ReadWriteProjectList`2">
            <summary>
            Projects a source list to a result list, and projects the result list back to the source list.
            </summary>
            <typeparam name="TSource">The type of object contained in the source list.</typeparam>
            <typeparam name="TResult">The type of object contained in the resulting list.</typeparam>
        </member>
        <member name="F:Nito.Linq.ListExtensions.ReadWriteProjectList`2.source">
            <summary>
            The source list.
            </summary>
        </member>
        <member name="F:Nito.Linq.ListExtensions.ReadWriteProjectList`2.selector">
            <summary>
            The projection function from source to result.
            </summary>
        </member>
        <member name="F:Nito.Linq.ListExtensions.ReadWriteProjectList`2.reverseSelector">
            <summary>
            The projection function from result to source.
            </summary>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ReadWriteProjectList`2.#ctor(System.Collections.Generic.IList{`0},System.Func{`0,`1},System.Func{`1,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.ListExtensions.ReadWriteProjectList`2"/> class.
            </summary>
            <param name="source">The source list.</param>
            <param name="selector">The projection function from source to result.</param>
            <param name="reverseSelector">The projection function from result to source.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ReadWriteProjectList`2.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ReadWriteProjectList`2.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ReadWriteProjectList`2.DoSetItem(System.Int32,`1)">
            <summary>
            Sets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ReadWriteProjectList`2.DoInsert(System.Int32,`1)">
            <summary>
            Inserts an element at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ReadWriteProjectList`2.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="P:Nito.Linq.ListExtensions.ReadWriteProjectList`2.IsReadOnly">
            <summary>
            Gets a value indicating whether this list is read-only. This list is read-only if its source list is read-only.
            </summary>
            <value></value>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Nito.Linq.ListExtensions.ReadWriteProjectList`2.Count">
            <summary>
            Gets the number of elements contained in this list.
            </summary>
            <returns>The number of elements contained in this list.</returns>
        </member>
        <member name="T:Nito.Linq.ListExtensions.SliceList`1">
            <summary>
            Slices a source list.
            </summary>
            <typeparam name="T">The type of object contained in the list.</typeparam>
        </member>
        <member name="F:Nito.Linq.ListExtensions.SliceList`1.source">
            <summary>
            The source list.
            </summary>
        </member>
        <member name="F:Nito.Linq.ListExtensions.SliceList`1.offset">
            <summary>
            The offset into the source list where this slice begins.
            </summary>
        </member>
        <member name="F:Nito.Linq.ListExtensions.SliceList`1.count">
            <summary>
            The number of objects in this slice.
            </summary>
        </member>
        <member name="M:Nito.Linq.ListExtensions.SliceList`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.ListExtensions.SliceList`1"/> class.
            </summary>
            <param name="source">The source list.</param>
            <param name="offset">The offset into the source list where this slice begins.</param>
            <param name="count">The number of objects in this slice.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.SliceList`1.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="M:Nito.Linq.ListExtensions.SliceList`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.SliceList`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.SliceList`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.SliceList`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="P:Nito.Linq.ListExtensions.SliceList`1.Count">
            <summary>
            Gets the number of elements contained in this slice.
            </summary>
            <returns>The number of elements contained in this slice.</returns>
        </member>
        <member name="P:Nito.Linq.ListExtensions.SliceList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this slice is read-only. A slice is read-only if its source list is read-only.
            </summary>
            <returns>true if this slice is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Nito.Linq.ListExtensions.StepList`1">
            <summary>
            Indexes into a source list using a step size.
            </summary>
            <typeparam name="T">The type of object contained in the list.</typeparam>
        </member>
        <member name="T:Nito.Linq.Implementation.ReadOnlyListBase`1">
            <summary>
            Provides implementations of most list methods, for any list types that either do not allow item modification OR do not allow list modification. The default implementations of the methods in this class do not allow either.
            </summary>
            <typeparam name="T">The type of item contained in the list.</typeparam>
        </member>
        <member name="M:Nito.Linq.Implementation.ReadOnlyListBase`1.Clear">
            <summary>
            Removes all elements from the list. This implementation always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Nito.Linq.Implementation.ReadOnlyListBase`1.ReadOnlyException">
            <summary>
            Returns an exception stating that this list is read-only.
            </summary>
            <returns>A <see cref="T:System.NotSupportedException"/> indicating that the list is read-only.</returns>
        </member>
        <member name="M:Nito.Linq.Implementation.ReadOnlyListBase`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified index. This implementation always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.Implementation.ReadOnlyListBase`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified index. This implementation always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.Implementation.ReadOnlyListBase`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified index. This implementation always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="P:Nito.Linq.Implementation.ReadOnlyListBase`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this list is read-only. This implementation always returns <c>true</c>.
            </summary>
            <value></value>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="F:Nito.Linq.ListExtensions.StepList`1.source">
            <summary>
            The source list.
            </summary>
        </member>
        <member name="F:Nito.Linq.ListExtensions.StepList`1.step">
            <summary>
            The step size to use when traversing the source list.
            </summary>
        </member>
        <member name="M:Nito.Linq.ListExtensions.StepList`1.#ctor(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.ListExtensions.StepList`1"/> class.
            </summary>
            <param name="source">The source list.</param>
            <param name="step">The step size to use when traversing the source list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.StepList`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.StepList`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="P:Nito.Linq.ListExtensions.StepList`1.Count">
            <summary>
            Gets the number of elements contained in this list.
            </summary>
            <value></value>
            <returns>The number of elements contained in this list.</returns>
        </member>
        <member name="T:Nito.Linq.ListExtensions.GenericList`1">
            <summary>
            Wraps a non-generic source list, treating it as a generic list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="F:Nito.Linq.ListExtensions.GenericList`1.source">
            <summary>
            The wrapped non-generic list.
            </summary>
        </member>
        <member name="F:Nito.Linq.ListExtensions.GenericList`1.isReadOnly">
            <summary>
            Backing field for <see cref="P:Nito.Linq.ListExtensions.GenericList`1.IsReadOnly"/>.
            </summary>
        </member>
        <member name="M:Nito.Linq.ListExtensions.GenericList`1.#ctor(System.Collections.IList,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.ListExtensions.GenericList`1"/> class with the specified source and read-only setting.
            </summary>
            <param name="source">The non-generic source list to wrap.</param>
            <param name="isReadOnly">The read-only setting for this list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.GenericList`1.Clear">
            <summary>
            Removes all items from this list.
            </summary>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Nito.Linq.ListExtensions.GenericList`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.GenericList`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.GenericList`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.GenericList`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="P:Nito.Linq.ListExtensions.GenericList`1.Count">
            <summary>
            Gets the number of elements contained in this list.
            </summary>
            <returns>The number of elements contained in this list.</returns>
        </member>
        <member name="P:Nito.Linq.ListExtensions.GenericList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this list is read-only.
            </summary>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Nito.Linq.ListExtensions.ConcatList`1">
            <summary>
            Concatenates a list of source lists into a single list.
            </summary>
            <typeparam name="T">The type of object contained in the list.</typeparam>
        </member>
        <member name="F:Nito.Linq.ListExtensions.ConcatList`1.sources">
            <summary>
            The list of source lists.
            </summary>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcatList`1.#ctor(System.Collections.Generic.IList{System.Collections.Generic.IList{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.ListExtensions.ConcatList`1"/> class with the specified source lists.
            </summary>
            <param name="sources">The source lists to concatenate.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcatList`1.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcatList`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcatList`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcatList`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcatList`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcatList`1.FindExistingIndex(System.Int32,System.Collections.Generic.IList{`0}@,System.Int32@)">
            <summary>
            Finds the source list and its index for accessing a specified concatenated index.
            </summary>
            <param name="concatIndex">The concatenated index.</param>
            <param name="source">On return, holds the source list corresponding to the concatenated index.</param>
            <param name="sourceIndex">On return, holds the source list index corresponding to the concatenated index.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ConcatList`1.FindNewIndex(System.Int32,System.Collections.Generic.IList{`0}@,System.Int32@)">
            <summary>
            Finds the source list and its index for inserting at a specified concatenated index.
            </summary>
            <param name="concatIndex">The concatenated index at which to insert.</param>
            <param name="source">On return, holds the source list corresponding to the concatenated index.</param>
            <param name="sourceIndex">On return, holds the source list index corresponding to the concatenated index.</param>
        </member>
        <member name="P:Nito.Linq.ListExtensions.ConcatList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this list is read-only. This list is read-only if any of its source lists are read-only.
            </summary>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Nito.Linq.ListExtensions.ConcatList`1.Count">
            <summary>
            Gets the number of elements contained in this list.
            </summary>
            <returns>The number of elements contained in this list.</returns>
        </member>
        <member name="T:Nito.Linq.ListExtensions.ReverseList`1">
            <summary>
            Reverses a source list.
            </summary>
            <typeparam name="T">The type of object contained in the list.</typeparam>
        </member>
        <member name="F:Nito.Linq.ListExtensions.ReverseList`1.source">
            <summary>
            The source list.
            </summary>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ReverseList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.ListExtensions.ReverseList`1"/> class over the specified source list.
            </summary>
            <param name="source">The source list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ReverseList`1.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ReverseList`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ReverseList`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ReverseList`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.ListExtensions.ReverseList`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="P:Nito.Linq.ListExtensions.ReverseList`1.Count">
            <summary>
            Gets the number of elements contained in this list.
            </summary>
            <value></value>
            <returns>The number of elements contained in this list.</returns>
        </member>
        <member name="P:Nito.Linq.ListExtensions.ReverseList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this list is read-only. This list is read-only iff its source list is read-only.
            </summary>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Nito.Linq.SortedEnumerableSource">
            <summary>
            Sorted sequence sources.
            </summary>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableSource.Empty``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates a sorted, empty sequence. The sequence is sorted by the specified comparison object.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="comparer">The comparison object.</param>
            <returns>The sorted, empty sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableSource.Empty``1">
            <summary>
            Creates a sorted, empty sequence. The sequence is sorted by the default comparison object.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <returns>The sorted, empty sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableSource.Empty``1(System.Func{``0,``0,System.Int32})">
            <summary>
            Creates a sorted, empty sequence. The sequence is sorted by the specified comparison delegate.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="comparer">The comparison delegate.</param>
            <returns>The sorted, empty sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableSource.Return``1(``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Converts a single value into a sorted sequence containing a single value. The sequence is treated as though it were sorted by the specified comparison object.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <param name="comparer">The comparison object that defines how the sequence is sorted.</param>
            <returns>A sorted sequence containing a single element, <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableSource.Return``1(``0)">
            <summary>
            Converts a single value into a sorted sequence containing a single value. The sequence is treated as though it were sorted by the default comparison object.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <returns>A sorted sequence containing a single element, <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableSource.Return``1(``0,System.Func{``0,``0,System.Int32})">
            <summary>
            Converts a single value into a sorted sequence containing a single value. The sequence is treated as though it were sorted by the specified comparison delegate.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <param name="comparer">The comparison delegate that defines how the sequence is sorted.</param>
            <returns>A sorted sequence containing a single element, <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableSource.Repeat``1(``0,System.Collections.Generic.IComparer{``0},System.Int32)">
            <summary>
            Converts a single value into a sorted sequence containing that value the specified number of times. The sequence is treated as though it were sorted by the specified comparison object.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <param name="comparer">The comparison object that defines how the sequence is sorted.</param>
            <param name="count">The number of times <paramref name="source"/> is repeated. If <paramref name="count"/> is less than or equal to 0, an empty sequence is returned.</param>
            <returns>A sorted sequence containing <paramref name="count"/> elements, all equal to <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableSource.Repeat``1(``0,System.Int32)">
            <summary>
            Converts a single value into a sorted sequence containing that value the specified number of times. The sequence is treated as though it were sorted by the default comparison object.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <param name="count">The number of times <paramref name="source"/> is repeated. If <paramref name="count"/> is less than or equal to 0, an empty sequence is returned.</param>
            <returns>A sorted sequence containing <paramref name="count"/> elements, all equal to <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableSource.Repeat``1(``0,System.Func{``0,``0,System.Int32},System.Int32)">
            <summary>
            Converts a single value into a sorted sequence containing that value the specified number of times. The sequence is treated as though it were sorted by the specified comparison delegate.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <param name="comparer">The comparison delegate that defines how the sequence is sorted.</param>
            <param name="count">The number of times <paramref name="source"/> is repeated. If <paramref name="count"/> is less than or equal to 0, an empty sequence is returned.</param>
            <returns>A sorted sequence containing <paramref name="count"/> elements, all equal to <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableSource.Repeat``1(``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Converts a single value into a sorted sequence containing that value an infinite number of times. The sequence is treated as though it were sorted by the specified comparison object.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <param name="comparer">The comparison object that defines how the sequence is sorted.</param>
            <returns>A sorted sequence containing an infinite number of elements, all equal to <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableSource.Repeat``1(``0)">
            <summary>
            Converts a single value into a sorted sequence containing that value an infinite number of times. The sequence is treated as though it were sorted by the default comparison object.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <returns>A sorted sequence containing an infinite number of elements, all equal to <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableSource.Repeat``1(``0,System.Func{``0,``0,System.Int32})">
            <summary>
            Converts a single value into a sorted sequence containing that value an infinite number of times. The sequence is treated as though it were sorted by the specified comparison delegate.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <param name="comparer">The comparison delegate that defines how the sequence is sorted.</param>
            <returns>A sorted sequence containing an infinite number of elements, all equal to <paramref name="source"/>.</returns>
        </member>
        <member name="T:Nito.Linq.SequenceComparer`1">
            <summary>
            A comparison object that performs a lexicographical comparison of sequences.
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
        </member>
        <member name="M:Nito.Linq.SequenceComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.SequenceComparer`1"/> class with the specified item comparison object.
            </summary>
            <param name="comparer">The item comparison object, used to compare elements of the sequences.</param>
        </member>
        <member name="M:Nito.Linq.SequenceComparer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.SequenceComparer`1"/> class with the default item comparison object.
            </summary>
        </member>
        <member name="M:Nito.Linq.SequenceComparer`1.Compare(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Compares two sequences and returns a value less than 0 if <paramref name="x"/> is less than <paramref name="y"/>, 0 if <paramref name="x"/> is equal to <paramref name="y"/>, or greater than 0 if <paramref name="x"/> is greater than <paramref name="y"/>.
            </summary>
            <param name="x">The first sequence to compare.</param>
            <param name="y">The second sequence to compare.</param>
            <returns>A value less than 0 if <paramref name="x"/> is less than <paramref name="y"/>, 0 if <paramref name="x"/> is equal to <paramref name="y"/>, or greater than 0 if <paramref name="x"/> is greater than <paramref name="y"/>.</returns>
        </member>
        <member name="P:Nito.Linq.SequenceComparer`1.Comparer">
            <summary>
            Gets the item comparison object.
            </summary>
        </member>
        <member name="T:Nito.Linq.SortedListSource">
            <summary>
            Sorted list sources.
            </summary>
        </member>
        <member name="M:Nito.Linq.SortedListSource.Empty``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates an empty sorted list. The list is sorted by the specified comparison object.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="comparer">The comparison object.</param>
            <returns>An empty sorted list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListSource.Empty``1">
            <summary>
            Creates an empty sorted list. The list is sorted by the default comparison object.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <returns>An empty sorted list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListSource.Empty``1(System.Func{``0,``0,System.Int32})">
            <summary>
            Creates an empty sorted list. The list is sorted by the specified comparison delegate.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="comparer">The comparison delegate.</param>
            <returns>An empty sorted list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListSource.Return``1(``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Converts a single value into a sorted list containing a single value. The list is treated as though it were sorted by the specified comparison object.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <param name="comparer">The comparison object that defines how the list is sorted.</param>
            <returns>A sorted list containing a single element, <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListSource.Return``1(``0)">
            <summary>
            Converts a single value into a sorted list containing a single value. The list is treated as though it were sorted by the default comparison object.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <returns>A sorted list containing a single element, <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListSource.Return``1(``0,System.Func{``0,``0,System.Int32})">
            <summary>
            Converts a single value into a sorted list containing a single value. The list is treated as though it were sorted by the specified comparison delegate.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <param name="comparer">The comparison delegate that defines how the list is sorted.</param>
            <returns>A sorted list containing a single element, <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListSource.Repeat``1(``0,System.Collections.Generic.IComparer{``0},System.Int32)">
            <summary>
            Converts a single value into a sorted list containing that value the specified number of times. The list is treated as though it were sorted by the specified comparison object.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <param name="comparer">The comparison object that defines how the list is sorted.</param>
            <param name="count">The number of times <paramref name="source"/> is repeated. If <paramref name="count"/> is less than or equal to 0, an empty list is returned.</param>
            <returns>A sorted list containing <paramref name="count"/> elements, all equal to <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListSource.Repeat``1(``0,System.Int32)">
            <summary>
            Converts a single value into a sorted list containing that value the specified number of times. The list is treated as though it were sorted by the default comparison object.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <param name="count">The number of times <paramref name="source"/> is repeated. If <paramref name="count"/> is less than or equal to 0, an empty list is returned.</param>
            <returns>A sorted list containing <paramref name="count"/> elements, all equal to <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListSource.Repeat``1(``0,System.Func{``0,``0,System.Int32},System.Int32)">
            <summary>
            Converts a single value into a sorted list containing that value the specified number of times. The list is treated as though it were sorted by the specified comparison delegate.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <param name="comparer">The comparison delegate that defines how the list is sorted.</param>
            <param name="count">The number of times <paramref name="source"/> is repeated. If <paramref name="count"/> is less than or equal to 0, an empty list is returned.</param>
            <returns>A sorted list containing <paramref name="count"/> elements, all equal to <paramref name="source"/>.</returns>
        </member>
        <member name="T:Nito.Linq.ISortedList`1">
            <summary>
            Represents a list that is sorted by a single comparison.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
        </member>
        <member name="T:Nito.Linq.ISortedEnumerable`1">
            <summary>
            Represents a sequence that is sorted by a single comparison.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
        </member>
        <member name="P:Nito.Linq.ISortedEnumerable`1.Comparer">
            <summary>
            Gets a comparison object that defines how this sequence is sorted.
            </summary>
        </member>
        <member name="T:Nito.Linq.SortedListExtensions">
            <summary>
            Extension methods for <see cref="T:Nito.Linq.ISortedList`1"/>.
            </summary>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.AsSortedList``1(Nito.Linq.ISortedList{``0})">
            <summary>
            Returns the source typed as <see cref="T:Nito.Linq.ISortedList`1"/>. This method has no effect other than to restrict the compile-time type of an object implementing <see cref="T:Nito.Linq.ISortedList`1"/>.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="list"/>.</typeparam>
            <param name="list">The source list.</param>
            <returns>The source list, typed as <see cref="T:Nito.Linq.ISortedList`1"/>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.AsSorted``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Treats a list as though it were already sorted by the specified comparison object.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list, which is already sorted.</param>
            <param name="comparer">The comparison object that defines how the list is sorted.</param>
            <returns>The sorted list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.AsSorted``1(System.Collections.Generic.IList{``0})">
            <summary>
            Treats a list as though it were already sorted by the item type's default comparison.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list, which is already sorted.</param>
            <returns>The sorted list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.AsSorted``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Treats a list as though it were already sorted by the specified comparison delegate.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list, which is already sorted.</param>
            <param name="comparer">The comparison delegate that defines how the list is sorted.</param>
            <returns>The sorted list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.ToSortedList``1(Nito.Linq.ISortedEnumerable{``0})">
            <summary>
            Creates a sorted list from a sorted source sequence.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>The sorted list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.Reverse``1(Nito.Linq.ISortedList{``0})">
            <summary>
            Returns a list that acts as though it has been reversed, with a reversed comparison object.
            </summary>
            <typeparam name="T">The type of elements contained in the list.</typeparam>
            <param name="list">The source list.</param>
            <returns>A list sorted in reverse order of the original list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.Skip``1(Nito.Linq.ISortedList{``0},System.Int32)">
            <summary>
            Returns a sliced list, which acts as a window into a subset of the original list.
            </summary>
            <typeparam name="T">The type of object contained in the list.</typeparam>
            <param name="list">The list to slice.</param>
            <param name="offset">The offset into the list at which the slice begins. Must be a valid index into the source list, or equal to the count of the source list.</param>
            <returns>A list that is a slice of the source list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.Slice``1(Nito.Linq.ISortedList{``0},System.Int32,System.Int32)">
            <summary>
            Returns a sliced list, which acts as a window into a subset of the original list. Similar to Skip followed by Take, only this is more efficient and preserves IList semantics.
            </summary>
            <typeparam name="T">The type of object contained in the list.</typeparam>
            <param name="list">The list to slice.</param>
            <param name="offset">The offset into the list at which the slice begins. Must be a valid index into the source list, or equal to the count of the source list.</param>
            <param name="count">The number of elements in the slice. May not be less than zero. If count is greater than 0, then every value in the range [offset, offset + count) must be valid indexes into the source list.</param>
            <returns>A list that is a slice of the source list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.Step``1(Nito.Linq.ISortedList{``0},System.Int32)">
            <summary>
            Steps through a list using a specified step size.
            </summary>
            <typeparam name="T">The type of object contained in the list.</typeparam>
            <param name="list">The list to step through.</param>
            <param name="step">The step size. Must be greater than 0.</param>
            <returns>The stepped list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.Take``1(Nito.Linq.ISortedList{``0},System.Int32)">
            <summary>
            Returns a sliced list, which acts as a window into a subset of the original list.
            </summary>
            <typeparam name="T">The type of object contained in the list.</typeparam>
            <param name="list">The list to slice.</param>
            <param name="count">The number of elements in the slice. May not be less than zero. If count is greater than 0, then every value in the range [0, count) must be valid indexes into the source list.</param>
            <returns>A list that is a slice of the source list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0},Nito.Linq.ListExtensions.ISwappable[])">
            <summary>
            Sorts a list in-place using the specified comparison object.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to be sorted.</param>
            <param name="comparer">The comparison object.</param>
            <param name="others">Other lists to be kept in sync with the sorted list. As <paramref name="list"/> is sorted, the same relative elements are rearranged in these lists.</param>
            <returns>The sorted list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.Sort``1(System.Collections.Generic.IList{``0},Nito.Linq.ListExtensions.ISwappable[])">
            <summary>
            Sorts a list in-place using the default comparison object.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to be sorted.</param>
            <param name="others">Other lists to be kept in sync with the sorted list. As <paramref name="list"/> is sorted, the same relative elements are rearranged in these lists.</param>
            <returns>The sorted list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Int32},Nito.Linq.ListExtensions.ISwappable[])">
            <summary>
            Sorts a list in-place using the specified comparison delegate.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to be sorted.</param>
            <param name="comparer">The comparison delegate.</param>
            <param name="others">Other lists to be kept in sync with the sorted list. As <paramref name="list"/> is sorted, the same relative elements are rearranged in these lists.</param>
            <returns>The sorted list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.SortIndirect``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0},Nito.Linq.ListExtensions.ISwappable[])">
            <summary>
            Creates and returns a sorted view of the source list, using the specified comparison object.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to be sorted. As long as the returned view is referenced, the source list should not be modified in any way.</param>
            <param name="comparer">The comparison object.</param>
            <param name="others">Other lists to be kept in sync with the sorted view. As the view is sorted, the same relative elements are rearranged in these lists.</param>
            <returns>The sorted view of the source list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.SortIndirect``1(System.Collections.Generic.IList{``0},Nito.Linq.ListExtensions.ISwappable[])">
            <summary>
            Creates and returns a sorted view of the source list, using the default comparison object.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to be sorted. As long as the returned view is referenced, the source list should not be modified in any way.</param>
            <param name="others">Other lists to be kept in sync with the sorted view. As the view is sorted, the same relative elements are rearranged in these lists.</param>
            <returns>The sorted view of the source list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.SortIndirect``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Int32},Nito.Linq.ListExtensions.ISwappable[])">
            <summary>
            Creates and returns a sorted view of the source list, using the specified comparison delegate.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to be sorted. As long as the returned view is referenced, the source list should not be modified in any way.</param>
            <param name="comparer">The comparison delegate.</param>
            <param name="others">Other lists to be kept in sync with the sorted view. As the view is sorted, the same relative elements are rearranged in these lists.</param>
            <returns>The sorted view of the source list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.Contains``1(Nito.Linq.ISortedList{``0},System.Func{``0,System.Int32})">
            <summary>
            Searches a sorted list using a given finder function. The finder function must be compatible with the comparer used to sort the list.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The sorted list.</param>
            <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
            <returns><c>true</c> if there is at least one item that causes <paramref name="finder"/> to return 0, if any; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.IndexOf``1(Nito.Linq.ISortedList{``0},System.Func{``0,System.Int32})">
            <summary>
            Searches a sorted list using a given finder function, returning the index of the first matching item if found. If not found, the return value is -1. The finder function must be compatible with the comparer used to sort the list.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The sorted list.</param>
            <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
            <returns>The index of the first item that causes <paramref name="finder"/> to return 0, if any; otherwise, -1.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.LastIndexOf``1(Nito.Linq.ISortedList{``0},System.Func{``0,System.Int32})">
            <summary>
            Searches a sorted list using a given finder function, returning the index of the last matching item if found. If not found, the return value is -1. The finder function must be compatible with the comparer used to sort the list.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The sorted list.</param>
            <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
            <returns>The index of the last item that causes <paramref name="finder"/> to return 0, if any; otherwise, -1.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.LastIndexOf``1(Nito.Linq.ISortedList{``0},``0)">
            <summary>
            Searches a sorted list for a given value, returning the index of the last matching item if found. If not found, the return value is -1.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The sorted list.</param>
            <param name="item">The item to search for in the list.</param>
            <returns>The index of the last occurence of <paramref name="item"/>, if any; otherwise, -1.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.BinarySearch``1(Nito.Linq.ISortedList{``0},``0)">
            <summary>
            Searches a sorted list for a given value, returning its index if found. If not found, the return value is the bitwise complement of the next element larger than the value.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The sorted list.</param>
            <param name="item">The item to search for in the list.</param>
            <returns>The index of <paramref name="item"/> if it was in the list; otherwise, the bitwise complement of the next larger element in the list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.BinarySearch``1(Nito.Linq.ISortedList{``0},System.Func{``0,System.Int32})">
            <summary>
            Searches a sorted list using a given finder function. If not found, the return value is the bitwise complement of the next element larger than the value. The finder function must be compatible with the comparer used to sort the list.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The sorted list.</param>
            <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
            <returns>The index of an item that causes <paramref name="finder"/> to return 0, if any; otherwise, the bitwise complement of the next larger element in the list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.LowerBound``1(Nito.Linq.ISortedList{``0},``0)">
            <summary>
            Searches a sorted list for a given value, returning the index of the first matching item if found. If not found, the return value is the bitwise complement of the next element larger than the value.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The sorted list.</param>
            <param name="item">The item to search for in the list.</param>
            <returns>The index of the first occurence of <paramref name="item"/> if it was in the list; otherwise, the bitwise complement of the next larger element in the list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.LowerBound``1(Nito.Linq.ISortedList{``0},System.Func{``0,System.Int32})">
            <summary>
            Searches a sorted list using a given finder function, returning the index of the first matching item if found. If not found, the return value is the bitwise complement of the next element larger than the value. The finder function must be compatible with the comparer used to sort the list.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The sorted list.</param>
            <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
            <returns>The index of the first item that causes <paramref name="finder"/> to return 0, if any; otherwise, the bitwise complement of the next larger element in the list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.UpperBound``1(Nito.Linq.ISortedList{``0},``0)">
            <summary>
            Searches a sorted list for a given value, returning the index one past the last matching item if found. If not found, the return value is the bitwise complement of the next element larger than the value.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The sorted list.</param>
            <param name="item">The item to search for in the list.</param>
            <returns>The index one past the last occurence of <paramref name="item"/> if it was in the list; otherwise, the bitwise complement of the next larger element in the list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.UpperBound``1(Nito.Linq.ISortedList{``0},System.Func{``0,System.Int32})">
            <summary>
            Searches a sorted list using a given finder function, returning the index one past the last matching item if found. If not found, the return value is the bitwise complement of the next element larger than the value. The finder function must be compatible with the comparer used to sort the list.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The sorted list.</param>
            <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
            <returns>The index one past the last item that causes <paramref name="finder"/> to return 0, if any; otherwise, the bitwise complement of the index one past the last item that causes <paramref name="finder"/> to return a positive result.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.EqualRange``1(Nito.Linq.ISortedList{``0},``0,System.Int32@,System.Int32@)">
            <summary>
            Searches a sorted list for all instances of a given value.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The sorted list.</param>
            <param name="item">The item to search for in the list.</param>
            <param name="begin">The lower bound of the range of matching values. [begin, end) may be an empty range.</param>
            <param name="end">The upper bound of the range of matching values. [begin, end) may be an empty range.</param>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.EqualRange``1(Nito.Linq.ISortedList{``0},System.Func{``0,System.Int32},System.Int32@,System.Int32@)">
            <summary>
            Searches a sorted list using a given finder function. The finder function must be compatible with the comparer used to sort the list.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The sorted list.</param>
            <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
            <param name="begin">The lower bound of the range of values causing <paramref name="finder"/> to return 0. [begin, end) may be an empty range.</param>
            <param name="end">The upper bound of the range of values causing <paramref name="finder"/> to return 0. [begin, end) may be an empty range.</param>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.Insert``1(Nito.Linq.ISortedList{``0},``0)">
            <summary>
            Inserts a value into a sorted list in-place, maintaining the sort order. Returns the index of the inserted item. To "insert" an item without modifying the source list, call <see cref="O:SortedEnumerableExtensions.MergeSorted"/>.
            </summary>
            <typeparam name="T">The type of object contained in the list.</typeparam>
            <param name="list">The sorted list into which to insert.</param>
            <param name="item">The item to insert into the list.</param>
            <returns>The index at which the new item was inserted.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.BinarySearchCore``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32},System.Int32@,System.Int32@)">
            <summary>
            Performs a binary search over a sorted list, returning both a match and the narrowed range.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The sorted list.</param>
            <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
            <param name="begin">On input, contains the beginning index at which to search. On output, contains the index of an item less than the found item, or the first item equal to the found item.</param>
            <param name="end">On input, contains the ending index at which to search. On output, contains the index one past an item greater than the found item, or the index one past the last item equal to the found item.</param>
            <returns>The index of an item that causes <paramref name="finder"/> to return 0, if any; otherwise, the bitwise complement of the next larger element in the list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.LowerBoundCore``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32},System.Int32@,System.Int32)">
            <summary>
            Modifies <paramref name="begin"/> so that it refers to the first matching item.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The sorted list.</param>
            <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
            <param name="begin">On input, contains the beginning index at which to search. On output, contains the index of the first matching item.</param>
            <param name="end">The ending index at which to search. The item at this index must match.</param>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.UpperBoundCore``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32},System.Int32,System.Int32@)">
            <summary>
            Modifies <paramref name="end"/> so that it refers to one past the last matching item.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The sorted list.</param>
            <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
            <param name="begin">The beginning index at which to search. The item at this index must match.</param>
            <param name="end">On input, contains the ending index at which to search. On output, contains the index one past the last matching item.</param>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.QuickSortCore``1(Nito.Linq.SortedListExtensions.SortParameters{``0},System.Int32,System.Int32)">
            <summary>
            Sorts a portion of a list. The range to sort is [<paramref name="left"/>, <paramref name="right"/>).
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="parameters">The source list, comparison object, and other lists that must be kept in sync.</param>
            <param name="begin">The beginning of the range to sort.</param>
            <param name="end">The ending of the range to sort.</param>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.QuickSortPartition``1(Nito.Linq.SortedListExtensions.SortParameters{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Partitions the elements of a list around a given pivot element. The range to partition is [<paramref name="begin"/>, <paramref name="end"/>), and this range must be at least 2 elements long.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="parameters">The source list, comparison object, and other lists that must be kept in sync.</param>
            <param name="begin">The beginning of the range to partition.</param>
            <param name="end">The ending of the range to partition.</param>
            <param name="pivotIndex">The index of the element chosen as the pivot.</param>
            <returns>The new index of the pivot element.</returns>
        </member>
        <member name="T:Nito.Linq.SortedListExtensions.SortParameters`1">
            <summary>
            A parameter holder class that exists only to reduce stack usage in the recursive QuickSort algorithm.
            </summary>
            <typeparam name="T">The type of elements in the source list.</typeparam>
        </member>
        <member name="M:Nito.Linq.SortedListExtensions.SortParameters`1.Swap(System.Int32,System.Int32)">
            <summary>
            Swaps two elements in the source list and all other lists.
            </summary>
            <param name="indexA">The index of the first element to swap.</param>
            <param name="indexB">The index of the second element to swap.</param>
        </member>
        <member name="P:Nito.Linq.SortedListExtensions.SortParameters`1.List">
            <summary>
            Gets or sets the source list.
            </summary>
        </member>
        <member name="P:Nito.Linq.SortedListExtensions.SortParameters`1.Comparer">
            <summary>
            Gets or sets the comparison object.
            </summary>
        </member>
        <member name="P:Nito.Linq.SortedListExtensions.SortParameters`1.Others">
            <summary>
            Gets or sets any other lists that need to be kept in sync with the source list.
            </summary>
        </member>
        <member name="T:Nito.Linq.ListSource">
            <summary>
            List sources.
            </summary>
        </member>
        <member name="M:Nito.Linq.ListSource.Empty``1">
            <summary>
            Returns an empty list.
            </summary>
            <typeparam name="T">The type of elements contained in the list.</typeparam>
            <returns>An empty read-only list.</returns>
        </member>
        <member name="M:Nito.Linq.ListSource.Return``1(``0)">
            <summary>
            Converts a single value into a list containing a single value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <returns>A read-only list containing a single element, <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.ListSource.Repeat``1(``0,System.Int32)">
            <summary>
            Converts a single value into a list containing that value the specified number of times.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <param name="count">The number of times <paramref name="source"/> is repeated. If <paramref name="count"/> is less than or equal to 0, an empty list is returned.</param>
            <returns>A read-only list containing <paramref name="count"/> elements, all equal to <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.ListSource.Generate``1(System.Func{``0},System.Int32)">
            <summary>
            Returns a read-only list that generates its elements when they are read.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="generator">The delegate that is used to generate the elements. This may be <c>null</c> if <paramref name="count"/> is less than or equal to 0.</param>
            <param name="count">The number of elements in the list. If <paramref name="count"/> is less than or equal to 0, an empty list is returned.</param>
            <returns>A read-only list that generates its elements on demand.</returns>
        </member>
        <member name="M:Nito.Linq.ListSource.Generate``1(System.Func{System.Int32,``0},System.Int32)">
            <summary>
            Returns a read-only list that generates its elements when they are read, passing the element's index to the generator delegate.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="generator">The delegate that is used to generate the elements. This may be <c>null</c> if <paramref name="count"/> is less than or equal to 0.</param>
            <param name="count">The number of elements in the list. If <paramref name="count"/> is less than or equal to 0, an empty list is returned.</param>
            <returns>A read-only list that generates its elements on demand.</returns>
        </member>
        <member name="T:Nito.Linq.Implementation.SortedListWrapper`1">
            <summary>
            Wraps a source list and comparison object.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="F:Nito.Linq.Implementation.SortedListWrapper`1.source">
            <summary>
            The source list.
            </summary>
        </member>
        <member name="M:Nito.Linq.Implementation.SortedListWrapper`1.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.Implementation.SortedListWrapper`1"/> class with the specified source list and comparison object.
            </summary>
            <param name="source">The source list.</param>
            <param name="comparer">The comparison object.</param>
        </member>
        <member name="M:Nito.Linq.Implementation.SortedListWrapper`1.Clear">
            <summary>
            Removes all items from this list.
            </summary>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Nito.Linq.Implementation.SortedListWrapper`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in this list.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>
            The index of <paramref name="item"/> if found in this list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Nito.Linq.Implementation.SortedListWrapper`1.Contains(`0)">
            <summary>
            Determines whether this list contains a specific value.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>
            true if <paramref name="item"/> is found in this list; otherwise, false.
            </returns>
        </member>
        <member name="M:Nito.Linq.Implementation.SortedListWrapper`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Nito.Linq.Implementation.SortedListWrapper`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.Implementation.SortedListWrapper`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Nito.Linq.Implementation.SortedListWrapper`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="P:Nito.Linq.Implementation.SortedListWrapper`1.Comparer">
            <summary>
            Gets a comparison object that defines how this list is sorted.
            </summary>
        </member>
        <member name="P:Nito.Linq.Implementation.SortedListWrapper`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this list is read-only. This list is read-only iff its source list is read-only.
            </summary>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Nito.Linq.Implementation.SortedListWrapper`1.Count">
            <summary>
            Gets the number of elements contained in this list.
            </summary>
            <returns>The number of elements contained in this list.</returns>
        </member>
        <member name="T:Nito.Linq.Implementation.IndirectList`1">
            <summary>
            An indirect list, which provides a layer of indirection for the index values of a source list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="F:Nito.Linq.Implementation.IndirectList`1.indices">
            <summary>
            The redirected index values.
            </summary>
        </member>
        <member name="M:Nito.Linq.Implementation.IndirectList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.Implementation.IndirectList`1"/> class for the given source list.
            </summary>
            <param name="source">The source list. The number of elements in the source list may not change as long as this <see cref="T:Nito.Linq.Implementation.IndirectList`1"/> is reachable.</param>
        </member>
        <member name="M:Nito.Linq.Implementation.IndirectList`1.GetComparer(System.Collections.Generic.IComparer{`0})">
            <summary>
            Returns an indirect comparer which may be used to sort or compare elements in <see cref="P:Nito.Linq.Implementation.IndirectList`1.Indices"/>, based on the specified source comparer.
            </summary>
            <param name="comparer">The source comparer.</param>
            <returns>The indirect comparer.</returns>
        </member>
        <member name="M:Nito.Linq.Implementation.IndirectList`1.GetComparer">
            <summary>
            Returns an indirect comparer which may be used to sort or compare elements in <see cref="P:Nito.Linq.Implementation.IndirectList`1.Indices"/>, based on the default source comparer.
            </summary>
            <returns>The indirect comparer.</returns>
        </member>
        <member name="M:Nito.Linq.Implementation.IndirectList`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Nito.Linq.Implementation.IndirectList`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified index. This implementation always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="P:Nito.Linq.Implementation.IndirectList`1.Source">
            <summary>
            Gets the source list.
            </summary>
        </member>
        <member name="P:Nito.Linq.Implementation.IndirectList`1.Indices">
            <summary>
            Gets the redirected index values. Elements in this list may be set, but not inserted or removed.
            </summary>
        </member>
        <member name="P:Nito.Linq.Implementation.IndirectList`1.Count">
            <summary>
            Gets the number of elements contained in this list.
            </summary>
        </member>
        <member name="T:Nito.Linq.SortedEnumerableExtensions">
            <summary>
            Extension methods for <see cref="T:Nito.Linq.ISortedEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.IsSorted``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a value indicating whether this sequence is sorted according to the default comparison object.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>Whether this sequence is sorted according to the default comparison object.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.IsSorted``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a value indicating whether this sequence is sorted according to the given comparison object.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="comparer">The comparison object.</param>
            <returns>Whether this sequence is sorted according to the given comparison object.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.IsSorted``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Returns a value indicating whether this sequence is sorted according to the given comparison delegate.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="comparer">The comparison delegate.</param>
            <returns>Whether this sequence is sorted according to the given comparison delegate.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.AsSortedEnumerable``1(Nito.Linq.ISortedEnumerable{``0})">
            <summary>
            Returns the source typed as <see cref="T:Nito.Linq.ISortedEnumerable`1"/>. This method has no effect other than to restrict the compile-time type of an object implementing <see cref="T:Nito.Linq.ISortedEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="list"/>.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>The source sequence, typed as <see cref="T:Nito.Linq.ISortedEnumerable`1"/>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.AsSorted``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Treats a sequence as though it were already sorted.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The sequence, which is already sorted.</param>
            <param name="comparer">The comparison object that defines how the sequence is sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.AsSorted``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Treats a sequence as though it were already sorted by the item type's default comparison.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The sequence, which is already sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.AsSorted``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Treats a sequence as though it were already sorted.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The sequence, which is already sorted.</param>
            <param name="comparer">The comparison delegate that defines how the sequence is sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.AsSorted``2(System.Collections.Generic.SortedList{``0,``1})">
            <summary>
            Treats a <see cref="T:System.Collections.Generic.SortedList`2"/> as a sorted sequence, sorted by the comparison function of the <see cref="T:System.Collections.Generic.SortedList`2"/>.
            </summary>
            <typeparam name="TKey">The type of keys in the <see cref="T:System.Collections.Generic.SortedList`2"/>.</typeparam>
            <typeparam name="TValue">The type of values in the <see cref="T:System.Collections.Generic.SortedList`2"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.SortedList`2"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.SortedList`2"/> as a sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.AsSorted``2(System.Collections.Generic.SortedDictionary{``0,``1})">
            <summary>
            Treats a <see cref="T:System.Collections.Generic.SortedDictionary`2"/> as a sorted sequence, sorted by the comparison function of the <see cref="T:System.Collections.Generic.SortedDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of keys in the <see cref="T:System.Collections.Generic.SortedDictionary`2"/>.</typeparam>
            <typeparam name="TValue">The type of values in the <see cref="T:System.Collections.Generic.SortedDictionary`2"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.SortedDictionary`2"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.SortedDictionary`2"/> as a sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.LowerBound``1(Nito.Linq.ISortedEnumerable{``0},``0)">
            <summary>
            Searches a sorted sequence for a given value, returning the index of the first matching item if found. If not found, the return value is the bitwise complement of the next element larger than the value.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The sorted sequence.</param>
            <param name="item">The item to search for in the sequence.</param>
            <returns>The index of the first occurence of <paramref name="item"/> if it was in the list; otherwise, the bitwise complement of the next larger element in the sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.LowerBound``1(Nito.Linq.ISortedEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Searches a sorted sequence for a given value, returning the index of the first matching item if found. If not found, the return value is the bitwise complement of the next element larger than the value. The finder function must be compatible with the comparer used to sort the sequence.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The sorted sequence.</param>
            <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
            <returns>The index of the first item that causes <paramref name="finder"/> to return 0, if any; otherwise, the bitwise complement of the next larger element in the list.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.UpperBound``1(Nito.Linq.ISortedEnumerable{``0},``0)">
            <summary>
            Searches a sorted sequence for a given value, returning the index one past the last matching item if found. If not found, the return value is the bitwise complement of the next element larger than the value.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The sorted sequence.</param>
            <param name="item">The item to search for in the sequence.</param>
            <returns>The index one past the last occurence of <paramref name="item"/> if it was in the sequence; otherwise, the bitwise complement of the next larger element in the sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.UpperBound``1(Nito.Linq.ISortedEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Searches a sorted sequence using a given finder function, returning the index one past the last matching item if found. If not found, the return value is the bitwise complement of the next element larger than the value. The finder function must be compatible with the comparer used to sort the sequence.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The sorted sequence.</param>
            <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
            <returns>The index one past the last item that causes <paramref name="finder"/> to return 0, if any; otherwise, the bitwise complement of the index one past the last item that causes <paramref name="finder"/> to return a positive result.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.EqualRange``1(Nito.Linq.ISortedEnumerable{``0},``0,System.Int32@,System.Int32@)">
            <summary>
            Searches a sorted sequence for all instances of a given value.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The sorted sequence.</param>
            <param name="item">The item to search for in the sequence.</param>
            <param name="begin">The lower bound of the range of matching values. [begin, end) may be an empty range.</param>
            <param name="end">The upper bound of the range of matching values. [begin, end) may be an empty range.</param>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.EqualRange``1(Nito.Linq.ISortedEnumerable{``0},System.Func{``0,System.Int32},System.Int32@,System.Int32@)">
            <summary>
            Searches a sorted sequence using a given finder function. The finder function must be compatible with the comparer used to sort the sequence.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The sorted sequence.</param>
            <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
            <param name="begin">The lower bound of the range of values causing <paramref name="finder"/> to return 0. [begin, end) may be an empty range.</param>
            <param name="end">The upper bound of the range of values causing <paramref name="finder"/> to return 0. [begin, end) may be an empty range.</param>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.Contains``1(Nito.Linq.ISortedEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Searches a sorted sequence using a given finder function. The finder function must be compatible with the comparer used to sort the sequence.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The sorted sequence.</param>
            <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
            <returns><c>true</c> if there is at least one item that causes <paramref name="finder"/> to return 0, if any; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.Contains``1(Nito.Linq.ISortedEnumerable{``0},``0)">
            <summary>
            Searches a sorted sequence for a given value.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The sorted sequence.</param>
            <param name="item">The item to search for in the sequence.</param>
            <returns><c>true</c> if there is at least one item that matches <paramref name="item"/>, if any; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.IndexOf``1(Nito.Linq.ISortedEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Searches a sorted sequence using a given finder function, returning the index of the first matching item if found. If not found, the return value is -1. The finder function must be compatible with the comparer used to sort the sequence.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The sorted sequence.</param>
            <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
            <returns>The index of the first item that causes <paramref name="finder"/> to return 0, if any; otherwise, -1.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.IndexOf``1(Nito.Linq.ISortedEnumerable{``0},``0)">
            <summary>
            Searches a sorted sequence for a given value, returning the index of the first matching item if found. If not found, the return value is -1.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The sorted sequence.</param>
            <param name="item">The item to search for in the sequence.</param>
            <returns>The index of the first item that matches <paramref name="item"/>, if any; otherwise, -1.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.LastIndexOf``1(Nito.Linq.ISortedEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Searches a sorted sequence using a given finder function, returning the index of the last matching item if found. If not found, the return value is -1. The finder function must be compatible with the comparer used to sort the sequence.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The sorted sequence.</param>
            <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
            <returns>The index of the last item that causes <paramref name="finder"/> to return 0, if any; otherwise, -1.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.LastIndexOf``1(Nito.Linq.ISortedEnumerable{``0},``0)">
            <summary>
            Searches a sorted sequence for a given value, returning the index of the last matching item if found. If not found, the return value is -1.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The sorted sequence.</param>
            <param name="item">The item to search for in the sequence.</param>
            <returns>The index of the last occurence of <paramref name="item"/>, if any; otherwise, -1.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.Skip``1(Nito.Linq.ISortedEnumerable{``0},System.Int32)">
            <summary>
            Skips the first few elements of a source sequence.
            </summary>
            <typeparam name="T">The type of object contained in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="offset">The offset into the sequence at which the returned sequence begins. Must be a valid index into the source sequence, or equal to the count of the source sequence.</param>
            <returns>A sequence that skips the first <paramref name="offset"/> elements of the source sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.Step``1(Nito.Linq.ISortedEnumerable{``0},System.Int32)">
            <summary>
            Steps through a sequence using a specified step size.
            </summary>
            <typeparam name="T">The type of object contained in the sequence.</typeparam>
            <param name="source">The sequence to step through.</param>
            <param name="step">The step size. Must be greater than 0.</param>
            <returns>The stepped sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.Take``1(Nito.Linq.ISortedEnumerable{``0},System.Int32)">
            <summary>
            Returns the first few elements of a source sequence.
            </summary>
            <typeparam name="T">The type of object contained in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">The number of elements to return. May not be less than zero. If count is greater than 0, then every value in the range [0, count) must be valid indexes into the source sequence.</param>
            <returns>A sequence that includes the first <paramref name="count"/> elements of the source sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.MergeSorted``1(Nito.Linq.ISortedEnumerable{``0},Nito.Linq.ISortedEnumerable{``0}[])">
            <summary>
            Produces a sorted sequence that is the merging of this sequence with all sequence arguments. Each argument must be a sequence that is sorted with a comparison object equivalent to this sequence's comparison object.
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="source">The first source sequence.</param>
            <param name="others">The other source sequences.</param>
            <returns>The merging of the first source sequence with all the other source sequences, as a sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.MergeSorted``1(System.Collections.Generic.IEnumerable{Nito.Linq.ISortedEnumerable{``0}})">
            <summary>
            Given a non-empty sequence of sorted sequences, produces a sorted sequence that is the merging of those sequences. All sorted sequences in <paramref name="sources"/> must be sorted using equivalent comparison objects.
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="sources">The sequence of sorted sequences.</param>
            <returns>The merging of the source sequences, as a sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.MergeSorted``1(Nito.Linq.ISortedEnumerable{``0},``0[])">
            <summary>
            Produces a sorted sequence that is the merging of this sequence with all value arguments. The arguments need not be in a sorted order.
            </summary>
            <typeparam name="T">The type of elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="values">The values to merge into the source source.</param>
            <returns>The merging of the source sequence with all values.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.UnionWithDuplicates``1(Nito.Linq.ISortedEnumerable{``0},Nito.Linq.ISortedEnumerable{``0}[])">
            <summary>
            Produces a sorted sequence that is the union of this sequence with all sequence arguments. Each argument must be a sequence that is sorted with a comparison object equivalent to this sequence's comparison object. Items that are duplicated in at least one of the input(s) are duplicated in the output.
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="source">The first source sequence.</param>
            <param name="others">The other source sequences.</param>
            <returns>The union of the first source sequence with all the other source sequences, as a sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.Union``1(Nito.Linq.ISortedEnumerable{``0},Nito.Linq.ISortedEnumerable{``0}[])">
            <summary>
            Produces a sorted sequence that is the union of this sequence with all sequence arguments. Each argument must be a sequence that is sorted with a comparison object equivalent to this sequence's comparison object. The resulting sequence is distinct (no duplicate items).
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="source">The first source sequence.</param>
            <param name="others">The other source sequences.</param>
            <returns>The distinct union of the first source sequence with all the other source sequences, as a sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.UnionWithDuplicates``1(System.Collections.Generic.IEnumerable{Nito.Linq.ISortedEnumerable{``0}})">
            <summary>
            Given a non-empty sequence of sorted sequences, produces a sorted sequence that is the union of those sequences. All sorted sequences in <paramref name="sources"/> must be sorted using equivalent comparison objects. Items that are duplicated in at least one of the input(s) are duplicated in the output.
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="sources">The sequence of sorted sequences.</param>
            <returns>The union of the source sequences, as a sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.Union``1(System.Collections.Generic.IEnumerable{Nito.Linq.ISortedEnumerable{``0}})">
            <summary>
            Given a non-empty sequence of sorted sequences, produces a sorted sequence that is the union of those sequences. All sorted sequences in <paramref name="sources"/> must be sorted using equivalent comparison objects. The resulting sequence is distinct (no duplicate items).
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="sources">The sequence of sorted sequences.</param>
            <returns>The distinct union of the source sequences, as a sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.UnionWithDuplicates``1(Nito.Linq.ISortedEnumerable{``0},``0[])">
            <summary>
            Produces a sorted sequence that is the union of this sequence with all value arguments. The arguments need not be in a sorted order. Items that are duplicated in at least one of the input(s) are duplicated in the output.
            </summary>
            <typeparam name="T">The type of elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="values">The values to merge into the source source.</param>
            <returns>The union of the source sequence with all values.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.Union``1(Nito.Linq.ISortedEnumerable{``0},``0[])">
            <summary>
            Produces a sorted sequence that is the union of this sequence with all value arguments. The arguments need not be in a sorted order. The resulting sequence is distinct (no duplicate items).
            </summary>
            <typeparam name="T">The type of elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="values">The values to merge into the source source.</param>
            <returns>The distinct union of the source sequence with all values.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.IntersectWithDuplicates``1(Nito.Linq.ISortedEnumerable{``0},Nito.Linq.ISortedEnumerable{``0}[])">
            <summary>
            Produces a sorted sequence that is the intersection of this sequence with all sequence arguments. Each argument must be a sequence that is sorted with a comparison object equivalent to this sequence's comparison object. Items that are duplicated in all input sequences are duplicated in the output.
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="source">The first source sequence.</param>
            <param name="others">The other source sequences.</param>
            <returns>The intersection of the first source sequence with all the other source sequences, as a sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.Intersect``1(Nito.Linq.ISortedEnumerable{``0},Nito.Linq.ISortedEnumerable{``0}[])">
            <summary>
            Produces a sorted sequence that is the intersection of this sequence with all sequence arguments. Each argument must be a sequence that is sorted with a comparison object equivalent to this sequence's comparison object. The resulting sequence is distinct (no duplicate items).
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="source">The first source sequence.</param>
            <param name="others">The other source sequences.</param>
            <returns>The intersection of the first source sequence with all the other source sequences, as a distinct, sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.IntersectWithDuplicates``1(System.Collections.Generic.IEnumerable{Nito.Linq.ISortedEnumerable{``0}})">
            <summary>
            Given a non-empty sequence of sorted sequences, produces a sorted sequence that is the intersection of those sequences. All sorted sequences in <paramref name="sources"/> must be sorted using equivalent comparison objects. Items that are duplicated in all input sequences are duplicated in the output.
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="sources">The sequence of sorted sequences.</param>
            <returns>The intersection of the source sequences, as a sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{Nito.Linq.ISortedEnumerable{``0}})">
            <summary>
            Given a non-empty sequence of sorted sequences, produces a sorted sequence that is the intersection of those sequences. All sorted sequences in <paramref name="sources"/> must be sorted using equivalent comparison objects. The resulting sequence is distinct (no duplicate items).
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="sources">The sequence of sorted sequences.</param>
            <returns>The intersection of the source sequences, as a distinct, sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.ExceptWithDuplicates``1(Nito.Linq.ISortedEnumerable{``0},Nito.Linq.ISortedEnumerable{``0})">
            <summary>
            Produces a sorted sequence that is the difference of this sequence with another sequence. The other sequence must be a sequence that is sorted with a comparison object equivalent to this sequence's comparison object. Items that are duplicated in the source sequences must be duplicated in the other sequence to prevent them from being included in the resulting sequence.
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="source">The first source sequence.</param>
            <param name="other">The other source sequence.</param>
            <returns>A sorted sequence containing all elements in the first source sequence except for elements in the other source sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.Except``1(Nito.Linq.ISortedEnumerable{``0},Nito.Linq.ISortedEnumerable{``0})">
            <summary>
            Produces a sorted sequence that is the difference of this sequence with another sequence. The other sequence must be a sequence that is sorted with a comparison object equivalent to this sequence's comparison object. The resulting sequence is distinct (no duplicate items).
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="source">The first source sequence.</param>
            <param name="other">The other source sequence.</param>
            <returns>A sorted sequence containing all distinct elements in the first source sequence except for elements in the other source sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.Distinct``1(Nito.Linq.ISortedEnumerable{``0})">
            <summary>
            Returns distinct elements from a sorted sequence.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>Each distinct element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.DistinctCore``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns distinct elements from an implicitly sorted sequence.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The implicitly sorted source sequence.</param>
            <param name="comparer">The comparison object. The implicitly sorted sequence <paramref name="source"/> must be sorted using a comparison object equivalent to <paramref name="comparer"/>.</param>
            <returns>Each distinct element in <paramref name="source"/>, as an implicitly sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.UnionCore``1(System.Collections.Generic.IEnumerable{Nito.Linq.ISortedEnumerable{``0}},System.Collections.Generic.IComparer{``0})">
            <summary>
            Given a sequence of sorted sequences, produces a sorted sequence that is the union of those sequences according to a specified comparison object.
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="sources">The sequence of sorted sequences.</param>
            <param name="comparer">The comparison object. All sorted sequences in <paramref name="sources"/> must be sorted using a comparison object equivalent to <paramref name="comparer"/>.</param>
            <returns>The union of the source sequences, as a sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.UnionCore``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Given two implicitly sorted sequences, produces an implicitly sorted sequence that is the union of those sequences according to a specified comparison object.
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="first">The first implicitly sorted sequence.</param>
            <param name="second">The second implicitly sorted sequence.</param>
            <param name="comparer">The comparison object. Both <paramref name="first"/> and <paramref name="second"/> must be sorted using a comparison object equivalent to <paramref name="comparer"/>.</param>
            <returns>The union of <paramref name="first"/> and <paramref name="second"/>, as an implicitly sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.MergeCore``1(System.Collections.Generic.IEnumerable{Nito.Linq.ISortedEnumerable{``0}},System.Collections.Generic.IComparer{``0})">
            <summary>
            Given a sequence of sorted sequences, produces a sorted sequence that is the merging of those sequences according to a specified comparison object.
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="sources">The sequence of sorted sequences.</param>
            <param name="comparer">The comparison object. All sorted sequences in <paramref name="sources"/> must be sorted using a comparison object equivalent to <paramref name="comparer"/>.</param>
            <returns>The merging of the source sequences, as a sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.MergeCore``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Given two implicitly sorted sequences, produces an implicitly sorted sequence that is the merging of those sequences according to a specified comparison object.
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="first">The first implicitly sorted sequence.</param>
            <param name="second">The second implicitly sorted sequence.</param>
            <param name="comparer">The comparison object. Both <paramref name="first"/> and <paramref name="second"/> must be sorted using a comparison object equivalent to <paramref name="comparer"/>.</param>
            <returns>The merging of <paramref name="first"/> and <paramref name="second"/>, as an implicitly sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.IntersectCore``1(System.Collections.Generic.IEnumerable{Nito.Linq.ISortedEnumerable{``0}},System.Collections.Generic.IComparer{``0})">
            <summary>
            Given a sequence of sorted sequences, produces a sorted sequence that is the intersection of those sequences according to a specified comparison object.
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="sources">The sequence of sorted sequences.</param>
            <param name="comparer">The comparison object. All sorted sequences in <paramref name="sources"/> must be sorted using a comparison object equivalent to <paramref name="comparer"/>.</param>
            <returns>The intersection of the source sequences, as a sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.IntersectCore``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Given two implicitly sorted sequences, produces an implicitly sorted sequence that is the intersection of those sequences according to a specified comparison object.
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="first">The first implicitly sorted sequence.</param>
            <param name="second">The second implicitly sorted sequence.</param>
            <param name="comparer">The comparison object. Both <paramref name="first"/> and <paramref name="second"/> must be sorted using a comparison object equivalent to <paramref name="comparer"/>.</param>
            <returns>The intersection of <paramref name="first"/> and <paramref name="second"/>, as an implicitly sorted sequence.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.ExceptCore``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Given two implicitly sorted sequences, produces an implicitly sorted sequence that is the difference of those sequences according to a specified comparison object.
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="first">The first implicitly sorted sequence.</param>
            <param name="second">The second implicitly sorted sequence.</param>
            <param name="comparer">The comparison object. Both <paramref name="first"/> and <paramref name="second"/> must be sorted using a comparison object equivalent to <paramref name="comparer"/>.</param>
            <returns>The difference of <paramref name="first"/> and <paramref name="second"/>, as an implicitly sorted sequence.</returns>
        </member>
        <member name="T:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1">
            <summary>
            An enumerator that caches the return value from <see cref="M:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.MoveNext"/> and starts on the first value.
            </summary>
            <typeparam name="T">The type of element contained in the enumerator.</typeparam>
        </member>
        <member name="F:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.source">
            <summary>
            The source enumerator.
            </summary>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1"/> class with the given source enumerable.
            </summary>
            <param name="source">The source enumerable.</param>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.MoveNext">
            <summary>
            Moves the iterator forward one value. Returns false if <see cref="P:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.Done"/> is now true.
            </summary>
            <returns>Whether the sequence is still valid.</returns>
        </member>
        <member name="M:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.Dispose">
            <summary>
            Disposes the iterator.
            </summary>
        </member>
        <member name="P:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.Done">
            <summary>
            Gets a value indicating whether this iterator is done.
            </summary>
        </member>
        <member name="P:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.Current">
            <summary>
            Gets the current value of the iterator. Only valid if <see cref="P:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.Done"/> is false.
            </summary>
        </member>
        <member name="P:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.RemainingValues">
            <summary>
            Gets an enumeration that, starting with <see cref="P:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.Current"/>, yields all remaining values in the source enumerator.
            </summary>
        </member>
        <member name="T:Nito.Linq.Implementation.AnonymousReadOnlyList`1">
            <summary>
            Provides a delegate-based implementation of a read-only list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="F:Nito.Linq.Implementation.AnonymousReadOnlyList`1.count">
            <summary>
            The delegate used to get the number of items in the list.
            </summary>
        </member>
        <member name="F:Nito.Linq.Implementation.AnonymousReadOnlyList`1.getItem">
            <summary>
            The delegate used to get items in the list.
            </summary>
        </member>
        <member name="M:Nito.Linq.Implementation.AnonymousReadOnlyList`1.#ctor(System.Func{System.Int32,`0},System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.Implementation.AnonymousReadOnlyList`1"/> class with the specified implementation.
            </summary>
            <param name="getItem">The delegate used to get items in the list.</param>
            <param name="count">The delegate used to get the number of items in the list.</param>
        </member>
        <member name="M:Nito.Linq.Implementation.AnonymousReadOnlyList`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Nito.Linq.Implementation.AnonymousReadOnlyList`1.Count">
            <summary>
            Gets the number of elements contained in this list.
            </summary>
            <returns>The number of elements contained in this list.</returns>
        </member>
        <member name="T:Nito.Linq.Implementation.SortedEnumerableWrapper`1">
            <summary>
            Wraps a source sequence and comparison object.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
        </member>
        <member name="F:Nito.Linq.Implementation.SortedEnumerableWrapper`1.source">
            <summary>
            The source sequence.
            </summary>
        </member>
        <member name="M:Nito.Linq.Implementation.SortedEnumerableWrapper`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.Implementation.SortedEnumerableWrapper`1"/> class with the specified source sequence and comparison object.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="comparer">The comparison object.</param>
        </member>
        <member name="M:Nito.Linq.Implementation.SortedEnumerableWrapper`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Nito.Linq.Implementation.SortedEnumerableWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Nito.Linq.Implementation.SortedEnumerableWrapper`1.Comparer">
            <summary>
            Gets a comparison object that defines how this sequence is sorted.
            </summary>
        </member>
        <member name="T:Nito.Linq.Implementation.ListHelper">
            <summary>
            Helper classes and methods for implementing lists.
            </summary>
        </member>
        <member name="M:Nito.Linq.Implementation.ListHelper.CheckRangeArguments(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="offset"/> and <paramref name="count"/> arguments for validity when applied to a source of a given length. Allows 0-element ranges, including a 0-element range at the end of the source.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="offset">The index into source at which the range begins.</param>
            <param name="count">The number of elements in the range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The range [offset, offset + count) is not within the range [0, sourceLength).</exception>
        </member>
        <member name="M:Nito.Linq.Implementation.ListHelper.CheckExistingIndexArgument(System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> argument to see if it refers to an existing element in a source of a given length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an existing element for the source.</exception>
        </member>
        <member name="M:Nito.Linq.Implementation.ListHelper.CheckNewIndexArgument(System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> argument to see if it refers to a valid insertion point in a source of a given length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an insertion point for the source.</exception>
        </member>
        <member name="T:Nito.Linq.EnumerableSource">
            <summary>
            Sequence sources.
            </summary>
        </member>
        <member name="M:Nito.Linq.EnumerableSource.Empty``1">
            <summary>
            Creates an empty sequence. Identical to <see cref="M:System.Linq.Enumerable.Empty``1"/>.
            </summary>
            <typeparam name="T">The type of elements (not) in the sequence.</typeparam>
            <returns>An empty sequence.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableSource.Return``1(``0)">
            <summary>
            Converts a single value into a sequence containing a single value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <returns>A sequence containing a single element, <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableSource.Repeat``1(``0,System.Int32)">
            <summary>
            Converts a single value into a sequence containing that value the specified number of times. Identical to Rx's <c>EnumerableEx.Repeat</c>. Identical to <see cref="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)"/>, except that if <paramref name="count"/> is less than 0, this method returns an empty sequence instead of raising an exception.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <param name="count">The number of times <paramref name="source"/> is repeated. If <paramref name="count"/> is less than or equal to 0, an empty sequence is returned.</param>
            <returns>A sequence containing <paramref name="count"/> elements, all equal to <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableSource.Repeat``1(``0)">
            <summary>
            Converts a single value into a sequence containing that value an infinite number of times.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The value.</param>
            <returns>A sequence containing an infinite number of elements, all equal to <paramref name="source"/>.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableSource.Generate``2(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``0})">
            <summary>
            Generates an infinite sequence by iterating from an initial state; for each state, a sequence is generated.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TResult">The type of elements in the sequence.</typeparam>
            <param name="initialState">The starting value of the state.</param>
            <param name="resultSelector">The generator delegate that generates a sequence from a state value.</param>
            <param name="iterate">The iterator delegate that moves the state from one value to the next.</param>
            <returns>An infinite sequence.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableSource.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``0})">
            <summary>
            Generates a sequence by iterating from an initial state until the condition delegate returns <c>false</c>; for each state, a sequence is generated.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TResult">The type of elements in the sequence.</typeparam>
            <param name="initialState">The starting value of the state.</param>
            <param name="condition">The condition delegate that determines if a state value constitutes the end of the sequence.</param>
            <param name="resultSelector">The generator delegate that generates a sequence from a state value.</param>
            <param name="iterate">The iterator delegate that moves the state from one value to the next.</param>
            <returns>A generated sequence.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableSource.Generate``2(``0,System.Func{``0,``1},System.Func{``0,``0})">
            <summary>
            Generates an infinite sequence by iterating from an initial state; for each state, a single value is generated.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TResult">The type of elements in the sequence.</typeparam>
            <param name="initialState">The starting value of the state.</param>
            <param name="resultSelector">The generator delegate that generates a sequence value from a state value.</param>
            <param name="iterate">The iterator delegate that moves the state from one value to the next.</param>
            <returns>A generated sequence.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableSource.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,``0})">
            <summary>
            Generates a sequence by iterating from an initial state until the condition delegate returns <c>false</c>; for each state, a single value is generated.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TResult">The type of elements in the sequence.</typeparam>
            <param name="initialState">The starting value of the state.</param>
            <param name="condition">The condition delegate that determines if a state value constitutes the end of the sequence.</param>
            <param name="resultSelector">The generator delegate that generates a sequence value from a state value.</param>
            <param name="iterate">The iterator delegate that moves the state from one value to the next.</param>
            <returns>A generated sequence.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableSource.Defer``1(System.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Creates a sequence that invokes the factory delegate whenever the sequence is enumerated.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="factory">The factory delegate that is invoked whenever the returned sequence is enumerated.</param>
            <returns>A sequence that invokes the factory delegate whenever it is enumerated.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableSource.Range(System.Int32,System.Int32)">
            <summary>
            Generates a sequence of integers. Similar to <see cref="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)"/>, except that this method will return an empty sequence if <paramref name="count"/> is less than 0.
            </summary>
            <param name="start">The first integer in the returned sequence.</param>
            <param name="count">The number of integers in the returned sequence. If <paramref name="count"/> is less than or equal to 0, an empty sequence is returned.</param>
            <returns>A sequence of integers.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableSource.Generate``1(System.Func{``0})">
            <summary>
            Generates an infinite sequence.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="generator">The generator delegate that generates each value in the sequence.</param>
            <returns>An infinite sequence.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableSource.Generate``1(System.Func{System.Int32,``0})">
            <summary>
            Generates an infinite sequence.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="generator">The generator delegate that generates each value in the sequence.</param>
            <returns>A generated sequence.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableSource.Generate``1(System.Func{System.Int32,``0},System.Int32)">
            <summary>
            Generates a sequence of a specified length.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="generator">The generator delegate that generates each value in the sequence. This may be <c>null</c> if <paramref name="count"/> is less than or equal to 0.</param>
            <param name="count">The number of elements in the resulting sequence. If <paramref name="count"/> is less than or equal to 0, an empty sequence is returned.</param>
            <returns>A generated sequence.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableSource.Generate``1(System.Func{``0},System.Int32)">
            <summary>
            Generates a sequence of a specified length.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="generator">The generator delegate that generates each value in the sequence. This may be <c>null</c> if <paramref name="count"/> is less than or equal to 0.</param>
            <param name="count">The number of elements in the resulting sequence. If <paramref name="count"/> is less than or equal to 0, an empty sequence is returned.</param>
            <returns>A generated sequence.</returns>
        </member>
        <member name="T:Nito.Linq.Implementation.AnonymousComparer`1">
            <summary>
            An object that implements <see cref="T:System.Collections.Generic.IComparer`1"/> using a delegate. <see cref="P:Nito.Linq.Implementation.AnonymousComparer`1.Compare"/> must be set before using an instance of this class.
            </summary>
            <typeparam name="T">The type of items to compare.</typeparam>
        </member>
        <member name="M:Nito.Linq.Implementation.AnonymousComparer`1.System#Collections#Generic#IComparer{T}#Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value less than 0 if <paramref name="x"/> is less than <paramref name="y"/>, 0 if <paramref name="x"/> is equal to <paramref name="y"/>, or greater than 0 if <paramref name="x"/> is greater than <paramref name="y"/>.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A value less than 0 if <paramref name="x"/> is less than <paramref name="y"/>, 0 if <paramref name="x"/> is equal to <paramref name="y"/>, or greater than 0 if <paramref name="x"/> is greater than <paramref name="y"/>.</returns>
        </member>
        <member name="P:Nito.Linq.Implementation.AnonymousComparer`1.Compare">
            <summary>
            Gets or sets the Compare delegate, which compares two objects and returns a value less than 0 if its first argument is less than its second argument, 0 if its two arguments are equal, or greater than 0 if its first argument is greater than its second argument.
            </summary>
        </member>
        <member name="T:Nito.Linq.EnumerableExtensions">
            <summary>
            Extension methods for sequences.
            </summary>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Concatenates the specified sequences. Similar to <see cref="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>, except this method allows any number of sequences to be concatenated. Similar to Rx's <c>EnumerableEx.Concat</c>, except this method is an extension method.
            </summary>
            <typeparam name="T">The type of elements in the source sequences.</typeparam>
            <param name="first">The first source sequence.</param>
            <param name="second">The second source sequence.</param>
            <param name="others">The other source sequences.</param>
            <returns>The concatenated sequence.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.Zip``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Combines three source sequences into a result sequence. If the source sequences are of different lengths, the resulting sequence has a length equal to the smallest of the three.
            </summary>
            <typeparam name="TFirst">The type of elements in the first source sequence.</typeparam>
            <typeparam name="TSecond">The type of elements in the second source sequence.</typeparam>
            <typeparam name="TThird">The type of elements in the third source sequence.</typeparam>
            <typeparam name="TResult">The type of elements in the resulting sequence.</typeparam>
            <param name="first">The first source sequence.</param>
            <param name="second">The second source sequence.</param>
            <param name="third">The third source sequence.</param>
            <param name="zipper">The delegate that creates a new element from corresponding elements of the three source sequences.</param>
            <returns>The resulting combined sequence.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens a sequence of sequences into one long sequence.
            </summary>
            <typeparam name="T">The type of elements in the resulting sequence.</typeparam>
            <param name="source">The sequence of sequences.</param>
            <returns>The flattened sequence.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.Step``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Steps through a sequence using a specified step size. The first element of the resulting sequence is the first element of the source sequence.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The sequence to step through.</param>
            <param name="step">The step size. Must be greater than 0.</param>
            <returns>The stepped sequence.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="step"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.Rotate``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Rotates a sequence by a given offset. This method may enumerate the sequence more than once.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence to rotate.</param>
            <param name="offset">The number of elements to rotate. If <paramref name="offset"/> is less than or equal to 0, or if <paramref name="offset"/> is greater than or equal to the number of elements in the sequence, then the result of this method is identical to the source sequence.</param>
            <returns>The rotated sequence.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Determines the index of an element in a sequence using the default equality comparer.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence in which to locate the value.</param>
            <param name="value">The value to locate in the sequence.</param>
            <returns>The index of <paramref name="value"/> if found in the sequence; otherwise, -1.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines the index of the first matching element in a sequence.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence in which to locate the value.</param>
            <param name="match">The delegate that defines the conditions of the element to search for.</param>
            <returns>The index of the first element that returned true from <paramref name="match"/> if found in the sequence; otherwise, -1.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines the index of the last matching element in a sequence.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence in which to locate the value.</param>
            <param name="match">The delegate that defines the conditions of the element to search for.</param>
            <returns>The index of the last element that returned true from <paramref name="match"/> if found in the sequence; otherwise, -1.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Determines the index of the last matching element in a sequence.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence in which to locate the value.</param>
            <param name="value">The value to locate in the sequence.</param>
            <returns>The index of the last instance of <paramref name="value"/> if found in the sequence; otherwise, -1.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.IndexOfMin``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the index of the smallest item in a sequence, according to the provided comparison object.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence to search.</param>
            <param name="comparer">The comparison object.</param>
            <returns>The index of the smallest item in the sequence, or -1 if the sequence is empty.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.IndexOfMin``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the index of the smallest item in a sequence, according to the default comparison object.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence to search.</param>
            <returns>The index of the smallest item in the sequence, or -1 if the sequence is empty.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.IndexOfMin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Returns the index of the smallest item in a sequence, according to the provided comparison delegate.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence to search.</param>
            <param name="comparer">The comparison delegate.</param>
            <returns>The index of the smallest item in the sequence, or -1 if the sequence is empty.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the smallest item in a sequence, according to the provided comparison object.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence to search.</param>
            <param name="comparer">The comparison object.</param>
            <returns>The smallest item in the sequence, or the default value of <typeparamref name="T"/> if the sequence is empty.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Returns the smallest item in a sequence, according to the provided comparison delegate.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence to search.</param>
            <param name="comparer">The comparison delegate.</param>
            <returns>The smallest item in the sequence, or the default value of <typeparamref name="T"/> if the sequence is empty.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.IndexOfMax``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the index of the largest item in a sequence, according to the provided comparison object.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence to search.</param>
            <param name="comparer">The comparison object.</param>
            <returns>The index of the largest item in the sequence, or -1 if the sequence is empty.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.IndexOfMax``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the index of the largest item in a sequence, according to the default comparison object.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence to search.</param>
            <returns>The index of the largest item in the sequence, or -1 if the sequence is empty.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.IndexOfMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Returns the index of the largest item in a sequence, according to the provided comparison delegate.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence to search.</param>
            <param name="comparer">The comparison delegate.</param>
            <returns>The index of the largest item in the sequence, or -1 if the sequence is empty.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the largest item in a sequence, according to the provided comparison object.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence to search.</param>
            <param name="comparer">The comparison object.</param>
            <returns>The largest item in the sequence, or the default value of <typeparamref name="T"/> if the sequence is empty.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Returns the largest item in a sequence, according to the provided comparison delegate.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence to search.</param>
            <param name="comparer">The comparison delegate.</param>
            <returns>The largest item in the sequence, or the default value of <typeparamref name="T"/> if the sequence is empty.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.SequenceCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Compares this sequence with another sequence lexicographically, using the specified comparison object to compare the sequence items. Returns a negative number if this sequence is less than the other sequence, 0 if the sequences are equal, or a positive number if this sequence is greater than the other sequence.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence to compare.</param>
            <param name="other">The other sequence against which to compare.</param>
            <param name="comparer">The comparison object used to compare the sequence items.</param>
            <returns>A negative number if this sequence is less than the other sequence, 0 if the sequences are equal, or a positive number if this sequence is greater than the other sequence.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.SequenceCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compares this sequence with another sequence lexicographically, using the default comparison object to compare the sequence items. Returns a negative number if this sequence is less than the other sequence, 0 if the sequences are equal, or a positive number if this sequence is greater than the other sequence.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence to compare.</param>
            <param name="other">The other sequence against which to compare.</param>
            <returns>A negative number if this sequence is less than the other sequence, 0 if the sequences are equal, or a positive number if this sequence is greater than the other sequence.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.SequenceCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Compares this sequence with another sequence lexicographically, using the specified comparison delegate to compare the sequence items. Returns a negative number if this sequence is less than the other sequence, 0 if the sequences are equal, or a positive number if this sequence is greater than the other sequence.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence to compare.</param>
            <param name="other">The other sequence against which to compare.</param>
            <param name="comparer">The comparison delegate used to compare the sequence items.</param>
            <returns>A negative number if this sequence is less than the other sequence, 0 if the sequences are equal, or a positive number if this sequence is greater than the other sequence.</returns>
        </member>
        <member name="M:Nito.Linq.EnumerableExtensions.StepCore``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Steps through a sequence using a specified step size. The first element of the resulting sequence is the first element of the source sequence.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The sequence to step through.</param>
            <param name="step">The step size. Must be greater than 0.</param>
            <returns>The stepped sequence.</returns>
        </member>
    </members>
</doc>
