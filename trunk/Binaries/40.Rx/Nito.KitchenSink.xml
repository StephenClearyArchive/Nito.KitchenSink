<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Nito.KitchenSink</name>
  </assembly>
  <members>
    <member name="T:Nito.KitchenSink.TextReaderExtensions">
      <summary>
            Extension methods for <see cref="T:System.IO.TextReader" /> classes.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.TextReaderExtensions.ApplyPutbackBuffer``1(``0)">
      <summary>
            Wraps this <see cref="T:System.IO.TextReader" /> with a putback buffer.
            </summary>
      <param name="source">The <see cref="T:System.IO.TextReader" /> to wrap.</param>
      <returns>A <see cref="T:System.IO.TextReader" /> with a putback buffer.</returns>
    </member>
    <member name="M:Nito.KitchenSink.TextReaderExtensions.NormalizeCrLf``1(``0)">
      <summary>
            Wraps this <see cref="T:System.IO.TextReader" />, converting any <c>\r\n</c>, <c>\r</c>, or <c>\n</c> character sequences to just <c>\n</c>.
            </summary>
      <param name="source">The <see cref="T:System.IO.TextReader" /> to wrap.</param>
      <returns>A <see cref="T:System.IO.TextReader" /> with normalized line endings.</returns>
    </member>
    <member name="M:Nito.KitchenSink.TextReaderExtensions.ApplyLineMapping``1(``0)">
      <summary>
            Wraps this <see cref="T:System.IO.TextReader" />, counting the lines and columns as characters are read.
            </summary>
      <param name="source">The <see cref="T:System.IO.TextReader" /> to wrap.</param>
      <returns>A <see cref="T:System.IO.TextReader" /> with counted lines and columns.</returns>
    </member>
    <member name="M:Nito.KitchenSink.TextReaderExtensions.Peekable``1(``0)">
      <summary>
            Wraps this <see cref="T:System.IO.TextReader" />, ensuring that <see cref="M:System.IO.TextReader.Peek" /> will only return <c>-1</c> when the end of the stream is reached.
            </summary>
      <param name="source">The <see cref="T:System.IO.TextReader" /> to wrap.</param>
      <returns>A peekable <see cref="T:System.IO.TextReader" />.</returns>
    </member>
    <member name="M:Nito.KitchenSink.TextReaderExtensions.ApplyPositionTracking``1(``0)">
      <summary>
            Wraps this <see cref="T:System.IO.TextReader" />, tracking the position of the stream as it is read.
            </summary>
      <param name="source">The <see cref="T:System.IO.TextReader" /> to wrap.</param>
      <returns>A <see cref="T:System.IO.TextReader" /> with position tracking.</returns>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.InternetHandle">
      <summary>
            The base class for all internet handles. Note that this wrapper does NOT support asynchronous operations! Multiple threads may safely call <see cref="M:Nito.KitchenSink.WinInet.InternetHandle.Dispose" />.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.InternetHandle.InternetCallback">
      <summary>
            An internet status callback delegate, used to report progress.
            </summary>
      <param name="args">The arguments for the callback delegate. This includes the type of callback optionally with other details.</param>
    </member>
    <member name="F:Nito.KitchenSink.WinInet.InternetHandle.safeInternetHandle">
      <summary>
            The underlying safe internet handle.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.WinInet.InternetHandle.statusCallbackReference">
      <summary>
            A local reference to the status callback delegate wrapper (as passed to unmanaged code), to prevent garbage collection.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.WinInet.InternetHandle.statusCallback">
      <summary>
            The actual status callback delegate.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetHandle.#ctor(Nito.KitchenSink.WinInet.SafeInternetHandle)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.InternetHandle" /> class with the specified safe internet handle.
            </summary>
      <param name="safeInternetHandle">The safe internet handle.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetHandle.Dispose">
      <summary>
            Closes the internet handle. This method may be safely invoked by any thread; if a thread is in a blocking operation, another thread may close this handle to abort the operation.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetHandle.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetHandle.SafeInternetHandle">
      <summary>
            Gets the safe internet handle. Do not close this handle directly.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetHandle.StatusCallback">
      <summary>
            Gets or sets the internet status callback delegate, used to report progress.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetHandle.MilisecondsConnectTimeout">
      <summary>
            Sets the timeout value for establishing a connection, in milliseconds.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetHandle.MillisecondsReceiveTimeout">
      <summary>
            Sets the timeout value for receiving a response, in milliseconds.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetHandle.MillisecondsSendTimeout">
      <summary>
            Sets the timeout value for sending a command, in milliseconds.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.InternetOpenHandle">
      <summary>
            Represents a base internet handle that has been opened by calling the <c>InternetOpen</c> function. Note that this wrapper does NOT support asynchronous operations! Multiple threads may safely call <see cref="M:Nito.KitchenSink.WinInet.InternetHandle.Dispose" />.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType">
      <summary>
            The type of proxy used by this internet handle to access resources.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.InternetOpenHandle.Flags">
      <summary>
            The flags to use for this internet handle.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.#ctor(System.String,Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType,System.String,System.String,Nito.KitchenSink.WinInet.InternetOpenHandle.Flags)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.InternetOpenHandle" /> class with the specified parameters.
            </summary>
      <param name="agent">The user agent or process using WinInet. This is sent as the HTTP user agent and WinInet logs.</param>
      <param name="accessType">The type of the proxy used, if any.</param>
      <param name="proxyName">The name of the proxy server if <paramref name="accessType" /> is <see cref="F:Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType.Proxy" />.</param>
      <param name="proxyBypass">The list of host names or IP addresses that are not routed through the proxy when <paramref name="accessType" /> is <see cref="F:Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType.Proxy" />. This list may contain wildcards or be equal to the string <c>"&lt;local&gt;"</c>, but should not be an empty string.</param>
      <param name="flags">The flags to use for this internet handle.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.#ctor(System.String,Nito.KitchenSink.WinInet.InternetOpenHandle.Flags)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.InternetOpenHandle" /> class with direct (no proxy) access.
            </summary>
      <param name="agent">The user agent or process using WinInet. This is sent as the HTTP user agent and WinInet logs.</param>
      <param name="flags">The flags to use for this internet handle.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.InternetOpenHandle" /> class with direct (no proxy) access and no special flags.
            </summary>
      <param name="agent">The user agent or process using WinInet. This is sent as the HTTP user agent and WinInet logs.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.Connect(System.String,System.Int32,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Service,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
      <summary>
            Establishes a connection to the specified server.
            </summary>
      <param name="serverName">Name of the server to which to connect.</param>
      <param name="serverPort">The server port to which to connect.</param>
      <param name="username">The username to use for authentication.</param>
      <param name="password">The password to use for authentication.</param>
      <param name="service">The service type to which to connect.</param>
      <param name="flags">The connection flags.</param>
      <returns>An established internet connection to the specified server.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.ConnectFtp(System.String,System.Int32,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
      <summary>
            Establishes an FTP connection to the specified server.
            </summary>
      <param name="serverName">Name of the server to which to connect.</param>
      <param name="serverPort">The server port to which to connect.</param>
      <param name="username">The username to use for authentication.</param>
      <param name="password">The password to use for authentication.</param>
      <param name="flags">The connection flags.</param>
      <returns>An established FTP connection to the specified server.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.ConnectFtp(System.String,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
      <summary>
            Establishes an FTP connection to the specified server.
            </summary>
      <param name="serverName">Name of the server to which to connect.</param>
      <param name="username">The username to use for authentication.</param>
      <param name="password">The password to use for authentication.</param>
      <param name="flags">The connection flags.</param>
      <returns>An established FTP connection to the specified server.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.ConnectFtp(System.String,System.String,System.String)">
      <summary>
            Establishes an FTP connection to the specified server.
            </summary>
      <param name="serverName">Name of the server to which to connect.</param>
      <param name="username">The username to use for authentication.</param>
      <param name="password">The password to use for authentication.</param>
      <returns>An established FTP connection to the specified server.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.ConnectFtp(System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
      <summary>
            Establishes an FTP connection to the specified server.
            </summary>
      <param name="serverName">Name of the server to which to connect.</param>
      <param name="flags">The connection flags.</param>
      <returns>An established FTP connection to the specified server.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetOpenHandle.ConnectFtp(System.String)">
      <summary>
            Establishes an FTP connection to the specified server.
            </summary>
      <param name="serverName">Name of the server to which to connect.</param>
      <returns>An established FTP connection to the specified server.</returns>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.InternetConnectHandle">
      <summary>
            An internet connection handle (one that has been created using the <c>InternetConnect</c> function). Normally, a derived class such as <see cref="T:Nito.KitchenSink.WinInet.FtpHandle" /> is used instead of this class. Note that this wrapper does NOT support asynchronous operations! Multiple threads may safely call <see cref="M:Nito.KitchenSink.WinInet.InternetHandle.Dispose" />.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.InternetConnectHandle.Service">
      <summary>
            The types of services that an <see cref="T:Nito.KitchenSink.WinInet.InternetConnectHandle" /> may connect to.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.InternetConnectHandle.Flags">
      <summary>
            Flags for the internet connection.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetConnectHandle.#ctor(Nito.KitchenSink.WinInet.InternetHandle,System.String,System.Int32,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Service,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.InternetConnectHandle" /> class with the specified parameters. Normally, <see cref="M:Nito.KitchenSink.WinInet.InternetOpenHandle.Connect(System.String,System.Int32,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Service,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)" /> is used instead of this constructor.
            </summary>
      <param name="parent">The parent opened internet connection.</param>
      <param name="serverName">Name of the server to which to connect.</param>
      <param name="serverPort">The server port to which to connect.</param>
      <param name="username">The username to use for authentication.</param>
      <param name="password">The password to use for authentication.</param>
      <param name="service">The service type to which to connect.</param>
      <param name="flags">The connection flags.</param>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.FtpHandle">
      <summary>
            An FTP connection handle. Normally, the <see cref="T:Nito.KitchenSink.WinInet.FtpConnection" /> class is used instead of this class. Note that this wrapper does NOT support asynchronous operations! Multiple threads may safely call <see cref="M:Nito.KitchenSink.WinInet.InternetHandle.Dispose" />.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.FtpHandle.FindFilesFlags">
      <summary>
            Additional flags for the <see cref="O:Nito.KitchenSink.WinInet.FtpHandle.FindFiles" /> operation.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags">
      <summary>
            Additional flags for the <see cref="M:Nito.KitchenSink.WinInet.FtpHandle.GetFile(System.String,System.String,System.Boolean,Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags)" /> operation.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags">
      <summary>
            Additional flags for the <see cref="M:Nito.KitchenSink.WinInet.FtpHandle.PutFile(System.String,System.String,Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags)" /> operation.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpHandle.#ctor(Nito.KitchenSink.WinInet.InternetHandle,System.String,System.Int32,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.FtpHandle" /> class with the specified parameters. Normally, <see cref="M:Nito.KitchenSink.WinInet.InternetOpenHandle.Connect(System.String,System.Int32,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Service,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)" /> or <see cref="O:Nito.KitchenSink.WinInet.InternetOpenHandle.ConnectFtp" /> is used instead of this constructor.
            </summary>
      <param name="parent">The parent internet connection.</param>
      <param name="serverName">Name of the server to which to connect.</param>
      <param name="serverPort">The server port to which to connect.</param>
      <param name="username">The username to use for authentication.</param>
      <param name="password">The password to use for authentication.</param>
      <param name="flags">The connection flags, such as <see cref="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Flags.Passive" /> for passive FTP.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpHandle.CreateDirectory(System.String)">
      <summary>
            Creates the specified directory on the remote FTP server.
            </summary>
      <param name="directory">The directory to create.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpHandle.GetCurrentDirectory">
      <summary>
            Retrieves the current working directory on the remote FTP server.
            </summary>
      <returns>The current working directory on the remote FTP server.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpHandle.DeleteFile(System.String)">
      <summary>
            Deletes the specified file on the remote FTP server.
            </summary>
      <param name="fileName">The file to delete.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpHandle.GetFile(System.String,System.String,System.Boolean,Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags)">
      <summary>
            Downloads the specified remote file from the FTP server, saving it at a local path and filename.
            </summary>
      <param name="remoteFile">The remote file to download.</param>
      <param name="localFile">The local path and filename to which to save the file.</param>
      <param name="failIfExists">Whether to fail if the local file specified by <paramref name="localFile" /> already exists.</param>
      <param name="flags">Additional flags for this action. At least <see cref="F:Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags.Ascii" /> or <see cref="F:Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags.Binary" /> should be specified.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpHandle.PutFile(System.String,System.String,Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags)">
      <summary>
            Uploads the specified local file to the FTP server, saving it at a remote path and filename.
            </summary>
      <param name="localFile">The local file to upload.</param>
      <param name="remoteFile">The remote path and filename to which to save the file.</param>
      <param name="flags">Additional flags for this action. At least <see cref="F:Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags.Ascii" /> or <see cref="F:Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags.Binary" /> should be specified.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpHandle.RemoveDirectory(System.String)">
      <summary>
            Removes the specified directory from the remote FTP server.
            </summary>
      <param name="directory">The directory to remove.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpHandle.RenameFile(System.String,System.String)">
      <summary>
            Renames the specified file on the FTP server.
            </summary>
      <param name="oldName">The old file name.</param>
      <param name="newName">The new file name.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpHandle.SetCurrentDirectory(System.String)">
      <summary>
            Sets the current working directory on the remote FTP server.
            </summary>
      <param name="directory">The new current working directory.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpHandle.FindFiles(System.String,Nito.KitchenSink.WinInet.FtpHandle.FindFilesFlags)">
      <summary>
            Finds matching files on the remote FTP server.
            </summary>
      <param name="search">The search string, which may include wildcards and/or directory information.</param>
      <param name="flags">Additional flags for this action.</param>
      <returns>All files matching the query on the remote FTP server.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpHandle.FindFiles(System.String)">
      <summary>
            Finds matching files on the remote FTP server.
            </summary>
      <param name="search">The search string, which may include wildcards and/or directory information.</param>
      <returns>All files matching the query on the remote FTP server.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpHandle.FindFiles">
      <summary>
            Retrieves all files from the current working directory on the remote FTP server.
            </summary>
      <returns>All files in the current working directory on the remote FTP server.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpHandle.SendCommand(System.String)">
      <summary>
            Sends a command directly to the FTP server.
            </summary>
      <param name="command">The command to send to the FTP server.</param>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.FtpDirectoryEntry">
      <summary>
            An entry in an FTP directory listing.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.FtpDirectoryEntry.AttributeFlags">
      <summary>
            The common values for <see cref="P:Nito.KitchenSink.WinInet.FtpDirectoryEntry.Attributes" />; note that other values than these may be present.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpDirectoryEntry.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.FtpDirectoryEntry.Attributes">
      <summary>
            Gets or sets the basic attributes of the file or subdirectory.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.FtpDirectoryEntry.Size">
      <summary>
            Gets or sets the size of the file.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.FtpDirectoryEntry.Name">
      <summary>
            Gets or sets the name of the file or subdirectory.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.FtpDirectoryEntry.CreationTime">
      <summary>
            Gets or sets the time that the file or subdirectory was created, if known.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.FtpDirectoryEntry.LastAccessTime">
      <summary>
            Gets or sets the time that the file or subdirectory was last accessed, if known.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.FtpDirectoryEntry.LastWriteTime">
      <summary>
            Gets or sets the time that the file or subdirectory was last written, if known.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.FtpDirectoryEntry.IsDirectory">
      <summary>
            Gets a value indicating whether this entry is a subdirectory.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.HackersDelight">
      <summary>
            Helpful methods from the book <a href="http://www.amazon.com/gp/product/0201914654?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0201914654">Hacker's Delight</a>.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.HackersDelight.Reverse(System.UInt32)">
      <summary>
            Reverses the bits in an unsigned integer of data.
            </summary>
      <param name="data">The unsigned integer whose bits are to be reversed.</param>
      <returns>The reversed data.</returns>
    </member>
    <member name="M:Nito.KitchenSink.HackersDelight.Reverse(System.UInt16)">
      <summary>
            Reverses the bits in an unsigned short of data.
            </summary>
      <param name="data">The unsigned short whose bits are to be reversed.</param>
      <returns>The reversed data.</returns>
    </member>
    <member name="M:Nito.KitchenSink.HackersDelight.Reverse(System.Byte)">
      <summary>
            Reverses the bits in a byte of data.
            </summary>
      <param name="data">The byte whose bits are to be reversed.</param>
      <returns>The reversed data.</returns>
    </member>
    <member name="T:Nito.KitchenSink.CRC32">
      <summary>
            A generalized CRC-32 algorithm.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.CRC32.Definition">
      <summary>
            Holds parameters for a CRC-32 algorithm.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC32.Definition.Default">
      <summary>
            Gets a CRC-32 defined by the old IEEE standard; used by Ethernet, zip, PNG, etc. Note that this "default" CRC-32 definition is an older IEEE recommendation and there are better polynomials for new protocols. Known as "CRC-32", "CRC-32/ADCCP", and "PKZIP".
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC32.Definition.BZip2">
      <summary>
            Gets a CRC-32 used by BZIP2. Known as "CRC-32/BZIP2" and "B-CRC-32".
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC32.Definition.Castagnoli">
      <summary>
            Gets a modern CRC-32 defined in RFC 3720. Known as "CRC-32C", "CRC-32/ISCSI", and "CRC-32/CASTAGNOLI".
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC32.Definition.Mpeg2">
      <summary>
            Gets a CRC-32 used by the MPEG-2 standard. Known as "CRC-32/MPEG-2".
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC32.Definition.Posix">
      <summary>
            Gets a CRC-32 used by the POSIX "chksum" command; note that the chksum command-line program appends the file length to the contents unless it is empty. Known as "CRC-32/POSIX" and "CKSUM".
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC32.Definition.Aixm">
      <summary>
            Gets a CRC-32 used in the Aeronautical Information eXchange Model. Known as "CRC-32Q".
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC32.Definition.Xfer">
      <summary>
            Gets a very old CRC-32, appearing in "Numerical Recipes in C". Known as "XFER".
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC32.Definition.TruncatedPolynomial">
      <summary>
            Gets or sets the normal (non-reversed, non-reciprocal) polynomial to use for the CRC calculations.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC32.Definition.Initializer">
      <summary>
            Gets or sets the value to which the remainder is initialized at the beginning of the CRC calculation.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC32.Definition.FinalXorValue">
      <summary>
            Gets or sets the value by which the remainder is XOR'ed at the end of the CRC calculation.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC32.Definition.ReverseDataBytes">
      <summary>
            Gets or sets a value indicating whether incoming data bytes are reversed/reflected.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC32.Definition.ReverseResultBeforeFinalXor">
      <summary>
            Gets or sets a value indicating whether the final remainder is reversed/reflected at the end of the CRC calculation before it is XOR'ed with <see cref="P:Nito.KitchenSink.CRC32.Definition.FinalXorValue" />.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CRC32.NormalLookupTables">
      <summary>
            The lookup tables for non-reversed polynomials.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CRC32.ReversedLookupTables">
      <summary>
            The lookup tables for reversed polynomials.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CRC32.lookupTable">
      <summary>
            A reference to the lookup table.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CRC32.definition">
      <summary>
            The CRC-32 algorithm definition.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CRC32.remainder">
      <summary>
            The current value of the remainder.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.CRC32.#ctor(Nito.KitchenSink.CRC32.Definition,System.UInt32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CRC32" /> class with the specified definition and lookup table.
            </summary>
      <param name="definition">The CRC-32 algorithm definition.</param>
      <param name="lookupTable">The lookup table.</param>
    </member>
    <member name="M:Nito.KitchenSink.CRC32.#ctor(Nito.KitchenSink.CRC32.Definition)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CRC32" /> class with the specified definition.
            </summary>
      <param name="definition">The CRC-32 algorithm definition.</param>
    </member>
    <member name="M:Nito.KitchenSink.CRC32.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CRC32" /> class with the default definition. Note that the "default" CRC-32 definition is an older IEEE recommendation and there are better polynomials for new protocols.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.CRC32.FindOrGenerateLookupTable(Nito.KitchenSink.CRC32.Definition)">
      <summary>
            Searches the known lookup tables for one matching the given CRC-32 definition; if none is found, a new lookup table is generated and added to the known lookup tables.
            </summary>
      <param name="definition">The CRC-32 definition.</param>
      <returns>The lookup table for the given CRC-32 definition.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CRC32.GenerateLookupTable(Nito.KitchenSink.CRC32.Definition)">
      <summary>
            Generates a lookup table for a CRC-32 algorithm definition. Both <see cref="P:Nito.KitchenSink.CRC32.Definition.TruncatedPolynomial" /> and <see cref="P:Nito.KitchenSink.CRC32.Definition.ReverseDataBytes" /> are used in the calculations.
            </summary>
      <param name="definition">The CRC-32 algorithm definition.</param>
      <returns>The lookup table.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CRC32.Initialize">
      <summary>
            Initializes the CRC-32 calculations.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.CRC32.Update(System.Collections.Generic.IList{System.Byte})">
      <summary>
            Updates the hash value by hashing the provided byte buffer. <see cref="M:Nito.KitchenSink.CRC32.Initialize" /> should be called before invoking this method for the first time.
            </summary>
      <param name="buffer">The input byte array to include in the hash calculation.</param>
    </member>
    <member name="M:Nito.KitchenSink.CRC32.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CRC32.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
      <param name="array">The input to compute the hash code for.</param>
      <param name="offset">The offset into the byte array from which to begin using data.</param>
      <param name="count">The number of bytes in the byte array to use as data.</param>
    </member>
    <member name="M:Nito.KitchenSink.CRC32.HashFinal">
      <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CRC32.ReflectedIndex(System.UInt32,System.Byte)">
      <summary>
            Gets the index into the lookup array for a given remainder and data byte. Data byte reversal is taken into account.
            </summary>
      <param name="remainder">The current remainder.</param>
      <param name="data">The data byte.</param>
      <returns>The index into the lookup array.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CRC32.ReflectedShift(System.UInt32)">
      <summary>
            Shifts a byte out of the remainder. This is the high byte or low byte, depending on whether the data bytes are reversed.
            </summary>
      <param name="remainder">The remainder value.</param>
      <returns>The shifted remainder value.</returns>
    </member>
    <member name="P:Nito.KitchenSink.CRC32.Result">
      <summary>
            Gets the result of the CRC-32 algorithm.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.RolloverLogTraceListener">
      <summary>
            Implements a trace listener that writes messages to an on-disk rolling log.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.RolloverLogTraceListener.files">
      <summary>
            The list of archive files currently in the directory, sorted by name (timestamp).
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.RolloverLogTraceListener.currentFile">
      <summary>
            The current log file, "current.txt".
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.RolloverLogTraceListener.current">
      <summary>
            The text writer for the current log file. This is null if the object has been disposed.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.RolloverLogTraceListener.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.RolloverLogTraceListener" /> class, with the parameters passed from the application configuration.
            </summary>
      <param name="initializeData">The parameters from the application configuration file.</param>
    </member>
    <member name="M:Nito.KitchenSink.RolloverLogTraceListener.Write(System.String)">
      <summary>
            Writes a message to the log.
            </summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:Nito.KitchenSink.RolloverLogTraceListener.WriteLine(System.String)">
      <summary>
            Writes a message to the log.
            </summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:Nito.KitchenSink.RolloverLogTraceListener.Flush">
      <summary>
            Flushes the output buffer. Does not cause a rollover.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.RolloverLogTraceListener.Close">
      <summary>
            Closes the output stream so it no longer receives tracing or debugging output.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.RolloverLogTraceListener.Dispose(System.Boolean)">
      <summary>
            Releases the resources owned by this object.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Nito.KitchenSink.RolloverLogTraceListener.TrimArchiveFiles">
      <summary>
            Removes archived log files (oldest first) if there are too many.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.RolloverLogTraceListener.Rollover(System.DateTime)">
      <summary>
            Trims the archived log files if there are too many, and changes the current log file into an archived log file. The current log file must be closed before invoking this method.
            </summary>
      <param name="now">The date/time stamp of when the current log file gets archived.</param>
    </member>
    <member name="M:Nito.KitchenSink.RolloverLogTraceListener.OpenCurrent">
      <summary>
            Creates a new current log file.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.RolloverLogTraceListener.CloseCurrentAndRollover(System.DateTime)">
      <summary>
            Closes the current log file, rolling over if necessary.
            </summary>
      <param name="now">The date/time stamp of when the current log file gets archived.</param>
    </member>
    <member name="P:Nito.KitchenSink.RolloverLogTraceListener.LogDirectory">
      <summary>
            Gets the log directory, containing the current and all archive log files.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.RolloverLogTraceListener.MaxFileSize">
      <summary>
            Gets the maximum size of the current log file.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.RolloverLogTraceListener.MaxFiles">
      <summary>
            Gets the maximum number of archived log files.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.Text.Strings">
      <summary>
            String-related algorithms.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Text.Strings.DamerauLevenshteinDistance(System.String,System.String)">
      <summary>
            Computes the optimal string alignment of the Damerau-Levenshtein edit distance of two strings. This is a fuzzy string matching algorithm that is both powerful and efficient. The strings are compared ordinally.
            </summary>
      <param name="str1">The first string to compare.</param>
      <param name="str2">The second string to compare.</param>
      <returns>The estimated Damerau-Levenshtein edit distance of the two strings.</returns>
    </member>
    <member name="T:Nito.KitchenSink.ExtensibleObjects.IExtensionCollection">
      <summary>
            A collection of extension objects, which are notified when they are added to or removed from this collection.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.ExtensibleObjects.ExtensionCollection">
      <summary>
            A collection of extension objects, which are notified as they are added to and removed from this collection.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.ExtensibleObjects.ExtensionCollection.list">
      <summary>
            The underlying collection of extension objects.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.ExtensibleObjects.ExtensionCollection.owner">
      <summary>
            The owner of this collection of extension objects.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.ExtensibleObjects.ExtensionCollection.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.ExtensibleObjects.ExtensionCollection" /> class with the specified owner.
            </summary>
      <param name="owner">The owner of this collection of extension objects.</param>
    </member>
    <member name="T:Nito.KitchenSink.EnumeratorWrapper`1">
      <summary>
            Provides a wrapper around a source <see cref="T:System.Collections.Generic.IEnumerator`1" />, with a cached <see cref="P:Nito.KitchenSink.EnumeratorWrapper`1.Done" /> value.
            </summary>
      <typeparam name="T">The type of objects being enumerated.</typeparam>
    </member>
    <member name="F:Nito.KitchenSink.EnumeratorWrapper`1.source">
      <summary>
            The source enumerator.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.EnumeratorWrapper`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.EnumeratorWrapper`1" /> class, taking its source enumerator from <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />. <see cref="M:System.Collections.IEnumerator.MoveNext" /> is also called once before returning.
            </summary>
      <param name="source">The source enumerable.</param>
    </member>
    <member name="M:Nito.KitchenSink.EnumeratorWrapper`1.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection. Returns <see cref="P:Nito.KitchenSink.EnumeratorWrapper`1.Done" />.
            </summary>
      <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
    </member>
    <member name="M:Nito.KitchenSink.EnumeratorWrapper`1.Dispose">
      <summary>
            Disposes the wrapped enumerator.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.EnumeratorWrapper`1.Done">
      <summary>
            Gets a value indicating whether the enumerable sequence has completed. If <see cref="P:Nito.KitchenSink.EnumeratorWrapper`1.Done" /> is true, then <see cref="P:Nito.KitchenSink.EnumeratorWrapper`1.Current" /> is undefined.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.EnumeratorWrapper`1.More">
      <summary>
            Gets a value indicating whether the enumerable sequence has completed. If <see cref="P:Nito.KitchenSink.EnumeratorWrapper`1.More" /> is false, then <see cref="P:Nito.KitchenSink.EnumeratorWrapper`1.Current" /> is undefined.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.EnumeratorWrapper`1.Current">
      <summary>
            Gets the element at the current position of the enumerator.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.AsyncOperationExtensions">
      <summary>
            Provides methods useful when dealing with <see cref="T:System.ComponentModel.AsyncOperation" /> instances.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.AsyncOperationExtensions.Post(System.ComponentModel.AsyncOperation,System.Action)">
      <summary>
            Invokes a parameterless delegate using the captured <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
      <param name="asyncOperation">The asynchronous operation that holds the captured <see cref="T:System.Threading.SynchronizationContext" />.</param>
      <param name="method">The parameterless delegate to invoke.</param>
    </member>
    <member name="M:Nito.KitchenSink.AsyncOperationExtensions.PostOperationCompleted(System.ComponentModel.AsyncOperation,System.Action)">
      <summary>
            Invokes a parameterless delegate using the captured <see cref="T:System.Threading.SynchronizationContext" />, and ends the asynchronous operation.
            </summary>
      <param name="asyncOperation">The asynchronous operation that holds the captured <see cref="T:System.Threading.SynchronizationContext" />.</param>
      <param name="method">The parameterless delegate to invoke.</param>
    </member>
    <member name="M:Nito.KitchenSink.AsyncOperationExtensions.Post(System.Threading.SynchronizationContext,System.Action)">
      <summary>
            Invokes a parameterless delegate.
            </summary>
      <param name="synchronizationContext">The synchronization context on which to post the delegate.</param>
      <param name="method">The parameterless delegate to invoke.</param>
    </member>
    <member name="M:Nito.KitchenSink.AsyncOperationExtensions.Send(System.Threading.SynchronizationContext,System.Action)">
      <summary>
            Invokes a parameterless delegate.
            </summary>
      <param name="synchronizationContext">The synchronization context on which to post the delegate.</param>
      <param name="method">The parameterless delegate to invoke.</param>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.UnsafeNativeMethods">
      <summary>
            Native methods that require a security check for use.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.UnsafeNativeMethods.InternetStatusCallback">
      <summary>
            The delegate type of the internet status callback wrapper, passed to <c>InternetSetStatusCallback</c>.
            </summary>
      <param name="hInternet">The internet handle. This parameter is ignored.</param>
      <param name="dwContext">The context passed to the internet operation. This parameter is ignored.</param>
      <param name="dwInternetStatus">The type of notification.</param>
      <param name="lpvStatusInformation">Extra data associated with the notification.</param>
      <param name="dwStatusInformationLength">The length of the extra data in <paramref name="lpvStatusInformation" />.</param>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpWin32FindData">
      <summary>
            Marshal structure for FTP find file details. Almost identical to <c>WIN32_FILE_DATA</c>, except that the FILETIME fields are local time.
            </summary>
      <remarks>
        <para>Normally, the Pack is correct at 8; however, for ease of use, we've redefined a couple of uint+uint pairs to be a single long,
            so we need to adjust the packing so that padding isn't inserted after "Attributes"</para>
      </remarks>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpWin32FindData.ToFtpDirectoryEntry">
      <summary>
            Converts from <see cref="T:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpWin32FindData" /> to <see cref="T:Nito.KitchenSink.WinInet.FtpDirectoryEntry" />.
            </summary>
      <returns>An <see cref="T:Nito.KitchenSink.WinInet.FtpDirectoryEntry" /> instance</returns>
    </member>
    <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.MAX_PATH">
      <summary>
            Maximum path length.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.ERROR_INSUFFICIENT_BUFFER">
      <summary>
            Win32 error code for an insufficient buffer.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.ERROR_INTERNET_EXTENDED_ERROR">
      <summary>
            WinInet error code indicating that the server has sent its own error message.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.ERROR_NO_MORE_FILES">
      <summary>
            Win32 error code indicating that there are no more files.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.INTERNET_OPTION_CONNECT_TIMEOUT">
      <summary>
            Gets or sets a uint that contains the timeout value (in milliseconds) to use for connection requests.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.INTERNET_OPTION_SEND_TIMEOUT">
      <summary>
            Gets or sets a uint that contains the timeout value (in milliseconds) to send a request.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.INTERNET_OPTION_RECEIVE_TIMEOUT">
      <summary>
            Gets or sets a uint that contains the timeout value (in milliseconds) to receive a response to a request.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.WinInet.UnsafeNativeMethods.INTERNET_INVALID_STATUS_CALLBACK">
      <summary>
            An invalid internet status callback.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.InternetOpen(System.String,Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType,System.String,System.String,Nito.KitchenSink.WinInet.InternetOpenHandle.Flags)">
      <summary>
            Invokes <c>InternetOpen</c>, handling error conditions.
            </summary>
      <param name="agent">The user agent or process using WinInet. This is sent as the HTTP user agent and WinInet logs.</param>
      <param name="accessType">The type of the proxy used, if any.</param>
      <param name="proxyName">The name of the proxy server if <paramref name="accessType" /> is <see cref="F:Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType.Proxy" />.</param>
      <param name="proxyBypass">The list of host names or IP addresses that are not routed through the proxy when <paramref name="accessType" /> is <see cref="F:Nito.KitchenSink.WinInet.InternetOpenHandle.AccessType.Proxy" />. This list may contain wildcards or be equal to the string <c>"&lt;local&gt;"</c>, but should not be an empty string.</param>
      <param name="flags">The flags to use for this internet handle.</param>
      <returns>The opened internet handle.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.InternetConnect(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String,System.UInt16,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Service,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
      <summary>
            Invokes <c>InternetConnect</c>, handling error conditions.
            </summary>
      <param name="internet">The parent opened internet handle.</param>
      <param name="serverName">Name of the server to which to connect.</param>
      <param name="serverPort">The server port to which to connect.</param>
      <param name="username">The username to use for authentication.</param>
      <param name="password">The password to use for authentication.</param>
      <param name="service">The service type to which to connect.</param>
      <param name="flags">The connection flags.</param>
      <returns>The connected internet handle.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpCreateDirectory(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String)">
      <summary>
            Invokes <c>FtpCreateDirectory</c>, handling error conditions.
            </summary>
      <param name="connect">The connected internet handle.</param>
      <param name="directory">The directory to create.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpGetCurrentDirectory(Nito.KitchenSink.WinInet.SafeInternetHandle)">
      <summary>
            Invokes <c>FtpGetCurrentDirectory</c>, handling error conditions.
            </summary>
      <param name="connect">The connected internet handle.</param>
      <returns>The current working directory on the remote FTP server.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpDeleteFile(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String)">
      <summary>
            Invokes <c>FtpDeleteFile</c>, handling error conditions.
            </summary>
      <param name="connect">The connected internet handle.</param>
      <param name="fileName">The file to delete.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpGetFile(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String,System.String,System.Boolean,Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags)">
      <summary>
            Invokes <c>FtpGetFile</c>, handling error conditions.
            </summary>
      <param name="connect">The connected internet handle.</param>
      <param name="remoteFile">The remote file to download.</param>
      <param name="localFile">The local path and filename to which to save the file.</param>
      <param name="failIfExists">Whether to fail if the local file specified by <paramref name="localFile" /> already exists.</param>
      <param name="flags">Additional flags for this action. At least <see cref="F:Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags.Ascii" /> or <see cref="F:Nito.KitchenSink.WinInet.FtpHandle.GetFileFlags.Binary" /> should be specified.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpPutFile(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String,System.String,Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags)">
      <summary>
            Invokes <c>FtpPutFile</c>, handling error conditions.
            </summary>
      <param name="connect">The connected internet handle.</param>
      <param name="localFile">The local file to upload.</param>
      <param name="remoteFile">The remote path and filename to which to save the file.</param>
      <param name="flags">Additional flags for this action. At least <see cref="F:Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags.Ascii" /> or <see cref="F:Nito.KitchenSink.WinInet.FtpHandle.PutFileFlags.Binary" /> should be specified.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpRemoveDirectory(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String)">
      <summary>
            Invokes <c>FtpRemoveDirectory</c>, handling error conditions.
            </summary>
      <param name="connect">The connected internet handle.</param>
      <param name="directory">The directory to remove.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpRenameFile(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String,System.String)">
      <summary>
            Invokes <c>FtpRenameFile</c>, handling error conditions.
            </summary>
      <param name="connect">The connected internet handle.</param>
      <param name="oldName">The old file name.</param>
      <param name="newName">The new file name.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpSetCurrentDirectory(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String)">
      <summary>
            Invokes <c>FtpRenameFile</c>, handling error conditions.
            </summary>
      <param name="connect">The connected internet handle.</param>
      <param name="directory">The new current working directory.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.InternetSetStatusCallback(Nito.KitchenSink.WinInet.SafeInternetHandle,Nito.KitchenSink.WinInet.InternetHandle.InternetCallback)">
      <summary>
            Invokes <c>InternetSetStatusCallback</c>, handling error conditions. Returns the wrapper for the delegate, which is actually passed to <c>InternetSetStatusCallback</c>.
            </summary>
      <param name="internet">The internet handle.</param>
      <param name="callback">The internet status callback delegate, used to report progress.</param>
      <returns>The wrapper created for <paramref name="callback" />, which is actually passed to the unmanaged <c>InternetSetStatusCallback</c> function.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpFindFirstFile(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String,Nito.KitchenSink.WinInet.FtpHandle.FindFilesFlags,Nito.KitchenSink.WinInet.FtpDirectoryEntry@,Nito.KitchenSink.WinInet.SafeInternetHandle@)">
      <summary>
            Invokes <c>FtpFindFirstFile</c>, handling error conditions. Returns <c>false</c> if there are no matching files.
            </summary>
      <param name="connect">The internet connection handle.</param>
      <param name="search">The search string, which may include wildcards and/or directory information.</param>
      <param name="flags">Additional flags for this action.</param>
      <param name="first">On return, the details for the first matching remote file/directory.</param>
      <param name="find">On return, the find handle.</param>
      <returns>
        <c>true</c> if there is at least one matching file; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpFindNextFile(Nito.KitchenSink.WinInet.SafeInternetHandle,Nito.KitchenSink.WinInet.FtpDirectoryEntry@)">
      <summary>
            Invokes <c>FtpFindFirstFile</c>, handling error conditions. Returns <c>false</c> if there are no more matching files.
            </summary>
      <param name="find">The find handle.</param>
      <param name="next">On return, the details for the first matching remote file/directory.</param>
      <returns>
        <c>true</c> if another file was found; <c>false</c> if there are no more matching files.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.FtpCommand(Nito.KitchenSink.WinInet.SafeInternetHandle,System.String)">
      <summary>
            Sends a command directly to the FTP server.
            </summary>
      <param name="connect">The internet connection handle.</param>
      <param name="command">The command to send to the FTP server.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.SetOption(Nito.KitchenSink.WinInet.SafeInternetHandle,System.UInt32,System.Int32)">
      <summary>
            Sets an option on the specified internet handle to the specified <c>int</c> value.
            </summary>
      <param name="internet">The internet handle.</param>
      <param name="option">The option to set.</param>
      <param name="value">The value to set the option to.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.CreateInternetStatusCallback(Nito.KitchenSink.WinInet.InternetHandle.InternetCallback)">
      <summary>
            Creates a wrapper for the provided internet status callback delegate.
            </summary>
      <param name="callback">The user-provided internet status callback delegate.</param>
      <returns>The wrapped internet status callback delegate.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.UnsafeNativeMethods.GetLastInternetException">
      <summary>
            Constructs an <see cref="T:System.Exception" /> instance for the last Win32 error, using server-reported error message if possible; otherwise WinInet.dll error messages; otherwise system error messages.
            </summary>
      <returns>An <see cref="T:System.Exception" /> instance for the last Win32 error.</returns>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.SafeNativeMethods">
      <summary>
            Native methods that are safe for any caller.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.SafeNativeMethods.FtpLocalFileTimeToFileTime(System.Int64)">
      <summary>
            Converts a local FILETIME to a Utc FILETIME.
            </summary>
      <param name="localFileTime">The local FILETIME to convert.</param>
      <returns>Utc FILETIME.</returns>
    </member>
    <member name="T:Nito.KitchenSink.FileSystemPathExtensions">
      <summary>
            Provides extensions to expose <see cref="T:Nito.KitchenSink.FileSystemPath" /> with other system types.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.FileSystemPathExtensions.AsFileSystemPath(System.String)">
      <summary>
            Treats a string as a file system path.
            </summary>
      <param name="source">The source path.</param>
      <returns>The file system path.</returns>
    </member>
    <member name="M:Nito.KitchenSink.FileSystemPathExtensions.AsFileSystemPath(System.Environment.SpecialFolder)">
      <summary>
            Treats a special folder as a file system path. The resulting path is empty if the special folder does not exist or is virtual.
            </summary>
      <param name="specialFolder">The special folder.</param>
      <returns>The file system path of the special folder.</returns>
    </member>
    <member name="T:Nito.KitchenSink.SourceTextReader`1">
      <summary>
            A base class for a <see cref="T:System.IO.TextReader" /> that wraps another <see cref="T:System.IO.TextReader" />. This class does not perform any buffering, but derived classes may.
            </summary>
      <typeparam name="T">The type of <see cref="T:System.IO.TextReader" /> being wrapped.</typeparam>
    </member>
    <member name="F:Nito.KitchenSink.SourceTextReader`1.source">
      <summary>
            The source <see cref="T:System.IO.TextReader" />.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.SourceTextReader`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.SourceTextReader`1" /> class.
            </summary>
      <param name="source">The source <see cref="T:System.IO.TextReader" />.</param>
    </member>
    <member name="M:Nito.KitchenSink.SourceTextReader`1.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.TextReader" /> and optionally releases the managed resources (including the source <see cref="T:System.IO.TextReader" />).
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Nito.KitchenSink.SourceTextReader`1.Peek">
      <summary>
            Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the input stream.
            </summary>
      <returns>An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:Nito.KitchenSink.SourceTextReader`1.Read">
      <summary>
            Reads the next character from the input stream and advances the character position by one character.
            </summary>
      <returns>The next character from the input stream, or -1 if no more characters are available.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="P:Nito.KitchenSink.SourceTextReader`1.BaseReader">
      <summary>
            Gets the underlying <see cref="T:System.IO.TextReader" />.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.PutbackBufferTextReader`1">
      <summary>
            A wrapper around a source <see cref="T:System.IO.TextReader" />, providing a "putback buffer", where characters can be pushed back to the <see cref="T:System.IO.TextReader" />. This class does perform buffering.
            </summary>
      <typeparam name="T">The type of <see cref="T:System.IO.TextReader" /> being wrapped.</typeparam>
    </member>
    <member name="F:Nito.KitchenSink.PutbackBufferTextReader`1.putbackBuffer">
      <summary>
            The buffer of characters that have been put back and not yet read again.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.PutbackBufferTextReader`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.PutbackBufferTextReader`1" /> class wrapping the specified <see cref="T:System.IO.TextReader" />.
            </summary>
      <param name="source">The source <see cref="T:System.IO.TextReader" /> to wrap.</param>
    </member>
    <member name="M:Nito.KitchenSink.PutbackBufferTextReader`1.Putback(System.Char)">
      <summary>
            Pushes the specified character back onto this <see cref="T:System.IO.TextReader" />. The character pushed back should be the most recently read character that has not already been pushed back (i.e., characters should only be pushed back if they were read).
            </summary>
      <param name="ch">The character to push back.</param>
    </member>
    <member name="M:Nito.KitchenSink.PutbackBufferTextReader`1.Peek">
      <summary>
            Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the input stream.
            </summary>
      <returns>An integer representing the next character to be read, or -1 if no more characters are available.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:Nito.KitchenSink.PutbackBufferTextReader`1.Read">
      <summary>
            Reads the next character from the input stream and advances the character position by one character.
            </summary>
      <returns>The next character from the input stream, or -1 if no more characters are available.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="P:Nito.KitchenSink.PutbackBufferTextReader`1.BufferCount">
      <summary>
            Gets the putback buffer count.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.ExpandoObjectExtensions">
      <summary>
            Extension methods for the <see cref="T:System.Dynamic.ExpandoObject" /> class.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.ExpandoObjectExtensions.AddProperties``1(System.Dynamic.ExpandoObject,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Adds a sequence of values as properties on the <see cref="T:System.Dynamic.ExpandoObject" />. Any existing properties with the same name are overwritten. Returns the same <see cref="T:System.Dynamic.ExpandoObject" /> for chaining.
            </summary>
      <typeparam name="T">The type of values to add.</typeparam>
      <param name="this">The object to which to add the properties.</param>
      <param name="values">The values to add as properties.</param>
      <param name="names">The names to use for the properties. This may be <c>null</c>. If this parameter is <c>null</c> or does not contain enough names for the values, the property name will be of the form "Property<i>n</i>", where <i>n</i> is the index in the value sequence.</param>
      <returns>The <see cref="T:System.Dynamic.ExpandoObject" /><paramref name="this" />.</returns>
    </member>
    <member name="T:Nito.KitchenSink.AdoExtensions">
      <summary>
            Provides extension methods for ADO.NET classes.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.AdoExtensions.CreateCommand(System.Data.Common.DbConnection,System.String)">
      <summary>
            Creates a new command associated with this connection, with the specified command text.
            </summary>
      <param name="this">The database connection.</param>
      <param name="commandText">The command text for this command.</param>
      <returns>The new command.</returns>
    </member>
    <member name="M:Nito.KitchenSink.AdoExtensions.ExecuteCommand(System.Data.Common.DbConnection,System.String,System.Object[])">
      <summary>
            Executes a command against the database and returns its scalar result, or <c>null</c> if there was no result.
            </summary>
      <param name="this">The connection executing the command.</param>
      <param name="commandText">The command to execute.</param>
      <param name="parameters">Any parameters to pass to the command. <c>null</c> values are replaced with <c>DBNull.Value</c>.</param>
      <returns>The scalar result of the command, or <c>null</c> if there was no result.</returns>
    </member>
    <member name="M:Nito.KitchenSink.AdoExtensions.ExecuteCommand``1(System.Data.Common.DbConnection,System.String,System.Object[])">
      <summary>
            Executes a command against the database and returns its scalar result, or <c>(T)null</c> if there was no result.
            </summary>
      <typeparam name="T">The type of the result.</typeparam>
      <param name="this">The connection executing the command.</param>
      <param name="commandText">The command to execute.</param>
      <param name="commandParameters">Parameters to pass to the command. <c>null</c> values are replaced with <c>DBNull.Value</c>.</param>
      <returns>The scalar result of the command, or <c>(T)null</c> if there was no result.</returns>
    </member>
    <member name="M:Nito.KitchenSink.AdoExtensions.CreateParameterValue``1(System.Data.Common.DbCommand,``0)">
      <summary>
            Creates a new, unnamed command parameter with the specified value.
            </summary>
      <param name="this">The command receiving the parameter.</param>
      <param name="value">The value of the parameter. If <c>null</c>, then the parameter is given a value of <c>DBNull.Value</c>.</param>
      <returns>The new command parameter</returns>
    </member>
    <member name="M:Nito.KitchenSink.AdoExtensions.AddRange(System.Data.Common.DbParameterCollection,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
      <summary>
            Adds a sequence of parameters to a parameter collection.
            </summary>
      <param name="this">The parameter collection to which to add the parameters.</param>
      <param name="parameters">The parameters to add.</param>
    </member>
    <member name="M:Nito.KitchenSink.AdoExtensions.AddParameterValues(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
            Adds a sequence of values to the parameter collection of a command.
            </summary>
      <param name="this">The command containing the parameter collection to which to add the parameters.</param>
      <param name="parameterValues">The parameter values to add. Any <c>null</c> entries are given a value of <c>DBNull.Value</c>.</param>
    </member>
    <member name="M:Nito.KitchenSink.AdoExtensions.AddParameterValue``1(System.Data.Common.DbCommand,``0)">
      <summary>
            Adds a single parameter value to the parameter collection of a command.
            </summary>
      <param name="this">The command containing the parameter collection to which to add the parameter.</param>
      <param name="value">The value of the parameter. If <c>null</c>, then the parameter is given a value of <c>DBNull.Value</c>.</param>
    </member>
    <member name="T:Nito.KitchenSink.NotifyPropertyChangedBase`1">
      <summary>
            A base class for classes that need to implement <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
      <typeparam name="TObject">The type of the derived class.</typeparam>
    </member>
    <member name="F:Nito.KitchenSink.NotifyPropertyChangedBase`1.propertyChanged">
      <summary>
            The backing delegate for <see cref="E:Nito.KitchenSink.NotifyPropertyChangedBase`1.PropertyChanged" />.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.NotifyPropertyChangedBase`1.OnItemsPropertyChanged">
      <summary>
            Raises <see cref="E:Nito.KitchenSink.NotifyPropertyChangedBase`1.PropertyChanged" /> for the Items[] property.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.NotifyPropertyChangedBase`1.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
            Raises <see cref="E:Nito.KitchenSink.NotifyPropertyChangedBase`1.PropertyChanged" /> for the given property.
            </summary>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <param name="expression">The lambda expression identifying the property that changed.</param>
    </member>
    <member name="M:Nito.KitchenSink.NotifyPropertyChangedBase`1.OnPropertyChanged">
      <summary>
            Raises <see cref="E:Nito.KitchenSink.NotifyPropertyChangedBase`1.PropertyChanged" /> for all properties.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.SimplePropertyPath">
      <summary>
            Provides a way to monitor changes along a property path.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep">
      <summary>
            Represents a single step in a property path subscription: a single property on a single object.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep" /> class with the given property name.
            </summary>
      <param name="name">The name of the property used for evaluation.</param>
    </member>
    <member name="M:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Subscribe(System.Action)">
      <summary>
            Subscribes to <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object" /> if it is not null.
            </summary>
      <param name="action">The action to subscribe.</param>
    </member>
    <member name="M:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Unsubscribe">
      <summary>
            Unsubscribes from <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object" /> if it is not null.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Evaluate">
      <summary>
            Returns the value of the property named <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Name" /> for <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object" />. This cannot be called if <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object" /> is null.
            </summary>
      <returns>The result of evaluating this subscription step.</returns>
    </member>
    <member name="M:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Overwrite(System.Object)">
      <summary>
            Writes the value of the property named <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Name" /> for <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object" />. This cannot be called if <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object" /> is null.
            </summary>
      <param name="value">The new value of the property.</param>
    </member>
    <member name="M:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object">
      <summary>
            Gets or sets the actual object at this subscription step. This may be null.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.IsSubscribed">
      <summary>
            Gets a value indicating whether this subscription step is subscribed.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.NotifyPropertyChangedObject">
      <summary>
            Gets the object used for subscriptions. This is null if <see cref="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Object" /> does not support <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.SimplePropertyPath.SubscriptionStep.Name">
      <summary>
            Gets the name of the property subscribed to.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.SimplePropertyPath.trace">
      <summary>
            The trace source for binding errors (this is the same one used by WPF's bindings).
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.SimplePropertyPath.root">
      <summary>
            The actual root object for this property path.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.SimplePropertyPath.path">
      <summary>
            The path to evaluate.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.SimplePropertyPath.value">
      <summary>
            The result of evaluating <see cref="F:Nito.KitchenSink.SimplePropertyPath.path" /> on <see cref="F:Nito.KitchenSink.SimplePropertyPath.root" />.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.SimplePropertyPath.subscriptions">
      <summary>
            The list of subscription steps (individual <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> subscriptions) used to keep <see cref="P:Nito.KitchenSink.SimplePropertyPath.Value" /> up-to-date.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.SimplePropertyPath.RefreshValue">
      <summary>
            Reevaluates <see cref="P:Nito.KitchenSink.SimplePropertyPath.Path" /> on <see cref="P:Nito.KitchenSink.SimplePropertyPath.Root" />, updating <see cref="P:Nito.KitchenSink.SimplePropertyPath.Value" /> if necessary. May invoke <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.
            </summary>
      <remarks>
        <para>Normally, this function will not be needed. It is only needed if an object evaluated by <see cref="P:Nito.KitchenSink.SimplePropertyPath.Path" /> does not support <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.</para>
      </remarks>
    </member>
    <member name="M:Nito.KitchenSink.SimplePropertyPath.Dispose">
      <summary>
            Unsubscribes from all objects in the property path.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.SimplePropertyPath.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="M:Nito.KitchenSink.SimplePropertyPath.UpdateValue(System.Object)">
      <summary>
            Updates the evaluated value and raises <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> if necessary.
            </summary>
      <param name="newValue">The newly-evaluated value.</param>
    </member>
    <member name="M:Nito.KitchenSink.SimplePropertyPath.Dismantle">
      <summary>
            Completely tear down all subscription steps.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.SimplePropertyPath.Construct">
      <summary>
            Builds all subscription steps, if possible.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.SimplePropertyPath.Dismantle(System.Int32)">
      <summary>
            Unsubscribes from each subscription step starting at <paramref name="index" />.
            </summary>
      <param name="index">The index at which to start dismantling the subscriptions.</param>
    </member>
    <member name="M:Nito.KitchenSink.SimplePropertyPath.Construct(System.Int32,System.Object)">
      <summary>
            Evaluates and subscribes to (if possible) each subscription step starting at <paramref name="index" />.
            </summary>
      <param name="index">The index at which to start evaluating and subscribing.</param>
      <param name="root">The context object for the subscription step at <paramref name="index" />.</param>
    </member>
    <member name="P:Nito.KitchenSink.SimplePropertyPath.Root">
      <summary>
            Gets or sets the root object for this property path.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.SimplePropertyPath.Path">
      <summary>
            Gets or sets the property path to evaluate.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.SimplePropertyPath.Value">
      <summary>
            Gets or sets the result of <see cref="P:Nito.KitchenSink.SimplePropertyPath.Path" /> evaluated on <see cref="P:Nito.KitchenSink.SimplePropertyPath.Root" />.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.ReferenceCountedDisposable`1">
      <summary>
            Provides a reference count for a wrapped disposable object.
            </summary>
      <typeparam name="T">The type of object to wrap.</typeparam>
    </member>
    <member name="T:Nito.KitchenSink.ReferenceCountedDisposable`1.Reference">
      <summary>
            A reference-counted wrapper around a disposable object.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.ReferenceCountedDisposable`1.Reference.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="P:Nito.KitchenSink.ReferenceCountedDisposable`1.Reference.Value">
      <summary>
            Gets the underlying disposable object.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.ReferenceCountedDisposable`1.disposable">
      <summary>
            The underlying reference counted disposable.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.ReferenceCountedDisposable`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.ReferenceCountedDisposable`1" /> class, wrapping the specified disposable object.
            </summary>
      <param name="value">The disposable object to wrap.</param>
    </member>
    <member name="M:Nito.KitchenSink.ReferenceCountedDisposable`1.AddReference">
      <summary>
            Adds a reference count to this wrapper.
            </summary>
      <returns>A reference-counted wrapper around the same disposable object.</returns>
    </member>
    <member name="M:Nito.KitchenSink.ReferenceCountedDisposable`1.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="P:Nito.KitchenSink.ReferenceCountedDisposable`1.Value">
      <summary>
            Gets the underlying disposable object.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.LinkedListExtensions">
      <summary>
            Extension methods for <see cref="T:System.Collections.Generic.LinkedList`1" />.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.LinkedListExtensions.Nodes``1(System.Collections.Generic.LinkedList{``0})">
      <summary>
            The nodes in this linked list, as a sequence. The nodes enumerated by this sequence are safe to pass to <see cref="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})" /> without disturbing the sequence iteration.
            </summary>
      <typeparam name="T">The type of elements contained in the linked list.</typeparam>
      <param name="list">The linked list.</param>
      <returns>A sequence containing each node in this linked list.</returns>
    </member>
    <member name="T:Nito.KitchenSink.EqualityComparer">
      <summary>
            Provides the <see cref="P:Nito.KitchenSink.EqualityComparer.Default" /> property, which is a default implementation of <see cref="T:System.Collections.IEqualityComparer" />.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.EqualityComparer.DefaultEqualityComparer">
      <summary>
            The default implementation of <see cref="T:System.Collections.IEqualityComparer" />.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.EqualityComparer.DefaultEqualityComparer.Equals(System.Object,System.Object)">
      <summary>
            Compares two objects for equality.
            </summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <returns>Whether the two objects are equal.</returns>
    </member>
    <member name="M:Nito.KitchenSink.EqualityComparer.DefaultEqualityComparer.GetHashCode(System.Object)">
      <summary>
            Gets the hash code for an object.
            </summary>
      <param name="obj">The object to hash.</param>
      <returns>The hash code for the object.</returns>
    </member>
    <member name="F:Nito.KitchenSink.EqualityComparer.valueDefault">
      <summary>
            An instance of <see cref="T:Nito.KitchenSink.EqualityComparer.DefaultEqualityComparer" />.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.EqualityComparer.referenceDefault">
      <summary>
            An instance of <c>ReferenceEqualityComparer</c>.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.EqualityComparer.Default">
      <summary>
            Gets the default implementation of <see cref="T:System.Collections.IEqualityComparer" />.
            </summary>
      <remarks>
        <para>The default implementation uses <see cref="M:System.Object.Equals(System.Object,System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> to implement <see cref="T:System.Collections.IEqualityComparer" />.</para>
      </remarks>
    </member>
    <member name="P:Nito.KitchenSink.EqualityComparer.ReferenceDefault">
      <summary>
            Gets an implementation of <see cref="T:System.Collections.IEqualityComparer" /> that always compares by object reference equality.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.AnonymousComparer`1">
      <summary>
            An object that implements <see cref="T:System.Collections.Generic.IComparer`1" /> using a delegate.
            </summary>
      <typeparam name="T">The type of items to compare.</typeparam>
    </member>
    <member name="P:Nito.KitchenSink.AnonymousComparer`1.Compare">
      <summary>
            Gets or sets the Compare delegate, which compares two objects and returns a value less than 0 if its first argument is less than its second argument, 0 if its two arguments are equal, or greater than 0 if its first argument is greater than its second argument.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.FileSystemPath">
      <summary>
            A string that is a file system path.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.FileSystemPath.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.FileSystemPath" /> class with the specified actual path string.
            </summary>
      <param name="path">The actual path string. May not be <c>null</c>.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <c>null</c>.</exception>
    </member>
    <member name="M:Nito.KitchenSink.FileSystemPath.op_Implicit(Nito.KitchenSink.FileSystemPath)~System.String">
      <summary>
            Performs an implicit conversion from <see cref="T:Nito.KitchenSink.FileSystemPath" /> to <see cref="T:System.String" />.
            </summary>
      <param name="source">The source path.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Nito.KitchenSink.FileSystemPath.op_Implicit(System.String)~Nito.KitchenSink.FileSystemPath">
      <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Nito.KitchenSink.FileSystemPath" />.
            </summary>
      <param name="source">The source path.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Nito.KitchenSink.FileSystemPath.ChangeExtension(System.String)">
      <summary>
            Changes the extension of the file name portion of this path. Returns an empty string if this path does not contain a file name portion.
            </summary>
      <param name="extension">The new extension, with or without the ".". May be <c>null</c> to remove an existing extension.</param>
      <returns>A path with a changed extension.</returns>
    </member>
    <member name="M:Nito.KitchenSink.FileSystemPath.Combine(Nito.KitchenSink.FileSystemPath[])">
      <summary>
            Combines two or more paths. Absolute paths remove previous path information.
            </summary>
      <param name="others">The other paths to combine with this one.</param>
      <returns>The combined path.</returns>
    </member>
    <member name="M:Nito.KitchenSink.FileSystemPath.ToAbsolute">
      <summary>
            Converts this path into an absolute path, using the current directory if necessary. This path may not be an empty path.
            </summary>
      <returns>An absolute path.</returns>
    </member>
    <member name="M:Nito.KitchenSink.FileSystemPath.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="P:Nito.KitchenSink.FileSystemPath.RandomFileName">
      <summary>
            Gets random name that can be used as a folder or file name.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.FileSystemPath.TempFile">
      <summary>
            Gets the path of a temporary file that has been created.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.FileSystemPath.TempPath">
      <summary>
            Gets the path of the temporary directory.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.FileSystemPath.Path">
      <summary>
            Gets the actual path string. This is never <c>null</c>, but may be empty.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.FileSystemPath.Root">
      <summary>
            Gets the root portion of this path. Returns an empty path if this path does not contain a root portion.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.FileSystemPath.Directory">
      <summary>
            Gets the directory portion of this path. Returns an empty path if this path does not contain a directory portion.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.FileSystemPath.FileName">
      <summary>
            Gets the file name portion of this path. Returns an empty path if this path does not contain a file name portion.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.FileSystemPath.FileNameWithoutExtension">
      <summary>
            Gets the file name portion of this path, stripping the extension. Returns an empty path if this path does not contain a file name portion.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.FileSystemPath.Extension">
      <summary>
            Gets the extension of the file name portion of this path, including the ".". Returns an empty string if this path does not contain a file name portion or the file name does not have an extension.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.FileSystemPath.HasExtension">
      <summary>
            Gets a value indicating whether this path has an extension.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.FileSystemPath.IsAbsolute">
      <summary>
            Gets a value indicating whether this path is absolute.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.TaskExtensions">
      <summary>
            Extension methods for the <see cref="T:System.Threading.Tasks.Task" /> class, and task-related functionality.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.TaskExtensions.Async``1(System.Func{``0},System.Int32,System.Threading.CancellationToken)">
      <summary>
            Returns a delegate that invokes the original delegate asynchronously (on a ThreadPool thread), applying a timeout and supporting cancellation. If timeout or cancellation occurs, the delegate runs to completion but its results and any exceptions it raises are ignored.
            </summary>
      <typeparam name="TResult">The type of the result of the delegate.</typeparam>
      <param name="function">The delegate to invoke asynchronously.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> to wait indefinitely.</param>
      <param name="cancellationToken">The cancellation token to observe while waiting.</param>
      <returns>A delegate that invokes the original delegate asynchronously with a timeout and supporting cancellation.</returns>
    </member>
    <member name="M:Nito.KitchenSink.TaskExtensions.WaitOne(System.Threading.WaitHandle,System.Threading.CancellationToken)">
      <summary>
            Waits for a handle to be signalled, allowing cancellation.
            </summary>
      <param name="waitHandle">The wait handle to observe.</param>
      <param name="cancellationToken">The cancellation token.</param>
      <exception cref="T:System.OperationCanceledException">The cancellation token was signalled before the operation completed.</exception>
    </member>
    <member name="M:Nito.KitchenSink.TaskExtensions.WaitOne(System.Threading.WaitHandle,System.Int32,System.Threading.CancellationToken)">
      <summary>
            Waits for a handle to be signalled for a specified time, allowing cancellation. Returns <c>true</c> if the handle was signalled, and <c>false</c> if there was a timeout.
            </summary>
      <param name="waitHandle">The wait handle to observe.</param>
      <param name="millisecondsTimeout">The amount of time to wait for the handle to be signalled, in milliseconds; or <see cref="F:System.Threading.Timeout.Infinite" /> for an infinite wait.</param>
      <param name="cancellationToken">The cancellation token.</param>
      <exception cref="T:System.OperationCanceledException">The cancellation token was signalled before the operation completed.</exception>
      <returns>Returns <c>true</c> if the handle was signalled, and <c>false</c> if there was a timeout.</returns>
    </member>
    <member name="M:Nito.KitchenSink.TaskExtensions.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``0})">
      <summary>
            Tries to set the task completion based on a completed source task.
            </summary>
      <typeparam name="TResult">The type of the result of the source task and task completion.</typeparam>
      <param name="taskCompletionSource">The task completion source.</param>
      <param name="task">The completed task.</param>
      <returns>
        <c>true</c> if the task completion was set correctly; <c>false</c> if the task completion had already completed.</returns>
    </member>
    <member name="M:Nito.KitchenSink.TaskExtensions.TrySetFromAsyncCompletedEventArgs``2(System.Threading.Tasks.TaskCompletionSource{``0},``1,System.Func{``1,``0})">
      <summary>
            Tries to set the task completion based on a completed <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> or derived class.
            </summary>
      <typeparam name="TTaskResult">The result type of this task completion.</typeparam>
      <typeparam name="TAsyncArgs">The type derived from <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> which is used to complete the task completion.</typeparam>
      <param name="taskCompletionSource">The task completion source.</param>
      <param name="args">The results of the completed asynchronous operation.</param>
      <param name="transform">The delegate that extracts the task result value from the asynchronous event completion arguments.</param>
      <returns>
        <c>true</c> if the task completion was set correctly; <c>false</c> if the task completion had already been completed.</returns>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.InternetException">
      <summary>
            An error as reported by a remote server.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetException.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.InternetException" /> class with the specified attributes.
            </summary>
      <param name="code">The error code, as reported by the remote server.</param>
      <param name="message">The message, as reported by the remote server.</param>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetException.Code">
      <summary>
            Gets the error code, as reported by the remote server.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.EnumExtensions">
      <summary>
            Provides useful extensions for enumerations.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.EnumExtensions.Contains``1(System.Enum,``0)">
      <summary>
            Determines if a bit flag or set of bit flags are set in an enumeration value.
            </summary>
      <typeparam name="T">The type of enumeration.</typeparam>
      <param name="value">The value to test for the bit flag(s).</param>
      <param name="flag">The flag(s) to test for.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> contains the bit flags defined in <paramref name="flag" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nito.KitchenSink.EnumExtensions.Add``1(System.Enum,``0)">
      <summary>
            Combines an enumeration value with a bit flag or set of bit flags and returns the new value.
            </summary>
      <typeparam name="T">The type of enumeration.</typeparam>
      <param name="value">The value to combine with the bit flag(s).</param>
      <param name="flag">The flag(s) to add to <paramref name="value" />.</param>
      <returns>
        <paramref name="value" /> combined with <paramref name="flag" />.</returns>
    </member>
    <member name="M:Nito.KitchenSink.EnumExtensions.Remove``1(System.Enum,``0)">
      <summary>
            Removes a bit flag of set of bit flags from an enumeration value and returns the new value.
            </summary>
      <typeparam name="T">The type of enumeration.</typeparam>
      <param name="value">The value from which to remove the bit flag(s).</param>
      <param name="flag">The flag(s) to remove from <paramref name="value" />.</param>
      <returns>
        <paramref name="value" /> with any flags in <paramref name="flag" /> removed.</returns>
    </member>
    <member name="M:Nito.KitchenSink.EnumExtensions.AddOrRemove``1(System.Enum,``0,System.Boolean)">
      <summary>
            Adds or removes a bit flag or set of bit flags in an enumeration value and returns the new value.
            </summary>
      <typeparam name="T">The type of enumeration.</typeparam>
      <param name="value">The value on which to operate.</param>
      <param name="flag">The flag(s) to add to or remove from <paramref name="value" />.</param>
      <param name="add">Whether to add or remove the flags; <c>true</c> adds the flags; <c>false</c> removes them.</param>
      <returns>The new value.</returns>
    </member>
    <member name="T:Nito.KitchenSink.ExceptionExtensions">
      <summary>
            Provides useful extension methods for the <see cref="T:System.Exception" /> class.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.ExceptionExtensions.Dump(System.Exception,System.Boolean)">
      <summary>
            Returns a flattened, printable detailed error message for this exception and all inner exceptions.
            </summary>
      <param name="ex">The exception from which to get the error details.</param>
      <param name="includeStackTrace">Whether to include the stack trace in the error message.</param>
      <returns>A flattened, printable detailed error message.</returns>
    </member>
    <member name="M:Nito.KitchenSink.ExceptionExtensions.ErrorMessage(System.Exception,System.Boolean)">
      <summary>
            Returns a flattened, printable detailed error message for this exception.
            </summary>
      <param name="ex">The exception from which to get the error details.</param>
      <param name="includeStackTrace">Whether to include the stack trace in the error message.</param>
      <returns>A flattened, printable detailed error message.</returns>
    </member>
    <member name="M:Nito.KitchenSink.ExceptionExtensions.InnerExceptionsAndSelf(System.Exception)">
      <summary>
            Returns a collection of exceptions that contains this exception and all inner exceptions.
            </summary>
      <param name="ex">The exception to enumerate.</param>
      <returns>A sequence of inner exceptions, beginning at the current exception.</returns>
    </member>
    <member name="T:Nito.KitchenSink.CircularBuffer`1">
      <summary>
            A circular buffer, which provides O(1) indexed access, O(1) insertions to the back, O(1) removals from the front, and O(N) resizing. Inserting items is not supported.
            </summary>
      <typeparam name="T">The type of elements contained in the deque.</typeparam>
    </member>
    <member name="F:Nito.KitchenSink.CircularBuffer`1.buffer">
      <summary>
            The actual buffer that holds the view. When setting this, <see cref="F:Nito.KitchenSink.CircularBuffer`1.view" /> should be set to <c>null</c>.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CircularBuffer`1.offset">
      <summary>
            The offset into <see cref="F:Nito.KitchenSink.CircularBuffer`1.buffer" /> where the view begins. When setting this, <see cref="F:Nito.KitchenSink.CircularBuffer`1.view" /> should be set to <c>null</c>.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CircularBuffer`1.count">
      <summary>
            The number of valid elements in the view.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CircularBuffer`1.view">
      <summary>
            The view, cached in a member variable. This may be null, and should be accessed via the <see cref="M:Nito.KitchenSink.CircularBuffer`1.View" /> method.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.CircularBuffer`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CircularBuffer`1" /> class with the specified capacity.
            </summary>
      <param name="capacity">The initial capacity.</param>
      <exception cref="T:System.InvalidOperationException">Capacity may not be less than or equal to zero.</exception>
    </member>
    <member name="M:Nito.KitchenSink.CircularBuffer`1.Add(`0)">
      <summary>
            Adds a single element at the back of this circular buffer. If necessary, an element will be removed from the front of the buffer to make room.
            </summary>
      <param name="value">The element to add.</param>
    </member>
    <member name="M:Nito.KitchenSink.CircularBuffer`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds a collection of elements at the back of this circular buffer. If necessary, element(s) will be be removed from the front of the buffer to make room.
            </summary>
      <param name="collection">The collection of elements to add.</param>
    </member>
    <member name="M:Nito.KitchenSink.CircularBuffer`1.Remove">
      <summary>
            Removes and returns the first element of this circular buffer.
            </summary>
      <returns>The former first element.</returns>
      <exception cref="T:System.InvalidOperationException">The circular buffer is empty.</exception>
    </member>
    <member name="M:Nito.KitchenSink.CircularBuffer`1.RemoveRange(System.Int32)">
      <summary>
            Removes a range of elements from the front of this circular buffer.
            </summary>
      <param name="count">The number of elements to remove.</param>
    </member>
    <member name="M:Nito.KitchenSink.CircularBuffer`1.Clear">
      <summary>
            Removes all items from this deque.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.CircularBuffer`1.DoGetItem(System.Int32)">
      <summary>
            Gets an element at the specified view index.
            </summary>
      <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CircularBuffer`1.DoSetItem(System.Int32,`0)">
      <summary>
            Sets an element at the specified view index.
            </summary>
      <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.KitchenSink.CircularBuffer`1.DoInsert(System.Int32,`0)">
      <summary>
            Inserts an element at the specified view index.
            </summary>
      <param name="index">The zero-based view index at which the element should be inserted. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.KitchenSink.CircularBuffer`1.DoRemoveAt(System.Int32)">
      <summary>
            Removes an element at the specified view index.
            </summary>
      <param name="index">The zero-based view index of the element to remove. This index is guaranteed to be valid.</param>
    </member>
    <member name="M:Nito.KitchenSink.CircularBuffer`1.View">
      <summary>
            Retrieves the rotated view for this deque, with a length equal to <see cref="P:Nito.KitchenSink.CircularBuffer`1.Capacity" />. The last <c><see cref="P:Nito.KitchenSink.CircularBuffer`1.Capacity" /> - <see cref="P:Nito.KitchenSink.CircularBuffer`1.Count" /></c> elements of this view are not valid elements.
            </summary>
      <returns>The rotated view of the deque.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CircularBuffer`1.PostIncrement(System.Int32)">
      <summary>
            Increments <see cref="F:Nito.KitchenSink.CircularBuffer`1.offset" /> by <paramref name="value" /> using modulo-<see cref="P:Nito.KitchenSink.CircularBuffer`1.Capacity" /> arithmetic.
            </summary>
      <param name="value">The value by which to increase <see cref="F:Nito.KitchenSink.CircularBuffer`1.offset" />. May not be negative.</param>
      <returns>The value of <see cref="F:Nito.KitchenSink.CircularBuffer`1.offset" /> after it was incremented.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CircularBuffer`1.DoAdd(`0)">
      <summary>
            Inserts a single element to the back of the view. <see cref="P:Nito.KitchenSink.CircularBuffer`1.IsFull" /> must be false when this method is called.
            </summary>
      <param name="value">The element to insert.</param>
    </member>
    <member name="M:Nito.KitchenSink.CircularBuffer`1.DoRemove">
      <summary>
            Removes and returns the last element in the view. <see cref="P:Nito.KitchenSink.CircularBuffer`1.IsEmpty" /> must be false when this method is called.
            </summary>
      <returns>The former last element.</returns>
    </member>
    <member name="P:Nito.KitchenSink.CircularBuffer`1.Capacity">
      <summary>
            Gets or sets the capacity for this circular buffer. This value is always greater than zero; setting this property to a negative or zero value will have no effect.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CircularBuffer`1.Count">
      <summary>
            Gets the number of valid elements contained in this circular buffer. This value is always greater than or equal to zero.
            </summary>
      <returns>The number of valid elements contained in this circular buffer.</returns>
    </member>
    <member name="P:Nito.KitchenSink.CircularBuffer`1.IsEmpty">
      <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CircularBuffer`1.IsFull">
      <summary>
            Gets a value indicating whether this instance is at full capacity.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CircularBuffer`1.IsSplit">
      <summary>
            Gets a value indicating whether the buffer is "split" (meaning the beginning of the view is at a later index in <see cref="F:Nito.KitchenSink.CircularBuffer`1.buffer" /> than the end).
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.A">
      <summary>
            Provides static creation methods for anonymous types.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.A.Comparer``1(System.Func{``0,``0,System.Int32})">
      <summary>
            Creates and returns an <see cref="T:Nito.KitchenSink.AnonymousComparer`1" /> using the specified delegate.
            </summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
      <param name="compare">Compares two objects and returns a value less than 0 if its first argument is less than its second argument, 0 if its two arguments are equal, or greater than 0 if its first argument is greater than its second argument.</param>
      <returns>An <see cref="T:Nito.KitchenSink.AnonymousComparer`1" />.</returns>
    </member>
    <member name="M:Nito.KitchenSink.A.Disposable(System.Action)">
      <summary>
            Creates and returns an <see cref="T:Nito.KitchenSink.AnonymousDisposable" /> using the specified delegate.
            </summary>
      <param name="dispose">The action to take when the disposable object is disposed.</param>
      <returns>An <see cref="T:Nito.KitchenSink.AnonymousDisposable" />.</returns>
    </member>
    <member name="T:Nito.KitchenSink.ExtensibleObjects.IExtensibleObject">
      <summary>
            Enables an object to be extended through aggregation.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.ExtensibleObjects.IExtensibleObject.Extensions">
      <summary>
            Gets the collection of extension objects aggregated by this extensible object. Note that the collection may not be threadsafe.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.ExtensibleObjects.ExtensibleObject">
      <summary>
            A simple base class for extensible objects.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.ExtensibleObjects.ExtensibleObject.extensions">
      <summary>
            The collection of extensions.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.ExtensibleObjects.ExtensibleObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.ExtensibleObjects.ExtensibleObject" /> class.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.ExtensibleObjects.ExtensibleObject.Extensions">
      <summary>
            Gets the collection of extension objects aggregated by this extensible object.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.CharacterStreams.Token">
      <summary>
            A token (output from a lexer).
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.CharacterStreams.StringToken">
      <summary>
            A string token, representing some string data.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CharacterStreams.StringToken.Data">
      <summary>
            The data for this token.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.SafeInternetHandle">
      <summary>
            Represents an unmanaged HINTERNET resource.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.SafeInternetHandle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.SafeInternetHandle" /> class.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.SafeInternetHandle.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.SafeInternetHandle.ReleaseHandle">
      <summary>
            Executes the code required to free the handle.
            </summary>
      <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.</returns>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.SafeInternetHandle.IsInvalid">
      <summary>
            Gets a value indicating whether the handle value is invalid.
            </summary>
      <returns>true if the handle value is invalid; otherwise, false.</returns>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs">
      <summary>
            Arguments for <see cref="T:Nito.KitchenSink.WinInet.InternetHandle.InternetCallback" /> delegates.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.StatusCode">
      <summary>
            The defined notification types. For future compatibility, notifications with unknown types should be ignored.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Socket">
      <summary>
            A notification including socket endpoint information.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Socket.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Socket.EndPoint">
      <summary>
            Gets or sets the socket endpoint information.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.CookieHistory">
      <summary>
            A notification including cookie history information.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.CookieHistory.Accepted">
      <summary>
            Gets or sets a value indicating whether cookies were accepted.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.CookieHistory.Leashed">
      <summary>
            Gets or sets a value indicating whether cookies were leashed.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.CookieHistory.Downgraded">
      <summary>
            Gets or sets a value indicating whether cookies were downgraded.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.CookieHistory.Rejected">
      <summary>
            Gets or sets a value indicating whether cookies were rejected.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Number">
      <summary>
            A notification including numerical information.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Number.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Number.Value">
      <summary>
            Gets or sets the numerical information; this is actually a UInt32.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.AsyncResult">
      <summary>
            A notification including the result of an asynchronous operation.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.AsyncResult.Result">
      <summary>
            Gets or sets the result of the asynchronous operation.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.AsyncResult.Error">
      <summary>
            Gets or sets the error code; this is actually a UInt32.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.String">
      <summary>
            A notification including string information.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.String.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.String.Value">
      <summary>
            Gets or sets the string information.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.Code">
      <summary>
            Gets or sets the type of notification that this callback represents.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.InternetCallbackEventArgs.RawData">
      <summary>
            Gets or sets the raw data of the notification.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.ReadOnlyAttribute">
      <summary>
            When used with CciSharp, makes an auto-property read-only. This can only be applied to non-virtual instance properties. The setter on the property must be private and only called from the constructor.
            See http://ccisamples.codeplex.com/wikipage?title=CciSharp.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.BinaryConverter">
      <summary>
            Provides binary converters similar to <see cref="T:System.BitConverter" /> but with more generic signatures and byte reversal when necessary.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter">
      <summary>
            Provides binary conversions similar to those in <see cref="T:System.BitConverter" /> but with more generic signatures and byte reversal when necessary.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter" /> class with the specified endianness.
            </summary>
      <param name="littleEndian">If <c>true</c>, this binary converter is little-endian; if <c>false</c>, this binary converter is big-endian.</param>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.FromBoolean(System.Collections.Generic.IList{System.Byte},System.Int32,System.Boolean)">
      <summary>
            Converts a boolean value to a 1-byte sequence and stores it in the specified buffer at the specified offset.
            </summary>
      <param name="buffer">The buffer in which to store the binary value.</param>
      <param name="offset">The offset in the buffer at which to store the binary value.</param>
      <param name="value">The value to store in the buffer.</param>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.FromInt16(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int16)">
      <summary>
            Converts a signed 16-bit integer value to a 2-byte sequence and stores it in the specified buffer at the specified offset.
            </summary>
      <param name="buffer">The buffer in which to store the binary value.</param>
      <param name="offset">The offset in the buffer at which to store the binary value.</param>
      <param name="value">The value to store in the buffer.</param>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.FromUInt16(System.Collections.Generic.IList{System.Byte},System.Int32,System.UInt16)">
      <summary>
            Converts an unsigned 16-bit integer value to a 2-byte sequence and stores it in the specified buffer at the specified offset.
            </summary>
      <param name="buffer">The buffer in which to store the binary value.</param>
      <param name="offset">The offset in the buffer at which to store the binary value.</param>
      <param name="value">The value to store in the buffer.</param>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.FromInt32(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
      <summary>
            Converts a signed 32-bit integer value to a 4-byte sequence and stores it in the specified buffer at the specified offset.
            </summary>
      <param name="buffer">The buffer in which to store the binary value.</param>
      <param name="offset">The offset in the buffer at which to store the binary value.</param>
      <param name="value">The value to store in the buffer.</param>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.FromUInt32(System.Collections.Generic.IList{System.Byte},System.Int32,System.UInt32)">
      <summary>
            Converts an unsigned 32-bit integer value to a 4-byte sequence and stores it in the specified buffer at the specified offset.
            </summary>
      <param name="buffer">The buffer in which to store the binary value.</param>
      <param name="offset">The offset in the buffer at which to store the binary value.</param>
      <param name="value">The value to store in the buffer.</param>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.FromInt64(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int64)">
      <summary>
            Converts a signed 64-bit integer value to an 8-byte sequence and stores it in the specified buffer at the specified offset.
            </summary>
      <param name="buffer">The buffer in which to store the binary value.</param>
      <param name="offset">The offset in the buffer at which to store the binary value.</param>
      <param name="value">The value to store in the buffer.</param>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.FromUInt64(System.Collections.Generic.IList{System.Byte},System.Int32,System.UInt64)">
      <summary>
            Converts an unsigned 64-bit integer value to an 8-byte sequence and stores it in the specified buffer at the specified offset.
            </summary>
      <param name="buffer">The buffer in which to store the binary value.</param>
      <param name="offset">The offset in the buffer at which to store the binary value.</param>
      <param name="value">The value to store in the buffer.</param>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.FromSingle(System.Collections.Generic.IList{System.Byte},System.Int32,System.Single)">
      <summary>
            Converts a single-precision floating-point value to a 4-byte sequence and stores it in the specified buffer at the specified offset.
            </summary>
      <param name="buffer">The buffer in which to store the binary value.</param>
      <param name="offset">The offset in the buffer at which to store the binary value.</param>
      <param name="value">The value to store in the buffer.</param>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.FromDouble(System.Collections.Generic.IList{System.Byte},System.Int32,System.Double)">
      <summary>
            Converts a double-precision floating-point value to an 8-byte sequence and stores it in the specified buffer at the specified offset.
            </summary>
      <param name="buffer">The buffer in which to store the binary value.</param>
      <param name="offset">The offset in the buffer at which to store the binary value.</param>
      <param name="value">The value to store in the buffer.</param>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.ToBoolean(System.Collections.Generic.IList{System.Byte},System.Int32)">
      <summary>
            Reads a boolean value from one byte in the specified buffer at the specified position.
            </summary>
      <param name="buffer">The buffer from which to read the value.</param>
      <param name="offset">The offset in the buffer at which to read the value.</param>
      <returns>The value read from the buffer.</returns>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.ToInt16(System.Collections.Generic.IList{System.Byte},System.Int32)">
      <summary>
            Reads a signed 16-bit integer value from two bytes in the specified buffer at the specified position.
            </summary>
      <param name="buffer">The buffer from which to read the value.</param>
      <param name="offset">The offset in the buffer at which to read the value.</param>
      <returns>The value read from the buffer.</returns>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.ToUInt16(System.Collections.Generic.IList{System.Byte},System.Int32)">
      <summary>
            Reads an unsigned 16-bit integer value from two bytes in the specified buffer at the specified position.
            </summary>
      <param name="buffer">The buffer from which to read the value.</param>
      <param name="offset">The offset in the buffer at which to read the value.</param>
      <returns>The value read from the buffer.</returns>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.ToInt32(System.Collections.Generic.IList{System.Byte},System.Int32)">
      <summary>
            Reads a signed 32-bit integer value from four bytes in the specified buffer at the specified position.
            </summary>
      <param name="buffer">The buffer from which to read the value.</param>
      <param name="offset">The offset in the buffer at which to read the value.</param>
      <returns>The value read from the buffer.</returns>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.ToUInt32(System.Collections.Generic.IList{System.Byte},System.Int32)">
      <summary>
            Reads an unsigned 32-bit integer value from four bytes in the specified buffer at the specified position.
            </summary>
      <param name="buffer">The buffer from which to read the value.</param>
      <param name="offset">The offset in the buffer at which to read the value.</param>
      <returns>The value read from the buffer.</returns>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.ToInt64(System.Collections.Generic.IList{System.Byte},System.Int32)">
      <summary>
            Reads a signed 64-bit integer value from eight bytes in the specified buffer at the specified position.
            </summary>
      <param name="buffer">The buffer from which to read the value.</param>
      <param name="offset">The offset in the buffer at which to read the value.</param>
      <returns>The value read from the buffer.</returns>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.ToUInt64(System.Collections.Generic.IList{System.Byte},System.Int32)">
      <summary>
            Reads an unsigned 64-bit integer value from eight bytes in the specified buffer at the specified position.
            </summary>
      <param name="buffer">The buffer from which to read the value.</param>
      <param name="offset">The offset in the buffer at which to read the value.</param>
      <returns>The value read from the buffer.</returns>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.ToSingle(System.Collections.Generic.IList{System.Byte},System.Int32)">
      <summary>
            Reads a single-precision floating-point value from four bytes in the specified buffer at the specified position.
            </summary>
      <param name="buffer">The buffer from which to read the value.</param>
      <param name="offset">The offset in the buffer at which to read the value.</param>
      <returns>The value read from the buffer.</returns>
    </member>
    <member name="M:Nito.KitchenSink.BinaryConverter.EndianBinaryConverter.ToDouble(System.Collections.Generic.IList{System.Byte},System.Int32)">
      <summary>
            Reads a double-precision floating-point value from eight bytes in the specified buffer at the specified position.
            </summary>
      <param name="buffer">The buffer from which to read the value.</param>
      <param name="offset">The offset in the buffer at which to read the value.</param>
      <returns>The value read from the buffer.</returns>
    </member>
    <member name="F:Nito.KitchenSink.BinaryConverter.littleEndian">
      <summary>
            The converter that uses little-endian semantics.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.BinaryConverter.bigEndian">
      <summary>
            The converter that uses big-endian semantics.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.BinaryConverter.LittleEndian">
      <summary>
            Gets the converter that uses little-endian semantics.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.BinaryConverter.BigEndian">
      <summary>
            Gets the converter that uses big-endian semantics.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.Mathematics.Financial">
      <summary>
            Provides financial-related calculations with reasonable constraints and special cases.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.Mathematics.Financial.Exact">
      <summary>
            Provides financial-related calculations with exact definitions (no special cases).
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Mathematics.Financial.Exact.NumberOfPeriods(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Boolean)">
      <summary>
            Calculates the total number of periods in an annuity.
            </summary>
      <param name="rate">The periodic interest rate (applied every period). This may be zero.</param>
      <param name="payment">The payment made each period. This should be a negative number if payments are being made on a loan.</param>
      <param name="currentValue">The current value of the annuity.</param>
      <param name="futureValue">The future value of the annuity.</param>
      <param name="payAtBeginningOfPeriod">Set to <c>true</c> to indicate payments are made at the beginning of the period; by default, payments are made at the end of the period.</param>
      <returns>The total number of periods in an annuity.</returns>
      <exception cref="T:System.InvalidOperationException">The number of periods could not be calculated.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Mathematics.Financial.Exact.Payment(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Boolean)">
      <summary>
            Calculates the regular payment in an annuity.
            </summary>
      <param name="rate">The periodic interest rate (applied every period). This may be zero.</param>
      <param name="numberOfPeriods">The total number of periods.</param>
      <param name="currentValue">The current value of the annuity.</param>
      <param name="futureValue">The future value of the annuity.</param>
      <param name="payAtBeginningOfPeriod">Set to <c>true</c> to indicate payments are made at the beginning of the period; by default, payments are made at the end of the period.</param>
      <returns>The payment made each period in an annuity.</returns>
      <exception cref="T:System.InvalidOperationException">The payment could not be calculated.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Mathematics.Financial.Exact.CurrentValue(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Boolean)">
      <summary>
            Calculates the current value of an annuity.
            </summary>
      <param name="rate">The periodic interest rate (applied every period). This may be zero.</param>
      <param name="numberOfPeriods">The total number of periods.</param>
      <param name="payment">The payment made each period. This should be a negative number if payments are being made on a loan.</param>
      <param name="futureValue">The future value of the annuity.</param>
      <param name="payAtBeginningOfPeriod">Set to <c>true</c> to indicate payments are made at the beginning of the period; by default, payments are made at the end of the period.</param>
      <returns>The current value of an annuity.</returns>
      <exception cref="T:System.InvalidOperationException">The current value could not be calculated.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Mathematics.Financial.Exact.FutureValue(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Boolean)">
      <summary>
            Calculates the future value of an annuity.
            </summary>
      <param name="rate">The periodic interest rate (applied every period). This may be zero.</param>
      <param name="numberOfPeriods">The total number of periods.</param>
      <param name="payment">The payment made each period. This should be a negative number if payments are being made on a loan.</param>
      <param name="currentValue">The current value of the annuity.</param>
      <param name="payAtBeginningOfPeriod">Set to <c>true</c> to indicate payments are made at the beginning of the period; by default, payments are made at the end of the period.</param>
      <returns>The future value of an annuity.</returns>
      <exception cref="T:System.InvalidOperationException">The future value could not be calculated.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Mathematics.Financial.Exact.PrincipalPayment(System.Decimal,System.Decimal,System.Decimal,System.Int32,System.Decimal,System.Boolean)">
      <summary>
            Calculates the principal portion of a specific payment in an annuity.
            </summary>
      <param name="rate">The periodic interest rate (applied every period). This may be zero.</param>
      <param name="numberOfPeriods">The total number of periods.</param>
      <param name="currentValue">The current value of the annuity.</param>
      <param name="period">The period for which to calculate the principal portion. This must be in the range <c>[1,<paramref name="numberOfPeriods" />]</c> and defaults to <c>1</c>.</param>
      <param name="futureValue">The future value of the annuity.</param>
      <param name="payAtBeginningOfPeriod">Set to <c>true</c> to indicate payments are made at the beginning of the period; by default, payments are made at the end of the period.</param>
      <returns>The principal portion of the specific payment.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Period must be in the range [1, numberOfPeriods].</exception>
      <exception cref="T:System.InvalidOperationException">The principal portion of the payment could not be calculated.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Mathematics.Financial.Exact.InterestPayment(System.Decimal,System.Decimal,System.Decimal,System.Int32,System.Decimal,System.Boolean)">
      <summary>
            Calculates the interest portion of a payment in an annuity.
            </summary>
      <param name="rate">The periodic interest rate (applied every period). This may be zero.</param>
      <param name="numberOfPeriods">The total number of periods.</param>
      <param name="currentValue">The current value of the annuity.</param>
      <param name="period">The period for which to calculate the interest portion. This must be in the range <c>[1,<paramref name="numberOfPeriods" />]</c> and defaults to <c>1</c>.</param>
      <param name="futureValue">The future value of the annuity.</param>
      <param name="payAtBeginningOfPeriod">Set to <c>true</c> to indicate payments are made at the beginning of the period; by default, payments are made at the end of the period.</param>
      <returns>The interest portion of the specific payment.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Period must be in the range [1, numberOfPeriods].</exception>
      <exception cref="T:System.InvalidOperationException">The interest portion of the payment could not be calculated.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Mathematics.Financial.VerifyMoneyArgument(System.Decimal,System.String)">
      <summary>
            Verifies that a given argument represents a non-negative money value with no more than two decimal places.
            </summary>
      <param name="value">The money value to check.</param>
      <param name="name">The name of the parameter.</param>
    </member>
    <member name="M:Nito.KitchenSink.Mathematics.Financial.NumberOfPeriods(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Boolean)">
      <summary>
            Calculates the number of periods remaining on a loan.
            </summary>
      <param name="rate">The periodic interest rate (applied every period). This must be greater than or equal to zero.</param>
      <param name="payment">The payment made each period. This must be greater than or equal to zero and not contain fractional pennies.</param>
      <param name="currentBalance">The current balance of the loan. This must be greater than or equal to zero and not contain fractional pennies.</param>
      <param name="futureBalance">The future balance of the loan. This must be greater than or equal to zero and not contain fractional pennies.</param>
      <param name="payAtBeginningOfPeriod">Set to <c>true</c> to indicate payments are made at the beginning of the period; by default, payments are made at the end of the period.</param>
      <returns>The number of periods remaining on the loan.</returns>
      <exception cref="T:System.InvalidOperationException">The number of periods could not be calculated.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Mathematics.Financial.Payment(System.Decimal,System.UInt32,System.Decimal,System.Decimal,System.Boolean)">
      <summary>
            Calculates the minimum payment for a loan.
            </summary>
      <param name="rate">The periodic interest rate (applied every period). This must be greater than or equal to zero.</param>
      <param name="numberOfPeriods">The number of periods remaining on the loan.</param>
      <param name="currentBalance">The current balance of the loan. This must be greater than or equal to zero and not contain fractional pennies.</param>
      <param name="futureBalance">The future balance of the loan. This must be greater than or equal to zero and not contain fractional pennies.</param>
      <param name="payAtBeginningOfPeriod">Set to <c>true</c> to indicate payments are made at the beginning of the period; by default, payments are made at the end of the period.</param>
      <returns>The minimum payment made each period.</returns>
      <exception cref="T:System.InvalidOperationException">The payment could not be calculated.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Mathematics.Financial.FutureBalance(System.Decimal,System.UInt32,System.Decimal,System.Decimal,System.Boolean)">
      <summary>
            Calculates the future balance of a loan.
            </summary>
      <param name="rate">The periodic interest rate (applied every period). This must be greater than or equal to zero.</param>
      <param name="numberOfPeriods">The total number of periods.</param>
      <param name="payment">The payment made each period. This must be greater than or equal to zero and not contain fractional pennies.</param>
      <param name="currentBalance">The current balance of the loan. This must be greater than or equal to zero and not contain fractional pennies.</param>
      <param name="payAtBeginningOfPeriod">Set to <c>true</c> to indicate payments are made at the beginning of the period; by default, payments are made at the end of the period.</param>
      <returns>The future balance of the loan.</returns>
      <exception cref="T:System.InvalidOperationException">The future balance could not be calculated.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Mathematics.Financial.PrincipalPayment(System.Decimal,System.UInt32,System.Decimal,System.Int32,System.Decimal,System.Boolean)">
      <summary>
            Calculates the principal portion of a specific payment on a loan.
            </summary>
      <param name="rate">The periodic interest rate (applied every period). This must be greater than or equal to zero.</param>
      <param name="numberOfPeriods">The total number of periods.</param>
      <param name="currentBalance">The current balance of the loan. This must be greater than or equal to zero and not contain fractional pennies.</param>
      <param name="period">The period for which to calculate the principal portion. This must be in the range <c>[1,<paramref name="numberOfPeriods" />]</c> and defaults to <c>1</c>.</param>
      <param name="futureBalance">The future balance of the loan. This must be greater than or equal to zero and not contain fractional pennies.</param>
      <param name="payAtBeginningOfPeriod">Set to <c>true</c> to indicate payments are made at the beginning of the period; by default, payments are made at the end of the period.</param>
      <returns>The principal portion of the specific payment.</returns>
      <exception cref="T:System.InvalidOperationException">The principal portion of the payment could not be calculated.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Mathematics.Financial.InterestPayment(System.Decimal,System.UInt32,System.Decimal,System.Int32,System.Decimal,System.Boolean)">
      <summary>
            Calculates the interest portion of a payment on a loan.
            </summary>
      <param name="rate">The periodic interest rate (applied every period). This must be greater than or equal to zero.</param>
      <param name="numberOfPeriods">The total number of periods.</param>
      <param name="currentBalance">The current balance of the loan. This must be greater than or equal to zero and not contain fractional pennies.</param>
      <param name="period">The period for which to calculate the principal portion. This must be in the range <c>[1,<paramref name="numberOfPeriods" />]</c> and defaults to <c>1</c>.</param>
      <param name="futureBalance">The future balance of the loan. This must be greater than or equal to zero and not contain fractional pennies.</param>
      <param name="payAtBeginningOfPeriod">Set to <c>true</c> to indicate payments are made at the beginning of the period; by default, payments are made at the end of the period.</param>
      <returns>The interest portion of the specific payment.</returns>
      <exception cref="T:System.InvalidOperationException">The interest portion of the payment could not be calculated.</exception>
    </member>
    <member name="T:Nito.KitchenSink.Dynamic.RefOutArg">
      <summary>
            A wrapper around a "ref" or "out" argument invoked dynamically.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Dynamic.RefOutArg.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.Dynamic.RefOutArg" /> class.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Dynamic.RefOutArg.Create``1">
      <summary>
            Creates a new instance of the <see cref="T:Nito.KitchenSink.Dynamic.RefOutArg" /> class wrapping the default value of <typeparamref name="T" />.
            </summary>
      <typeparam name="T">The type of value to wrap.</typeparam>
      <returns>A new instance of the <see cref="T:Nito.KitchenSink.Dynamic.RefOutArg" /> class wrapping the default value of <typeparamref name="T" />.</returns>
    </member>
    <member name="M:Nito.KitchenSink.Dynamic.RefOutArg.Create(System.Object)">
      <summary>
            Creates a new instance of the <see cref="T:Nito.KitchenSink.Dynamic.RefOutArg" /> class wrapping the specified value.
            </summary>
      <param name="value">The value to wrap.</param>
      <returns>A new instance of the <see cref="T:Nito.KitchenSink.Dynamic.RefOutArg" /> class wrapping the specified value.</returns>
    </member>
    <member name="M:Nito.KitchenSink.Dynamic.RefOutArg.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="P:Nito.KitchenSink.Dynamic.RefOutArg.ValueAsObject">
      <summary>
            Gets or sets the wrapped value as an object.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.Dynamic.RefOutArg.Value">
      <summary>
            Gets or sets the wrapped value.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableParser">
      <summary>
            Parses a token stream into records.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableParser.Tracer">
      <summary>
            The trace source to which messages are written during parsing.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableParser.lexer">
      <summary>
            The underlying lexer.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableParser.#ctor(System.Collections.Generic.IEnumerable{Nito.KitchenSink.CharacterStreams.Token})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableParser" /> class using a specified lexer.
            </summary>
      <param name="lexer">The lexer used to produce tokens.</param>
    </member>
    <member name="M:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableParser.#ctor(System.Collections.Generic.IEnumerable{System.Char},System.Char)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableParser" /> class with the default lexer.
            </summary>
      <param name="data">The delimited text data.</param>
      <param name="fieldSeparator">The field separator character.</param>
    </member>
    <member name="M:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableParser.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableParser.Information(System.String)">
      <summary>
            Traces the specified informational message.
            </summary>
      <param name="message">The informational message to trace.</param>
    </member>
    <member name="M:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableParser.Warning(System.String)">
      <summary>
            Traces the specified warning message.
            </summary>
      <param name="message">The warning message to trace.</param>
    </member>
    <member name="T:Nito.KitchenSink.CharacterStreams.DelimitedText.Tokens">
      <summary>
            Token types read from delimited text data.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.CharacterStreams.DelimitedText.Tokens.FieldData">
      <summary>
            Field data token, representing field data in the original file. Field data supports CSV-style quoting, which is unquoted during lexing.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.CharacterStreams.DelimitedText.Tokens.FieldSeparator">
      <summary>
            A field separator.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.CharacterStreams.DelimitedText.Tokens.EndOfRecord">
      <summary>
            An end of record indicator: '\r\n', '\n', or '\r'. An end of record indicator will not appear at the end of the input.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.EncodingExtensions">
      <summary>
            Extension methods for the <see cref="T:System.Text.Encoding" /> class.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.EncodingExtensions.GetString(System.Text.Encoding,System.IO.Stream,System.Boolean)">
      <summary>
            Decodes all bytes from a stream into a string.
            </summary>
      <param name="encoding">The character encoding to fall back to, if there are no byte order marks or if <paramref name="detectEncodingFromByteOrderMarks" /> is <c>false</c>.</param>
      <param name="stream">The stream to be read.</param>
      <param name="detectEncodingFromByteOrderMarks">Whether to look for byte order marks at the current position of the stream.</param>
      <returns>The data from the stream, interpreted as a string according to the specified encoding.</returns>
    </member>
    <member name="T:Nito.KitchenSink.ExtensibleObjects.ExtensibleWrapper`1">
      <summary>
            Combines an object with a collection of extensions.
            </summary>
      <typeparam name="T">The type of object to wrap.</typeparam>
    </member>
    <member name="M:Nito.KitchenSink.ExtensibleObjects.ExtensibleWrapper`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.ExtensibleObjects.ExtensibleWrapper`1" /> class with a default value for <see cref="P:Nito.KitchenSink.ExtensibleObjects.ExtensibleWrapper`1.Object" />.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.ExtensibleObjects.ExtensibleWrapper`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.ExtensibleObjects.ExtensibleWrapper`1" /> class with the specified value for <see cref="P:Nito.KitchenSink.ExtensibleObjects.ExtensibleWrapper`1.Object" />.
            </summary>
      <param name="object">The object to wrap.</param>
    </member>
    <member name="P:Nito.KitchenSink.ExtensibleObjects.ExtensibleWrapper`1.Object">
      <summary>
            Gets or sets the object that is made extensible by this wrapper.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.ExtensibleObjects.ExtensibleWrapper`1.Extensions">
      <summary>
            Gets or the extensions applied to this object.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.CommaSeparatedValueParser">
      <summary>
            Parses RFC4180-compliant CSV streams.
            </summary>
      <remarks>
            This class supports three ways to define the headers for a CSV stream:
              1) Passed as a constructor parameter. If there is a header row in the data, the number of fields must match (but the names are not checked).
              2) Dynamic, determined by the header row in the data.
              3) Unknown. The number of fields must be the same for each record, but the names of the fields are unknown.
            </remarks>
    </member>
    <member name="F:Nito.KitchenSink.CommaSeparatedValueParser.parser">
      <summary>
            The stream from which to read.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CommaSeparatedValueParser.headerRow">
      <summary>
            Whether the stream has a header row that hasn't been read yet.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CommaSeparatedValueParser.fieldNamesKnown">
      <summary>
            Whether the field names are known.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CommaSeparatedValueParser.fieldCount">
      <summary>
            The number of fields per record.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CommaSeparatedValueParser.headers">
      <summary>
            The defined headers, if any. This is only valid if <c>fieldNamesKnown</c> is <c>true</c>.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.CommaSeparatedValueParser.#ctor(System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CommaSeparatedValueParser" /> class.
            </summary>
      <param name="data">The CSV data to parse.</param>
      <param name="headerRow">If set to <c>true</c>, the CSV data contains a header row.</param>
      <param name="headers">The headers for the CSV data. This parameter may be <c>null</c>.</param>
    </member>
    <member name="M:Nito.KitchenSink.CommaSeparatedValueParser.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.List{System.String}},System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CommaSeparatedValueParser" /> class.
            </summary>
      <param name="parser">The parser providing the CSV data.</param>
      <param name="headerRow">If set to <c>true</c>, the CSV data contains a header row.</param>
      <param name="headers">The headers for the CSV data. This parameter may be <c>null</c>.</param>
    </member>
    <member name="M:Nito.KitchenSink.CommaSeparatedValueParser.Read">
      <summary>
            Reads the CSV records. Each record will contain the same number of fields.
            </summary>
      <returns>The CSV records.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CommaSeparatedValueParser.ReadDynamic">
      <summary>
            Reads the CSV records. Each record will contain the same fields, exposed as properties on a dynamic object.
            </summary>
      <returns>The CSV records.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CommaSeparatedValueParser.ReadHeaderRow(Nito.KitchenSink.EnumeratorWrapper{System.Collections.Generic.List{System.String}})">
      <summary>
            Reads the header row, either populating <see cref="F:Nito.KitchenSink.CommaSeparatedValueParser.headers" /> or comparing the actual headers with the user-provided <see cref="F:Nito.KitchenSink.CommaSeparatedValueParser.headers" />.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.CharacterStreams.DelimitedText.Extensions">
      <summary>
            Extension methods for working with delimited text.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.CharacterStreams.DelimitedText.Extensions.LexDelimitedText(System.Collections.Generic.IEnumerable{System.Char},System.Char)">
      <summary>
            Lexes a sequence of characters, producing a sequence of tokens.
            </summary>
      <param name="source">The source stream of characters.</param>
      <param name="fieldSeparator">The field separator to use. The default value is <c>,</c>.</param>
      <returns>An enumerable sequence of tokens.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CharacterStreams.DelimitedText.Extensions.ParseDelimitedText(System.Collections.Generic.IEnumerable{Nito.KitchenSink.CharacterStreams.Token})">
      <summary>
            Parses a sequence of tokens, producing a sequence of records.
            </summary>
      <param name="source">The source stream of tokens.</param>
      <returns>An enumerable sequence of records.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CharacterStreams.DelimitedText.Extensions.ParseDelimitedText(System.Collections.Generic.IEnumerable{System.Char},System.Char)">
      <summary>
            Lexes and parses a sequence of characters, producing a sequence of records.
            </summary>
      <param name="source">The source stream of characters.</param>
      <param name="fieldSeparator">The field separator to use. The default value is <c>,</c>.</param>
      <returns>An enumerable sequence of records.</returns>
    </member>
    <member name="T:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer">
      <summary>
            Provides message framing for multiple-byte-delimiter-based protocols that support multiple delimiters. Does not perform any unescaping of the message data.
            </summary>
      <remarks>
        <para>No begin delimiter may start with another begin delimiter.</para>
      </remarks>
    </member>
    <member name="T:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.MessageArrivedEventHandler">
      <summary>
            Receives notification that a message has arrived.
            </summary>
      <param name="delimiterIndex">The index of the matching begin/end delimiters for this message.</param>
      <param name="message">The message that has arrived. This may contain an alias of the data passed to <see cref="M:Nito.KitchenSink.Communication.IFramer.DataReceived(System.Collections.Generic.IList{System.Byte})" /> in this call stack, but will not contain an alias to any data previously passed to <see cref="M:Nito.KitchenSink.Communication.IFramer.DataReceived(System.Collections.Generic.IList{System.Byte})" />.</param>
    </member>
    <member name="F:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.maxMessageSize">
      <summary>
            The maximum size of messages allowed, or 0 if there is no maximum.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.beginDelimiters">
      <summary>
            The beginning delimiters.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.endDelimiters">
      <summary>
            The ending delimiters.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.trace">
      <summary>
            The trace source used for all communications messages.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.dataBuffer">
      <summary>
            The data buffer, which grows dynamically as more data arrives. This is never null. This buffer contains the begin delimiter but not the end delimiter.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.delimiterIndex">
      <summary>
            The index of the matching begin delimiter at the front of the data buffer, and also the index of the end delimiter that must match. This is -1 if there are no matching begin delimiters yet.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.endDelimiterIndex">
      <summary>
            How much of the end delimiter has been seen (implicitly at the end of the data buffer).
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Byte[]},System.Collections.Generic.IEnumerable{System.Byte[]})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer" /> class.
            </summary>
      <param name="maxMessageSize">Maximum size of messages, or 0 if message size is not restricted.</param>
      <param name="beginDelimiters">The begin delimiters.</param>
      <param name="endDelimiters">The end delimiters.</param>
    </member>
    <member name="M:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.Reset">
      <summary>
            Re-initializes the framer instance to a clean state. After this method returns, the framer instance is identical to a newly-constructed instance.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.DataReceived(System.Collections.Generic.IList{System.Byte})">
      <summary>
            Notifies the framer instance that incoming data has been received from the stream. This method will invoke <see cref="E:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.MessageArrived" /> as necessary.
            </summary>
      <remarks>
        <para>This method may invoke <see cref="E:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.MessageArrived" /> zero or more times.</para>
        <para>Zero-length receives are ignored. May streams use a 0-length read to indicate the end of a stream, but the framer takes no action in this case.</para>
      </remarks>
      <param name="data">The data received from the stream. Cannot be null. May be a slice of the read buffer for the stream.</param>
      <exception cref="T:System.Net.ProtocolViolationException">If the data received is not a properly-formed message.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.AppendDataToDataBuffer(System.Collections.Generic.IList{System.Byte})">
      <summary>
            Resizes the data buffer and appends the new range of data to it.
            </summary>
      <param name="data">The buffer containing the new data to be appended.</param>
    </member>
    <member name="M:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.CheckMaxMessageSize(System.Int32,System.Int32)">
      <summary>
            Checks for messages that exceed the maximum message size in an overflow-safe way.
            </summary>
      <param name="currentCount">The current size of the message so far.</param>
      <param name="additionalCount">The additional bytes that have arrived as part of this message.</param>
    </member>
    <member name="E:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.MessageArrived">
      <summary>
            Occurs when a message has arrived. Exceptions thrown from this method propogate through <see cref="M:Nito.KitchenSink.Communication.MultipleByteMultipleDelimiterFramer.DataReceived(System.Collections.Generic.IList{System.Byte})" />, and may leave the framer instance in an invalid state.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.ExtensibleObjects.IExtension">
      <summary>
            Enables an object to extend any other object through aggregation.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.ExtensibleObjects.IExtension.Attach(System.Object)">
      <summary>
            Enables an extension object to find out when it has been aggregated. Called when the extension is added to the <see cref="P:Nito.KitchenSink.ExtensibleObjects.IExtensibleObject.Extensions" /> property. This method may not raise an exception.
            </summary>
      <param name="owner">The extensible object that aggregates this extension. This object may implement <see cref="T:Nito.KitchenSink.ExtensibleObjects.IExtensibleObject" />.</param>
    </member>
    <member name="M:Nito.KitchenSink.ExtensibleObjects.IExtension.Detach(System.Object)">
      <summary>
            Enables an object to find out when it is no longer aggregated. Called when an extension is removed from the <see cref="P:Nito.KitchenSink.ExtensibleObjects.IExtensibleObject.Extensions" /> property. This method may not raise an exception and may be called from any thread.
            </summary>
      <param name="owner">The extensible object that no longer aggregates this extension. This object may implement <see cref="T:Nito.KitchenSink.ExtensibleObjects.IExtensibleObject" />.</param>
    </member>
    <member name="T:Nito.KitchenSink.BooleanExtensions">
      <summary>
            Provides useful extension methods for the <see cref="T:System.Boolean" /> type.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.BooleanExtensions.ToInt32(System.Boolean)">
      <summary>
            Converts a boolean value to an integer value. Returns 0 if the boolean value is false, or 1 if the boolean value is true.
            </summary>
      <param name="value">The boolean value to convert.</param>
      <returns>0 if the boolean value is false, or 1 if the boolean value is true.</returns>
    </member>
    <member name="M:Nito.KitchenSink.BooleanExtensions.ToInt32(System.Nullable{System.Boolean})">
      <summary>
            Converts a nullable boolean value to a nullable integer value. Returns 0 if the boolean value is false, or 1 if the boolean value is true, or null if there is no boolean value.
            </summary>
      <param name="value">The boolean value to convert.</param>
      <returns>0 if the boolean value is false, or 1 if the boolean value is true, or null if there is no boolean value.</returns>
    </member>
    <member name="T:Nito.KitchenSink.HashAlgorithmExtensions">
      <summary>
            Provides OpenSSL-like extension methods for <see cref="T:System.Security.Cryptography.HashAlgorithm" /> and derived classes.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.HashAlgorithmExtensions.Update(System.Security.Cryptography.HashAlgorithm,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Updates the hash value by hashing the provided byte buffer. <see cref="M:System.Security.Cryptography.HashAlgorithm.Initialize" /> should be called before invoking this method for the first time.
            </summary>
      <param name="hash">The hash algorithm, including its state.</param>
      <param name="buffer">The input byte array to include in the hash calculation.</param>
      <param name="offset">The offset into the input byte array from which to begin using data.</param>
      <param name="count">The number of bytes in the input byte array to use as data.</param>
    </member>
    <member name="M:Nito.KitchenSink.HashAlgorithmExtensions.Update(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
      <summary>
            Updates the hash value by hashing the provided byte buffer. <see cref="M:System.Security.Cryptography.HashAlgorithm.Initialize" /> should be called before invoking this method for the first time.
            </summary>
      <param name="hash">The hash algorithm, including its state.</param>
      <param name="buffer">The input byte array to include in the hash calculation.</param>
    </member>
    <member name="M:Nito.KitchenSink.HashAlgorithmExtensions.Final(System.Security.Cryptography.HashAlgorithm)">
      <summary>
            Finishes the hash calculation and returns the calculated hash value (<see cref="P:System.Security.Cryptography.HashAlgorithm.Hash" />). This method should only be called once.
            </summary>
      <param name="hash">The hash algorithm, including its state.</param>
      <returns>The calcualted hash value.</returns>
    </member>
    <member name="T:Nito.KitchenSink.AnonymousDisposable">
      <summary>
            An object that implements <see cref="T:System.IDisposable" /> using a delegate.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.AnonymousDisposable.Dispose">
      <summary>
            Gets or sets the Dispose delegate, which implements <see cref="M:System.IDisposable.Dispose" />.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.Dynamic.DynamicStaticTypeMembers">
      <summary>
            A dynamic object that allows access to a type's static members, resolved dynamically at runtime.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Dynamic.DynamicStaticTypeMembers.Trace">
      <summary>
            The trace source for failed binding messages.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Dynamic.DynamicStaticTypeMembers.type">
      <summary>
            The underlying type.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Dynamic.DynamicStaticTypeMembers.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.Dynamic.DynamicStaticTypeMembers" /> class wrapping the specified type.
            </summary>
      <param name="type">The underlying type to wrap.</param>
    </member>
    <member name="M:Nito.KitchenSink.Dynamic.DynamicStaticTypeMembers.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>
            Gets a value for a static property defined by the wrapped type.
            </summary>
      <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
      <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
      <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
    </member>
    <member name="M:Nito.KitchenSink.Dynamic.DynamicStaticTypeMembers.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>
            Sets a value for a static property defined by the wrapped type.
            </summary>
      <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
      <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
      <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
    </member>
    <member name="M:Nito.KitchenSink.Dynamic.DynamicStaticTypeMembers.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>
            Calls a static method defined by the wrapped type.
            </summary>
      <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
      <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</param>
      <param name="result">The result of the member invocation.</param>
      <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
    </member>
    <member name="M:Nito.KitchenSink.Dynamic.DynamicStaticTypeMembers.Create(System.Type)">
      <summary>
            Creates a new instance of the <see cref="T:Nito.KitchenSink.Dynamic.DynamicStaticTypeMembers" /> class wrapping the specified type.
            </summary>
      <param name="type">The underlying type to wrap. May not be <c>null</c>.</param>
      <returns>An instance of <see cref="T:Nito.KitchenSink.Dynamic.DynamicStaticTypeMembers" />, as a dynamic type.</returns>
    </member>
    <member name="M:Nito.KitchenSink.Dynamic.DynamicStaticTypeMembers.Create``1">
      <summary>
            Creates a new instance of the <see cref="T:Nito.KitchenSink.Dynamic.DynamicStaticTypeMembers" /> class wrapping the specified type.
            </summary>
      <typeparam name="T">The underlying type to wrap.</typeparam>
      <returns>An instance of <see cref="T:Nito.KitchenSink.Dynamic.DynamicStaticTypeMembers" />, as a dynamic type.</returns>
    </member>
    <member name="M:Nito.KitchenSink.Dynamic.DynamicStaticTypeMembers.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nito.KitchenSink.ReferenceEqualityComparer`1">
      <summary>
            An object comparer that always compares objects based on reference equality.
            </summary>
      <typeparam name="T">The type of objects being compared.</typeparam>
    </member>
    <member name="T:Nito.KitchenSink.CommaSeparatedValueFormatter">
      <summary>
            Provides RFC4180-compliant CSV formatting for a data stream.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CommaSeparatedValueFormatter.data">
      <summary>
            The stream of data to format as CSV.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CommaSeparatedValueFormatter.headers">
      <summary>
            The headers to write to the CSV, if any.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.CommaSeparatedValueFormatter.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}},System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CommaSeparatedValueFormatter" /> class.
            </summary>
      <param name="data">The stream of data to format as CSV.</param>
      <param name="headers">The headers to write to the CSV, if any. This parameter may be <c>null</c>.</param>
    </member>
    <member name="M:Nito.KitchenSink.CommaSeparatedValueFormatter.Write(System.IO.TextWriter)">
      <summary>
            Writes the data as a CSV stream to the specified writer.
            </summary>
      <param name="writer">The writer to which to write the CSV stream.</param>
    </member>
    <member name="M:Nito.KitchenSink.CommaSeparatedValueFormatter.EscapeFieldValue(System.String)">
      <summary>
            Escapes a field value.
            </summary>
      <param name="fieldValue">The field value to escape.</param>
      <returns>The escaped field value.</returns>
    </member>
    <member name="T:Nito.KitchenSink.SafeNativeMethods">
      <summary>
            Native methods that are safe for any caller.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.SafeNativeMethods.SafeModuleHandle">
      <summary>
            A handle to a DLL (HMODULE).
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.SafeNativeMethods.SafeModuleHandle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.SafeNativeMethods.SafeModuleHandle" /> class.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.SafeNativeMethods.SafeModuleHandle.ReleaseHandle">
      <summary>
            Frees the handle.
            </summary>
      <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.</returns>
    </member>
    <member name="P:Nito.KitchenSink.SafeNativeMethods.SafeModuleHandle.IsInvalid">
      <summary>
            Gets a value indicating whether the handle value is invalid.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.SafeNativeMethods.SafeLocalMemoryHandle">
      <summary>
            A handle to local memory (PVOID) that must be freed by <c>LocalFree</c>.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.SafeNativeMethods.SafeLocalMemoryHandle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.SafeNativeMethods.SafeLocalMemoryHandle" /> class.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.SafeNativeMethods.SafeLocalMemoryHandle.ReleaseHandle">
      <summary>
            Frees the handle.
            </summary>
      <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.</returns>
    </member>
    <member name="P:Nito.KitchenSink.SafeNativeMethods.SafeLocalMemoryHandle.IsInvalid">
      <summary>
            Gets a value indicating whether the handle value is invalid.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.SafeNativeMethods.FORMAT_MESSAGE_ALLOCATE_BUFFER">
      <summary>
            Instructs <c>FormatMessage</c> to allocate the message buffer.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.SafeNativeMethods.FORMAT_MESSAGE_FROM_HMODULE">
      <summary>
            Informs <c>FormatMessage</c> to search the given <c>HMODULE</c> for the message definition.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.SafeNativeMethods.FORMAT_MESSAGE_IGNORE_INSERTS">
      <summary>
            Instructs <c>FormatMessage</c> to ignore insertion parameters.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.SafeNativeMethods.LOAD_LIBRARY_AS_DATAFILE">
      <summary>
            Instructs <c>LoadLibraryEx</c> to load the DLL but not execute it.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.SafeNativeMethods.FormatMessageFromModule(System.String,System.UInt32)">
      <summary>
            Formats the message from the given DLL.
            </summary>
      <param name="dllName">The name of the DLL to search for the message definition.</param>
      <param name="code">The code identifying the message to look up.</param>
      <returns>The message definition.</returns>
    </member>
    <member name="M:Nito.KitchenSink.SafeNativeMethods.TryFormatMessageFromModule(System.String,System.UInt32)">
      <summary>
            Tries to format the message from the given DLL. Returns <c>null</c> if the DLL could not be loaded or does not contain a definition for the message.
            </summary>
      <param name="dllName">The name of the DLL to search for the message definition.</param>
      <param name="code">The code identifying the message to look up.</param>
      <returns>The message definition.</returns>
    </member>
    <member name="M:Nito.KitchenSink.SafeNativeMethods.LoadLibraryEx(System.String,System.UInt32)">
      <summary>
            Loads the specified DLL library.
            </summary>
      <param name="fileName">Name of the DLL to load.</param>
      <param name="flags">Flags that affect the loading of the library.</param>
      <returns>A handle to the loaded DLL.</returns>
    </member>
    <member name="M:Nito.KitchenSink.SafeNativeMethods.FormatMessageFromModuleAllocatingBuffer(System.UInt32,Nito.KitchenSink.SafeNativeMethods.SafeModuleHandle,System.UInt32,Nito.KitchenSink.SafeNativeMethods.SafeLocalMemoryHandle@,System.UInt32)">
      <summary>
            Formats the message from the given DLL, having the system allocate the message buffer.
            </summary>
      <param name="flags">The formatting message flags. This must include <see cref="F:Nito.KitchenSink.SafeNativeMethods.FORMAT_MESSAGE_ALLOCATE_BUFFER" />, <see cref="F:Nito.KitchenSink.SafeNativeMethods.FORMAT_MESSAGE_FROM_HMODULE" />, and <see cref="F:Nito.KitchenSink.SafeNativeMethods.FORMAT_MESSAGE_IGNORE_INSERTS" />.</param>
      <param name="dll">The DLL to search for the message definition.</param>
      <param name="code">The code identifying the message to look up.</param>
      <param name="localMemory">On return, contains a handle to a local memory buffer allocated by the system.</param>
      <param name="minimumBufferSize">Minimum size of the buffer local memory buffer to allocate.</param>
      <returns>The number of valid characters in the local memory buffer.</returns>
    </member>
    <member name="T:Nito.KitchenSink.Interop">
      <summary>
            Useful methods for p/Invoke interop.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Interop.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary>
            Converts an unmanaged function pointer to a delegate.
            </summary>
      <typeparam name="T">The type of delegate to convert to.</typeparam>
      <param name="pointer">The pointer to convert.</param>
      <returns>The function pointer, as a delegate.</returns>
    </member>
    <member name="M:Nito.KitchenSink.Interop.GetLastWin32Exception">
      <summary>
            Returns a <see cref="T:System.ComponentModel.Win32Exception" /> with the error code of <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
            </summary>
      <returns>A <see cref="T:System.ComponentModel.Win32Exception" /> with the error code of <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.</returns>
    </member>
    <member name="M:Nito.KitchenSink.Interop.GetLastWin32Exception(System.String)">
      <summary>
            Returns a <see cref="T:System.ComponentModel.Win32Exception" /> with the error code of <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
            </summary>
      <param name="function">The name of the last function that was called. This is included in the error message.</param>
      <returns>A <see cref="T:System.ComponentModel.Win32Exception" /> with the error code of <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.</returns>
    </member>
    <member name="M:Nito.KitchenSink.Interop.FormatMessageFromDll(System.String,System.Int32)">
      <summary>
            Returns an error message from a message table in a specific DLL; throws an exception if the error code is not defined in the dll. This method will affect <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
            </summary>
      <param name="dll">The DLL to search for the message.</param>
      <param name="code">The code of the message to find.</param>
      <returns>The error message, if found in the DLL; otherwise, an exception is thrown.</returns>
    </member>
    <member name="M:Nito.KitchenSink.Interop.TryFormatMessageFromDll(System.String,System.Int32)">
      <summary>
            Returns an error message from a message table in a specific DLL; returns null if there was some error retrieving the error message. This method will affect <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
            </summary>
      <param name="dll">The DLL to search for the message.</param>
      <param name="code">The code of the message to find.</param>
      <returns>The error message, if found in the DLL; otherwise, <c>null</c>.</returns>
    </member>
    <member name="T:Nito.KitchenSink.CRC16">
      <summary>
            A generalized CRC-16 algorithm.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.CRC16.Definition">
      <summary>
            Holds parameters for a CRC-16 algorithm.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC16.Definition.Default">
      <summary>
            Gets a common CRC-16, used by ARC and LHA.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC16.Definition.CcittFalse">
      <summary>
            Gets a CRC-16 used by floppy disk formats, commonly misidentified as CCITT.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC16.Definition.Ccitt">
      <summary>
            Gets a CRC-16 known as CCITT, used by Kermit. Appears in "Numerical Recipes in C".
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC16.Definition.XModem">
      <summary>
            Gets a CRC-16 used by XMODEM and ZMODEM. Appears in "Numerical Recipes in C".
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC16.Definition.X25">
      <summary>
            Gets a CRC-16 used by X.25, V.42, T.30, RFC 1171. Appears in "Numerical Recipes in C".
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC16.Definition.TruncatedPolynomial">
      <summary>
            Gets or sets the normal (non-reversed, non-reciprocal) polynomial to use for the CRC calculations.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC16.Definition.Initializer">
      <summary>
            Gets or sets the value to which the remainder is initialized at the beginning of the CRC calculation.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC16.Definition.FinalXorValue">
      <summary>
            Gets or sets the value by which the remainder is XOR'ed at the end of the CRC calculation.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC16.Definition.ReverseDataBytes">
      <summary>
            Gets or sets a value indicating whether incoming data bytes are reversed/reflected.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.CRC16.Definition.ReverseResultBeforeFinalXor">
      <summary>
            Gets or sets a value indicating whether the final remainder is reversed/reflected at the end of the CRC calculation before it is XOR'ed with <see cref="P:Nito.KitchenSink.CRC16.Definition.FinalXorValue" />.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CRC16.NormalLookupTables">
      <summary>
            The lookup tables for non-reversed polynomials.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CRC16.ReversedLookupTables">
      <summary>
            The lookup tables for reversed polynomials.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CRC16.lookupTable">
      <summary>
            A reference to the lookup table.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CRC16.definition">
      <summary>
            The CRC-32 algorithm definition.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CRC16.remainder">
      <summary>
            The current value of the remainder.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.CRC16.#ctor(Nito.KitchenSink.CRC16.Definition,System.UInt16[])">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CRC16" /> class with the specified definition and lookup table.
            </summary>
      <param name="definition">The CRC-16 algorithm definition.</param>
      <param name="lookupTable">The lookup table.</param>
    </member>
    <member name="M:Nito.KitchenSink.CRC16.#ctor(Nito.KitchenSink.CRC16.Definition)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CRC16" /> class with the specified definition.
            </summary>
      <param name="definition">The CRC-16 algorithm definition.</param>
    </member>
    <member name="M:Nito.KitchenSink.CRC16.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CRC16" /> class with the default definition.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.CRC16.FindOrGenerateLookupTable(Nito.KitchenSink.CRC16.Definition)">
      <summary>
            Searches the known lookup tables for one matching the given CRC-16 definition; if none is found, a new lookup table is generated and added to the known lookup tables.
            </summary>
      <param name="definition">The CRC-16 definition.</param>
      <returns>The lookup table for the given CRC-16 definition.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CRC16.GenerateLookupTable(Nito.KitchenSink.CRC16.Definition)">
      <summary>
            Generates a lookup table for a CRC-16 algorithm definition. Both <see cref="P:Nito.KitchenSink.CRC16.Definition.TruncatedPolynomial" /> and <see cref="P:Nito.KitchenSink.CRC16.Definition.ReverseDataBytes" /> are used in the calculations.
            </summary>
      <param name="definition">The CRC-16 algorithm definition.</param>
      <returns>The lookup table.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CRC16.Initialize">
      <summary>
            Initializes the CRC-16 calculations.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.CRC16.Update(System.Collections.Generic.IList{System.Byte})">
      <summary>
            Updates the hash value by hashing the provided byte buffer. <see cref="M:Nito.KitchenSink.CRC16.Initialize" /> should be called before invoking this method for the first time.
            </summary>
      <param name="buffer">The input byte array to include in the hash calculation.</param>
    </member>
    <member name="M:Nito.KitchenSink.CRC16.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CRC16.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
      <param name="array">The input to compute the hash code for.</param>
      <param name="offset">The offset into the byte array from which to begin using data.</param>
      <param name="count">The number of bytes in the byte array to use as data.</param>
    </member>
    <member name="M:Nito.KitchenSink.CRC16.HashFinal">
      <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CRC16.ReflectedIndex(System.UInt16,System.Byte)">
      <summary>
            Gets the index into the lookup array for a given remainder and data byte. Data byte reversal is taken into account.
            </summary>
      <param name="remainder">The current remainder.</param>
      <param name="data">The data byte.</param>
      <returns>The index into the lookup array.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CRC16.ReflectedShift(System.UInt16)">
      <summary>
            Shifts a byte out of the remainder. This is the high byte or low byte, depending on whether the data bytes are reversed.
            </summary>
      <param name="remainder">The remainder value.</param>
      <returns>The shifted remainder value.</returns>
    </member>
    <member name="P:Nito.KitchenSink.CRC16.Result">
      <summary>
            Gets the result of the CRC-16 algorithm.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.NormalizeCrLfTextReader`1">
      <summary>
            A wrapper around a source <see cref="T:System.IO.TextReader" />, converting any <c>\r\n</c>, <c>\r</c>, or <c>\n</c> character sequences to just <c>\n</c>. This class does perform buffering.
            </summary>
      <typeparam name="T">The type of <see cref="T:System.IO.TextReader" /> being wrapped.</typeparam>
    </member>
    <member name="M:Nito.KitchenSink.NormalizeCrLfTextReader`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.NormalizeCrLfTextReader`1" /> class wrapping the specified <see cref="T:System.IO.TextReader" />.
            </summary>
      <param name="source">The source <see cref="T:System.IO.TextReader" /> to wrap. This <see cref="T:System.IO.TextReader" /> is wrapped by a <see cref="T:Nito.KitchenSink.PeekableTextReader`1" /> before being wrapped by this class.</param>
    </member>
    <member name="M:Nito.KitchenSink.NormalizeCrLfTextReader`1.Peek">
      <summary>
            Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the input stream.
            </summary>
      <returns>An integer representing the next character to be read, or -1 if no more characters are available.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:Nito.KitchenSink.NormalizeCrLfTextReader`1.Read">
      <summary>
            Reads the next character from the input stream and advances the character position by one character.
            </summary>
      <returns>The next character from the input stream, or -1 if no more characters are available.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="T:Nito.KitchenSink.LineMappingTextReader`1">
      <summary>
            A wrapper around a source <see cref="T:System.IO.TextReader" />, counting lines and columns. This class does not perform any buffering.
            </summary>
      <typeparam name="T">The type of <see cref="T:System.IO.TextReader" /> being wrapped.</typeparam>
    </member>
    <member name="F:Nito.KitchenSink.LineMappingTextReader`1.lineEndings">
      <summary>
            The offset of each '\n' line ending seen in the source stream.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.LineMappingTextReader`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.LineMappingTextReader`1" /> class, wrapping the specified <see cref="T:System.IO.TextReader" />.
            </summary>
      <param name="source">The source <see cref="T:System.IO.TextReader" /> to wrap.</param>
    </member>
    <member name="M:Nito.KitchenSink.LineMappingTextReader`1.GetLineNumberAndLineOffset(System.Int64)">
      <summary>
            Gets the line number and line offset for a speicified position in the stream.
            </summary>
      <param name="position">The position in the stream for which to get the line number and line offset. This should not be negative or larger than the number of characters read.</param>
      <returns>The line number and line offset for the specified position in the stream.</returns>
    </member>
    <member name="M:Nito.KitchenSink.LineMappingTextReader`1.Read">
      <summary>
            Reads the next character from the input stream and advances the character position by one character.
            </summary>
      <returns>The next character from the input stream, or -1 if no more characters are available.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="T:Nito.KitchenSink.Reflection.TypeExtensions">
      <summary>
            Extension methods for the <see cref="T:System.Type" /> type.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Reflection.TypeExtensions.IsReferenceEquatable(System.Type)">
      <summary>
            Returns <c>true</c> if this type uses reference equality (i.e., does not override <see cref="M:System.Object.Equals(System.Object)" />); returns <c>false</c> if this type or any of its base types override <see cref="M:System.Object.Equals(System.Object)" />. This method returns <c>false</c> for any interface type, and returns <c>true</c> for any reference-equatable base class even if a derived class is not reference-equatable; the best way to determine if an object uses reference equality is to pass the exact type of that object.
            </summary>
      <param name="type">The type to test for reference equality.</param>
      <returns>Returns <c>true</c> if this type uses reference equality (i.e., does not override <see cref="M:System.Object.Equals(System.Object)" />); returns <c>false</c> if this type or any of its base types override <see cref="M:System.Object.Equals(System.Object)" />.</returns>
    </member>
    <member name="T:Nito.KitchenSink.Communication.IFramer">
      <summary>
            A message framer. Converts a stream of bytes into a stream of messages, represented as byte arrays.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Communication.IFramer.DataReceived(System.Collections.Generic.IList{System.Byte})">
      <summary>
            Notifies the framer instance that incoming data has been received from the stream. This method will invoke <see cref="E:Nito.KitchenSink.Communication.IFramer.MessageArrived" /> as necessary.
            </summary>
      <remarks>
        <para>This method may invoke <see cref="E:Nito.KitchenSink.Communication.IFramer.MessageArrived" /> zero or more times.</para>
        <para>Zero-length receives are ignored. May streams use a 0-length read to indicate the end of a stream, but the framer takes no action in this case.</para>
      </remarks>
      <param name="data">The data received from the stream. Cannot be null. May be a slice of the read buffer for the stream.</param>
      <exception cref="T:System.Net.ProtocolViolationException">If the data received is not a properly-formed message.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Communication.IFramer.Reset">
      <summary>
            Re-initializes the framer instance to a clean state. After this method returns, the framer instance is identical to a newly-constructed instance.
            </summary>
    </member>
    <member name="E:Nito.KitchenSink.Communication.IFramer.MessageArrived">
      <summary>
            Occurs when a message has arrived. Exceptions thrown from this method propogate through <see cref="M:Nito.KitchenSink.Communication.IFramer.DataReceived(System.Collections.Generic.IList{System.Byte})" />, and may leave the framer instance in an invalid state.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer">
      <summary>
            Provides message framing for multiple-byte-delimiter-based protocols. Does not perform any unescaping of the message data.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.maxMessageSize">
      <summary>
            The maximum size of messages allowed, or 0 if there is no maximum.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.beginDelimiter">
      <summary>
            The beginning delimiter.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.endDelimiter">
      <summary>
            The ending delimiter.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.trace">
      <summary>
            The trace source used for all communications messages.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.dataBuffer">
      <summary>
            The data buffer, which grows dynamically as more data arrives. This is never null.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.beginDelimiterIndex">
      <summary>
            How much of the begin delimiter has been seen (implicitly at the beginning of the data buffer).
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.endDelimiterIndex">
      <summary>
            How much of the end delimiter has been seen (implicitly at the end of the data buffer).
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.#ctor(System.Int32,System.Byte[],System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer" /> class.
            </summary>
      <param name="maxMessageSize">Maximum size of messages, or 0 if message size is not restricted.</param>
      <param name="beginDelimiter">The begin delimiter.</param>
      <param name="endDelimiter">The end delimiter.</param>
    </member>
    <member name="M:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.Reset">
      <summary>
            Re-initializes the framer instance to a clean state. After this method returns, the framer instance is identical to a newly-constructed instance.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.DataReceived(System.Collections.Generic.IList{System.Byte})">
      <summary>
            Notifies the framer instance that incoming data has been received from the stream. This method will invoke <see cref="E:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.MessageArrived" /> as necessary.
            </summary>
      <remarks>
        <para>This method may invoke <see cref="E:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.MessageArrived" /> zero or more times.</para>
        <para>Zero-length receives are ignored. May streams use a 0-length read to indicate the end of a stream, but the framer takes no action in this case.</para>
      </remarks>
      <param name="data">The data received from the stream. Cannot be null. May be a slice of the read buffer for the stream.</param>
      <exception cref="T:System.Net.ProtocolViolationException">If the data received is not a properly-formed message.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.AppendDataToDataBuffer(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
      <summary>
            Resizes the data buffer and appends the new range of data to it.
            </summary>
      <param name="data">The buffer containing the new data to be appended.</param>
      <param name="index">The index into <paramref name="data" /> marking the start of the new data.</param>
      <param name="count">The number of bytes to append from <paramref name="data" /> into the data buffer.</param>
    </member>
    <member name="M:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.CheckMaxMessageSize(System.Int32,System.Int32)">
      <summary>
            Checks for messages that exceed the maximum message size in an overflow-safe way.
            </summary>
      <param name="currentCount">The current size of the message so far.</param>
      <param name="additionalCount">The additional bytes that have arrived as part of this message.</param>
    </member>
    <member name="E:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.MessageArrived">
      <summary>
            Occurs when a message has arrived. Exceptions thrown from this method propogate through <see cref="M:Nito.KitchenSink.Communication.MultipleByteDelimiterFramer.DataReceived(System.Collections.Generic.IList{System.Byte})" />, and may leave the framer instance in an invalid state.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.BackgroundWorkerExtensions">
      <summary>
            Provides extension methods for the <see cref="T:System.ComponentModel.BackgroundWorker" /> class.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.BackgroundWorkerExtensions.ToTask(System.ComponentModel.BackgroundWorker)">
      <summary>
            Provides a <see cref="T:System.Threading.Tasks.Task" /> interface for <see cref="T:System.ComponentModel.BackgroundWorker" />. This wrapper supports successful results, exceptions, and BGW-style cancellation.
            </summary>
      <param name="this">The <see cref="T:System.ComponentModel.BackgroundWorker" /> to wrap.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> interface for the <see cref="T:System.ComponentModel.BackgroundWorker" />.</returns>
    </member>
    <member name="M:Nito.KitchenSink.BackgroundWorkerExtensions.ToTask(System.ComponentModel.BackgroundWorker,System.Threading.CancellationToken)">
      <summary>
            Provides a <see cref="T:System.Threading.Tasks.Task" /> interface for <see cref="T:System.ComponentModel.BackgroundWorker" />. This wrapper supports successful results, exceptions, BGW-style cancellation, and Task-style cancellation.
            </summary>
      <param name="this">The <see cref="T:System.ComponentModel.BackgroundWorker" /> to wrap.</param>
      <param name="cancellationToken">The cancellation token used for Task-style cancellation. When this token is signalled, <see cref="M:System.ComponentModel.BackgroundWorker.CancelAsync" /> is invoked, and the BGW may use BGW-style or Task-style cancellation.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> interface for the <see cref="T:System.ComponentModel.BackgroundWorker" />.</returns>
    </member>
    <member name="T:Nito.KitchenSink.Reflection.ObjectExtensions">
      <summary>
            Defines extension methods useful when doing reflection.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Reflection.ObjectExtensions.GetProperty(System.Object,System.String)">
      <summary>
            Reads an untyped property from an object.
            </summary>
      <param name="this">The object from which to read the property. May not be <c>null</c>.</param>
      <param name="name">The name of the property to read. This property must exist.</param>
      <returns>The value of the property for that object.</returns>
      <exception cref="T:System.ArgumentNullException">Either <paramref name="this" /> or <paramref name="name" /> is <c>null</c>.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The object <paramref name="this" /> does not have a property named <paramref name="name" />.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Reflection.ObjectExtensions.GetProperty``1(System.Object,System.String)">
      <summary>
            Reads a property from an object.
            </summary>
      <typeparam name="T">The type of the property that is returned.</typeparam>
      <param name="this">The object from which to read the property. May not be <c>null</c>.</param>
      <param name="name">The name of the property to read. This property must exist.</param>
      <returns>The value of the property for that object.</returns>
      <exception cref="T:System.ArgumentNullException">Either <paramref name="this" /> or <paramref name="name" /> is <c>null</c>.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The object <paramref name="this" /> does not have a property named <paramref name="name" />.</exception>
      <exception cref="T:System.InvalidCastException">The property was found, but is not of type <typeparamref name="T" />.</exception>
    </member>
    <member name="T:Nito.KitchenSink.ObjectExtensions">
      <summary>
            Provides extension methods applicable to all objects.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.ObjectExtensions.GetPropertyName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Retrieves the name of a property referenced by a lambda expression.
            </summary>
      <typeparam name="TObject">The type of object containing the property.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <param name="this">The object containing the property.</param>
      <param name="expression">A lambda expression selecting the property from the containing object.</param>
      <returns>The name of the property referenced by <paramref name="expression" />.</returns>
    </member>
    <member name="T:Nito.KitchenSink.ProgressReporter">
      <summary>
            A class used by Tasks to report progress or completion updates back to the UI.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.ProgressReporter.scheduler">
      <summary>
            The underlying scheduler for the UI's synchronization context.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.ProgressReporter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.ProgressReporter" /> class. This should be run on a UI thread.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.ProgressReporter.ReportProgressAsync(System.Action)">
      <summary>
            Reports the progress to the UI thread. This method should be called from the task. Note that the progress update is asynchronous with respect to the reporting Task. For a synchronous progress update, wait on the returned <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
      <param name="action">The action to perform in the context of the UI thread. Note that this action is run asynchronously on the UI thread.</param>
      <returns>The task queued to the UI thread.</returns>
    </member>
    <member name="M:Nito.KitchenSink.ProgressReporter.ReportProgress(System.Action)">
      <summary>
            Reports the progress to the UI thread, and waits for the UI thread to process the update before returning. This method should be called from the task.
            </summary>
      <param name="action">The action to perform in the context of the UI thread.</param>
    </member>
    <member name="M:Nito.KitchenSink.ProgressReporter.RegisterContinuation(System.Threading.Tasks.Task,System.Action)">
      <summary>
            Registers a UI thread handler for when the specified task finishes execution, whether it finishes with success, failiure, or cancellation.
            </summary>
      <param name="task">The task to monitor for completion.</param>
      <param name="action">The action to take when the task has completed, in the context of the UI thread.</param>
      <returns>The continuation created to handle completion. This is normally ignored.</returns>
    </member>
    <member name="M:Nito.KitchenSink.ProgressReporter.RegisterContinuation``1(System.Threading.Tasks.Task{``0},System.Action)">
      <summary>
            Registers a UI thread handler for when the specified task finishes execution, whether it finishes with success, failiure, or cancellation.
            </summary>
      <typeparam name="TResult">The type of the task result.</typeparam>
      <param name="task">The task to monitor for completion.</param>
      <param name="action">The action to take when the task has completed, in the context of the UI thread.</param>
      <returns>The continuation created to handle completion. This is normally ignored.</returns>
    </member>
    <member name="M:Nito.KitchenSink.ProgressReporter.RegisterSucceededHandler(System.Threading.Tasks.Task,System.Action)">
      <summary>
            Registers a UI thread handler for when the specified task successfully finishes execution.
            </summary>
      <param name="task">The task to monitor for successful completion.</param>
      <param name="action">The action to take when the task has successfully completed, in the context of the UI thread.</param>
      <returns>The continuation created to handle successful completion. This is normally ignored.</returns>
    </member>
    <member name="M:Nito.KitchenSink.ProgressReporter.RegisterSucceededHandler``1(System.Threading.Tasks.Task{``0},System.Action{``0})">
      <summary>
            Registers a UI thread handler for when the specified task successfully finishes execution and returns a result.
            </summary>
      <typeparam name="TResult">The type of the task result.</typeparam>
      <param name="task">The task to monitor for successful completion.</param>
      <param name="action">The action to take when the task has successfully completed, in the context of the UI thread. The argument to the action is the return value of the task.</param>
      <returns>The continuation created to handle successful completion. This is normally ignored.</returns>
    </member>
    <member name="M:Nito.KitchenSink.ProgressReporter.RegisterFaultedHandler(System.Threading.Tasks.Task,System.Action{System.Exception})">
      <summary>
            Registers a UI thread handler for when the specified task becomes faulted.
            </summary>
      <param name="task">The task to monitor for faulting.</param>
      <param name="action">The action to take when the task has faulted, in the context of the UI thread.</param>
      <returns>The continuation created to handle faulting. This is normally ignored.</returns>
    </member>
    <member name="M:Nito.KitchenSink.ProgressReporter.RegisterFaultedHandler``1(System.Threading.Tasks.Task{``0},System.Action{System.Exception})">
      <summary>
            Registers a UI thread handler for when the specified task becomes faulted.
            </summary>
      <typeparam name="TResult">The type of the task result.</typeparam>
      <param name="task">The task to monitor for faulting.</param>
      <param name="action">The action to take when the task has faulted, in the context of the UI thread.</param>
      <returns>The continuation created to handle faulting. This is normally ignored.</returns>
    </member>
    <member name="M:Nito.KitchenSink.ProgressReporter.RegisterCancelledHandler(System.Threading.Tasks.Task,System.Action)">
      <summary>
            Registers a UI thread handler for when the specified task is cancelled.
            </summary>
      <param name="task">The task to monitor for cancellation.</param>
      <param name="action">The action to take when the task is cancelled, in the context of the UI thread.</param>
      <returns>The continuation created to handle cancellation. This is normally ignored.</returns>
    </member>
    <member name="M:Nito.KitchenSink.ProgressReporter.RegisterCancelledHandler``1(System.Threading.Tasks.Task{``0},System.Action)">
      <summary>
            Registers a UI thread handler for when the specified task is cancelled.
            </summary>
      <typeparam name="TResult">The type of the task result.</typeparam>
      <param name="task">The task to monitor for cancellation.</param>
      <param name="action">The action to take when the task is cancelled, in the context of the UI thread.</param>
      <returns>The continuation created to handle cancellation. This is normally ignored.</returns>
    </member>
    <member name="P:Nito.KitchenSink.ProgressReporter.Scheduler">
      <summary>
            Gets the task scheduler which executes tasks on the UI thread.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.INotifyPropertyChangedExtensions">
      <summary>
            Provides extension methods for objects implementing <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.INotifyPropertyChangedExtensions.SubscribeToPropertyChanged``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{``0})">
      <summary>
            Subscribes a handler to the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event for a specific property.
            </summary>
      <typeparam name="TObject">The type implementing <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <param name="source">The object implementing <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.</param>
      <param name="expression">The lambda expression selecting the property.</param>
      <param name="handler">The handler that is invoked when the property changes.</param>
      <returns>The actual delegate subscribed to <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</returns>
    </member>
    <member name="T:Nito.KitchenSink.EnumerableExtensions">
      <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.EnumerableExtensions.CreateEnumeratorWrapper``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Creates a wrapper for the <see cref="T:System.Collections.Generic.IEnumerator`1" /> returned from <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.
            </summary>
      <typeparam name="T">The type of objects being enumerated.</typeparam>
      <param name="source">The source enumeration.</param>
      <returns>An enumerator wrapper.</returns>
    </member>
    <member name="M:Nito.KitchenSink.EnumerableExtensions.TryGetCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
      <summary>
            Attempts to determine the count of an enumeration without enumerating it. Returns <c>true</c> if the count was successfully determined.
            </summary>
      <typeparam name="T">The type of objects in the enumeration.</typeparam>
      <param name="source">The source enumeration.</param>
      <param name="result">On return, contains the count of the enumeration if the return value was <c>true</c>. If the return value was <c>false</c>, this value is undefined.</param>
      <returns>
        <c>true</c> if the count was successfully determined; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.FtpConnection">
      <summary>
            A connection to an FTP server. This class has thread affinity except for the <see cref="M:Nito.KitchenSink.WinInet.FtpConnection.Dispose" /> method, which may be called by any thread. Other threads may call <see cref="M:Nito.KitchenSink.WinInet.FtpConnection.Dispose" /> to cancel long-running operations.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.WinInet.FtpConnection.FileTransferType">
      <summary>
            File transfer options.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.WinInet.FtpConnection.currentDirectory">
      <summary>
            The current working directory on the remote FTP server, if known. May be <c>null</c>.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.WinInet.FtpConnection" /> class.
            </summary>
      <param name="process">The name of the process or component making use of this FTP connection (used for logging).</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Connect(System.String,System.Int32,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
      <summary>
            Connects to the specified FTP server.
            </summary>
      <param name="serverName">Name of the server to which to connect.</param>
      <param name="serverPort">The server port to which to connect.</param>
      <param name="username">The username to use for authentication.</param>
      <param name="password">The password to use for authentication.</param>
      <param name="internetConnectFlags">The connection flags, such as <see cref="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Flags.Passive" /> for passive FTP.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Connect(System.String,System.Int32,System.String,System.String)">
      <summary>
            Connects to the specified FTP server.
            </summary>
      <param name="serverName">Name of the server to which to connect.</param>
      <param name="serverPort">The server port to which to connect.</param>
      <param name="username">The username to use for authentication.</param>
      <param name="password">The password to use for authentication.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Connect(System.String,System.String,System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
      <summary>
            Connects to the specified FTP server.
            </summary>
      <param name="serverName">Name of the server to which to connect.</param>
      <param name="username">The username to use for authentication.</param>
      <param name="password">The password to use for authentication.</param>
      <param name="internetConnectFlags">The connection flags, such as <see cref="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Flags.Passive" /> for passive FTP.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Connect(System.String,System.String,System.String)">
      <summary>
            Connects to the specified FTP server.
            </summary>
      <param name="serverName">Name of the server to which to connect.</param>
      <param name="username">The username to use for authentication.</param>
      <param name="password">The password to use for authentication.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Connect(System.String,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
      <summary>
            Connects to the specified FTP server.
            </summary>
      <param name="serverName">Name of the server to which to connect.</param>
      <param name="internetConnectFlags">The connection flags, such as <see cref="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Flags.Passive" /> for passive FTP.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Connect(System.String)">
      <summary>
            Connects to the specified FTP server.
            </summary>
      <param name="serverName">Name of the server to which to connect.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Connect(System.String,System.Int32,Nito.KitchenSink.WinInet.InternetConnectHandle.Flags)">
      <summary>
            Connects to the specified FTP server.
            </summary>
      <param name="serverName">Name of the server to which to connect.</param>
      <param name="serverPort">The server port to which to connect.</param>
      <param name="internetConnectFlags">The connection flags, such as <see cref="F:Nito.KitchenSink.WinInet.InternetConnectHandle.Flags.Passive" /> for passive FTP.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Connect(System.String,System.Int32)">
      <summary>
            Connects to the specified FTP server.
            </summary>
      <param name="serverName">Name of the server to which to connect.</param>
      <param name="serverPort">The server port to which to connect.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.CreateDirectory(System.String)">
      <summary>
            Creates the specified directory on the remote FTP server. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect" /> must be called before invoking this method.
            </summary>
      <param name="directory">The directory to create.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.DeleteFile(System.String)">
      <summary>
            Deletes the specified file on the remote FTP server. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect" /> must be called before invoking this method.
            </summary>
      <param name="fileName">The file to delete.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.GetFile(System.String,System.String,System.Boolean,Nito.KitchenSink.WinInet.FtpConnection.FileTransferType)">
      <summary>
            Downloads the specified remote file from the FTP server, saving it at a local path and filename. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect" /> must be called before invoking this method.
            </summary>
      <param name="remoteFile">The remote file to download.</param>
      <param name="localFile">The local path and filename to which to save the file.</param>
      <param name="failIfExists">Whether to fail if the local file specified by <paramref name="localFile" /> already exists.</param>
      <param name="type">The type of file to transfer.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.PutFile(System.String,System.String,Nito.KitchenSink.WinInet.FtpConnection.FileTransferType)">
      <summary>
            Uploads the specified local file to the FTP server, saving it at a remote path and filename. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect" /> must be called before invoking this method.
            </summary>
      <param name="localFile">The local file to upload.</param>
      <param name="remoteFile">The remote path and filename to which to save the file.</param>
      <param name="type">The type of file to transfer.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.RemoveDirectory(System.String)">
      <summary>
            Removes the specified directory from the remote FTP server. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect" /> must be called before invoking this method.
            </summary>
      <param name="directory">The directory to remove.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.RenameFile(System.String,System.String)">
      <summary>
            Renames the specified file on the FTP server. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect" /> must be called before invoking this method.
            </summary>
      <param name="oldName">The old file name.</param>
      <param name="newName">The new file name.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.FindFiles(System.String)">
      <summary>
            Finds matching files on the remote FTP server. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect" /> must be called before invoking this method.
            </summary>
      <param name="search">The search string, which may include wildcards and/or directory information.</param>
      <returns>All files matching the query on the remote FTP server.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.FindFiles">
      <summary>
            Retrieves a directory listing of all files from the current working directory on the remote FTP server. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect" /> must be called before invoking this method.
            </summary>
      <returns>All files in the current working directory on the remote FTP server.</returns>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.SendCommand(System.String)">
      <summary>
            Sends a command directly to the FTP server.
            </summary>
      <param name="command">The command to send to the FTP server.</param>
    </member>
    <member name="M:Nito.KitchenSink.WinInet.FtpConnection.Dispose">
      <summary>
            Closes the FTP connection, aborting any operations that are in progress on another thread. This may be used to abort a  <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect" /> operation as well.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.FtpConnection.InternetHandle">
      <summary>
            Gets the underlying internet handle.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.FtpConnection.FtpHandle">
      <summary>
            Gets the underlying FTP handle. Returns <c>null</c> until <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect" /> is invoked.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.WinInet.FtpConnection.CurrentDirectory">
      <summary>
            Gets or sets the current directory on the remote FTP server. This may be set to an absolute or relative directory. <see cref="O:Nito.KitchenSink.WinInet.FtpConnection.Connect" /> must be called before reading or writing this property.
            </summary>
    </member>
    <member name="E:Nito.KitchenSink.WinInet.FtpConnection.Progress">
      <summary>
            Occurs when progress is made on a requested operation. This delegate may be invoked from within the methods on this class.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.DependencyPropertyAttribute">
      <summary>
            When used with CciSharp, turns an auto-property into a property that supports DependencyProperty. This can only be applied to non-virtual instance properties.
            See http://ccisamples.codeplex.com/wikipage?title=CciSharp.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.SafeDisposable`1">
      <summary>
            Provides a non-throwing implementation of <see cref="M:System.IDisposable.Dispose" /> for a wrapped disposable object.
            </summary>
      <typeparam name="T">The type of object to wrap.</typeparam>
    </member>
    <member name="M:Nito.KitchenSink.SafeDisposable`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.SafeDisposable`1" /> class, wrapping the specified disposable object.
            </summary>
      <param name="value">The disposable object to wrap.</param>
    </member>
    <member name="M:Nito.KitchenSink.SafeDisposable`1.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="P:Nito.KitchenSink.SafeDisposable`1.Value">
      <summary>
            Gets the underlying disposable object.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.GuidVariant">
      <summary>
            Known values for the <see cref="T:System.Guid" /> Variant field.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.GuidVariant.NCSBackwardCompatibility">
      <summary>
            Reserved for NCS backward compatibility.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.GuidVariant.RFC4122">
      <summary>
            A GUID conforming to RFC 4122.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.GuidVariant.MicrosoftBackwardCompatibility">
      <summary>
            Reserved for Microsoft backward compatibility.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.GuidVariant.ReservedForFutureDefinition">
      <summary>
            Reserved for future definition.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.GuidVersion">
      <summary>
            Known values for the <see cref="T:System.Guid" /> Version field.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.GuidVersion.TimeBasedRFC4122">
      <summary>
            Time-based (sequential) GUID.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.GuidVersion.DCESecurityWithEmbeddedPOSIXUIDs">
      <summary>
            DCE Security GUID with embedded POSIX UIDs.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.GuidVersion.NameBasedRFC4122UsingMD5">
      <summary>
            Name-based GUID using the MD5 hashing algorithm.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.GuidVersion.RandomRFC4122">
      <summary>
            Random GUID.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.GuidVersion.NameBasedRFC4122UsingSHA1">
      <summary>
            Name-based GUID using the SHA-1 hashing algorithm.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.GuidExtensions">
      <summary>
            Extension methods for the <see cref="T:System.Guid" /> structure.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.GuidExtensions.GetVariant(System.Guid)">
      <summary>
            Gets the 3-bit Variant field of the GUID.
            </summary>
      <param name="guid">The GUID from which to extract the field.</param>
      <returns>The Variant field of the GUID.</returns>
    </member>
    <member name="M:Nito.KitchenSink.GuidExtensions.GetVersion(System.Guid)">
      <summary>
            Gets the 4-bit Version field of the GUID. This is only valid if <see cref="M:Nito.KitchenSink.GuidExtensions.GetVariant(System.Guid)" /> returns <see cref="F:Nito.KitchenSink.GuidVariant.RFC4122" />.
            </summary>
      <param name="guid">The GUID from which to extract the field.</param>
      <returns>The Version field of the GUID.</returns>
    </member>
    <member name="M:Nito.KitchenSink.GuidExtensions.GetTimestamp(System.Guid)">
      <summary>
            Gets the 60-bit Timestamp field of the GUID. This is only valid if <see cref="M:Nito.KitchenSink.GuidExtensions.GetVersion(System.Guid)" /> returns <see cref="F:Nito.KitchenSink.GuidVersion.TimeBasedRFC4122" />.
            </summary>
      <param name="guid">The GUID from which to extract the field.</param>
      <returns>The Timestamp field of the GUID.</returns>
    </member>
    <member name="M:Nito.KitchenSink.GuidExtensions.GetCreateTime(System.Guid)">
      <summary>
            Gets the date and time that this GUID was created, in UTC. This is only valid if <see cref="M:Nito.KitchenSink.GuidExtensions.GetVersion(System.Guid)" /> returns <see cref="F:Nito.KitchenSink.GuidVersion.TimeBasedRFC4122" />.
            </summary>
      <param name="guid">The GUID from which to extract the field.</param>
      <returns>The date and time that this GUID was created, in UTC.</returns>
    </member>
    <member name="M:Nito.KitchenSink.GuidExtensions.GetClockSequence(System.Guid)">
      <summary>
            Gets the 14-bit Clock Sequence field of the GUID. This is only valid if <see cref="M:Nito.KitchenSink.GuidExtensions.GetVersion(System.Guid)" /> returns <see cref="F:Nito.KitchenSink.GuidVersion.TimeBasedRFC4122" />.
            </summary>
      <param name="guid">The GUID from which to extract the field.</param>
      <returns>The Clock Sequence field of the GUID.</returns>
    </member>
    <member name="M:Nito.KitchenSink.GuidExtensions.GetNode(System.Guid)">
      <summary>
            Gets the 6-byte (48-bit) Node field of the GUID. This is only valid if <see cref="M:Nito.KitchenSink.GuidExtensions.GetVersion(System.Guid)" /> returns <see cref="F:Nito.KitchenSink.GuidVersion.TimeBasedRFC4122" />.
            </summary>
      <param name="guid">The GUID from which to extract the field.</param>
      <returns>The Node field of the GUID.</returns>
    </member>
    <member name="M:Nito.KitchenSink.GuidExtensions.NodeIsMAC(System.Guid)">
      <summary>
            Returns <c>true</c> if the Node field is a MAC address; returns <c>false</c> if the Node field is a random value. This is only valid if <see cref="M:Nito.KitchenSink.GuidExtensions.GetVersion(System.Guid)" /> returns <see cref="F:Nito.KitchenSink.GuidVersion.TimeBasedRFC4122" />.
            </summary>
      <param name="guid">The GUID to inspect.</param>
      <returns>Returns <c>true</c> if the Node field is a MAC address; returns <c>false</c> if the Node field is a random value.</returns>
    </member>
    <member name="M:Nito.KitchenSink.GuidExtensions.GetHash(System.Guid)">
      <summary>
            Gets what remains of the 128-bit MD5 or SHA-1 hash of the name used to create this GUID. This is only valid if <see cref="M:Nito.KitchenSink.GuidExtensions.GetVersion(System.Guid)" /> returns <see cref="F:Nito.KitchenSink.GuidVersion.NameBasedRFC4122UsingMD5" /> or <see cref="F:Nito.KitchenSink.GuidVersion.NameBasedRFC4122UsingSHA1" />. Note that bits 60-63 and bits 70-71 will always be zero (their original values are permanently lost).
            </summary>
      <param name="guid">The GUID from which to extract the hash value.</param>
      <returns>The hash value from the GUID.</returns>
    </member>
    <member name="M:Nito.KitchenSink.GuidExtensions.GetRandom(System.Guid)">
      <summary>
            Gets the 122-bit random value used to create this GUID. This is only valid if <see cref="M:Nito.KitchenSink.GuidExtensions.GetVersion(System.Guid)" /> returns <see cref="F:Nito.KitchenSink.GuidVersion.RandomRFC4122" />. The most-significant 6 bits of the first octet in the returned array are always 0.
            </summary>
      <param name="guid">The GUID from which to extract the random value.</param>
      <returns>The random value of the GUID.</returns>
    </member>
    <member name="T:Nito.KitchenSink.Deque`1">
      <summary>
            A double-ended queue (deque), which provides O(1) indexed access, O(1) removals from the front and back, amortized O(1) insertions to the front and back, and O(N) insertions and removals anywhere else (with the operations getting slower as the index approaches the middle).
            </summary>
      <typeparam name="T">The type of elements contained in the deque.</typeparam>
    </member>
    <member name="F:Nito.KitchenSink.Deque`1.DefaultCapacity">
      <summary>
            The default capacity.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Deque`1.buffer">
      <summary>
            The circular buffer that holds the view. When setting this, <see cref="F:Nito.KitchenSink.Deque`1.view" /> should be set to <c>null</c>.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Deque`1.offset">
      <summary>
            The offset into <see cref="F:Nito.KitchenSink.Deque`1.buffer" /> where the view begins. When setting this, <see cref="F:Nito.KitchenSink.Deque`1.view" /> should be set to <c>null</c>.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Deque`1.count">
      <summary>
            The number of elements in the view.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Deque`1.view">
      <summary>
            The view, cached in a member variable. This may be null, and should be accessed via the <see cref="M:Nito.KitchenSink.Deque`1.View" /> method.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.Deque`1" /> class with the specified capacity.
            </summary>
      <param name="capacity">The initial capacity.</param>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.Deque`1" /> class with the elements from the specified collection.
            </summary>
      <param name="collection">The collection.</param>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.Deque`1" /> class.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.AddToBack(`0)">
      <summary>
            Inserts a single element at the back of this deque.
            </summary>
      <param name="value">The element to insert.</param>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.AddToFront(`0)">
      <summary>
            Inserts a single element at the front of this deque.
            </summary>
      <param name="value">The element to insert.</param>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Inserts a collection of elements into this deque.
            </summary>
      <param name="index">The index at which the collection is inserted.</param>
      <param name="collection">The collection of elements to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index to an insertion point for the source.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of elements from this deque.
            </summary>
      <param name="offset">The index into the deque at which the range begins.</param>
      <param name="count">The number of elements to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset" /> or <paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The range [<paramref name="offset" />, <paramref name="offset" /> + <paramref name="count" />) is not within the range [0, <see cref="P:Nito.KitchenSink.Deque`1.Count" />).</exception>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.RemoveFromBack">
      <summary>
            Removes and returns the last element of this deque.
            </summary>
      <returns>The former last element.</returns>
      <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.RemoveFromFront">
      <summary>
            Removes and returns the first element of this deque.
            </summary>
      <returns>The former first element.</returns>
      <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.Clear">
      <summary>
            Removes all items from this deque.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.DoGetItem(System.Int32)">
      <summary>
            Gets an element at the specified view index.
            </summary>
      <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.DoSetItem(System.Int32,`0)">
      <summary>
            Sets an element at the specified view index.
            </summary>
      <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.DoInsert(System.Int32,`0)">
      <summary>
            Inserts an element at the specified view index.
            </summary>
      <param name="index">The zero-based view index at which the element should be inserted. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.DoRemoveAt(System.Int32)">
      <summary>
            Removes an element at the specified view index.
            </summary>
      <param name="index">The zero-based view index of the element to remove. This index is guaranteed to be valid.</param>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.View">
      <summary>
            Retrieves the rotated view for this deque, with a length equal to <see cref="P:Nito.KitchenSink.Deque`1.Capacity" />. The last <c><see cref="P:Nito.KitchenSink.Deque`1.Capacity" /> - <see cref="P:Nito.KitchenSink.Deque`1.Count" /></c> elements of this view are not valid elements.
            </summary>
      <returns>The rotated view of the deque.</returns>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.PostIncrement(System.Int32)">
      <summary>
            Increments <see cref="F:Nito.KitchenSink.Deque`1.offset" /> by <paramref name="value" /> using modulo-<see cref="P:Nito.KitchenSink.Deque`1.Capacity" /> arithmetic.
            </summary>
      <param name="value">The value by which to increase <see cref="F:Nito.KitchenSink.Deque`1.offset" />. May not be negative.</param>
      <returns>The value of <see cref="F:Nito.KitchenSink.Deque`1.offset" /> after it was incremented.</returns>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.PreDecrement(System.Int32)">
      <summary>
            Decrements <see cref="F:Nito.KitchenSink.Deque`1.offset" /> by <paramref name="value" /> using modulo-<see cref="P:Nito.KitchenSink.Deque`1.Capacity" /> arithmetic.
            </summary>
      <param name="value">The value by which to reduce <see cref="F:Nito.KitchenSink.Deque`1.offset" />. May not be negative or greater than <see cref="P:Nito.KitchenSink.Deque`1.Capacity" />.</param>
      <returns>The value of <see cref="F:Nito.KitchenSink.Deque`1.offset" /> before it was decremented.</returns>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.DoAddToBack(`0)">
      <summary>
            Inserts a single element to the back of the view. <see cref="P:Nito.KitchenSink.Deque`1.IsFull" /> must be false when this method is called.
            </summary>
      <param name="value">The element to insert.</param>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.DoAddToFront(`0)">
      <summary>
            Inserts a single element to the front of the view. <see cref="P:Nito.KitchenSink.Deque`1.IsFull" /> must be false when this method is called.
            </summary>
      <param name="value">The element to insert.</param>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.DoRemoveFromBack">
      <summary>
            Removes and returns the last element in the view. <see cref="P:Nito.KitchenSink.Deque`1.IsEmpty" /> must be false when this method is called.
            </summary>
      <returns>The former last element.</returns>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.DoRemoveFromFront">
      <summary>
            Removes and returns the first element in the view. <see cref="P:Nito.KitchenSink.Deque`1.IsEmpty" /> must be false when this method is called.
            </summary>
      <returns>The former first element.</returns>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.DoInsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Int32)">
      <summary>
            Inserts a range of elements into the view.
            </summary>
      <param name="index">The index into the view at which the elements are to be inserted.</param>
      <param name="collection">The elements to insert.</param>
      <param name="collectionCount">The number of elements in <paramref name="collection" />. Must be greater than zero, and the sum of <paramref name="collectionCount" /> and <see cref="P:Nito.KitchenSink.Deque`1.Count" /> must be less than or equal to <see cref="P:Nito.KitchenSink.Deque`1.Capacity" />.</param>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.DoRemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of elements from the view.
            </summary>
      <param name="index">The index into the view at which the range begins.</param>
      <param name="collectionCount">The number of elements in the range. This must be greater than 0 and less than or equal to <see cref="P:Nito.KitchenSink.Deque`1.Count" />.</param>
    </member>
    <member name="M:Nito.KitchenSink.Deque`1.EnsureCapacityForOneElement">
      <summary>
            Doubles the capacity if necessary to make room for one more element. When this method returns, <see cref="P:Nito.KitchenSink.Deque`1.IsFull" /> is false.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.Deque`1.Capacity">
      <summary>
            Gets or sets the capacity for this deque. This value is always greater than zero; setting it to a value of zero will set it to the default capacity.
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <c>Capacity</c> cannot be set to a value less than <see cref="P:Nito.KitchenSink.Deque`1.Count" />.</exception>
    </member>
    <member name="P:Nito.KitchenSink.Deque`1.Count">
      <summary>
            Gets the number of elements contained in this deque.
            </summary>
      <returns>The number of elements contained in this deque.</returns>
    </member>
    <member name="P:Nito.KitchenSink.Deque`1.IsEmpty">
      <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.Deque`1.IsFull">
      <summary>
            Gets a value indicating whether this instance is at full capacity.
            </summary>
    </member>
    <member name="P:Nito.KitchenSink.Deque`1.IsSplit">
      <summary>
            Gets a value indicating whether the buffer is "split" (meaning the beginning of the view is at a later index in <see cref="F:Nito.KitchenSink.Deque`1.buffer" /> than the end).
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.StreamExtensions">
      <summary>
            Provides methods useful when dealing with streams.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.StreamExtensions.TryGetLength(System.IO.Stream)">
      <summary>
            Attempts to get the length of the stream. Returns -1 if the length of the stream could not be determined.
            </summary>
      <param name="stream">The stream to query.</param>
      <returns>The length of the stream, or -1 if the stream has an undefined length.</returns>
    </member>
    <member name="M:Nito.KitchenSink.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Byte[],System.Action{System.Int64})">
      <summary>
            Synchronously copies the contents of this stream into another stream.
            </summary>
      <param name="source">The stream that is the source of the copy.</param>
      <param name="destination">The stream that is the destination of the copy.</param>
      <param name="buffer">The buffer used by the copy. The size of this buffer determines the sizes of reads and writes made to the streams.</param>
      <param name="progress">A callback method invoked with the number of bytes transferred so far. May be null.</param>
    </member>
    <member name="M:Nito.KitchenSink.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Byte[],System.Action{System.Int64},System.Nullable{System.Threading.CancellationToken})">
      <summary>
            Synchronously copies the contents of this stream into another stream, enabling cancellation.
            </summary>
      <param name="source">The stream that is the source of the copy.</param>
      <param name="destination">The stream that is the destination of the copy.</param>
      <param name="buffer">The buffer used by the copy. The size of this buffer determines the sizes of reads and writes made to the streams.</param>
      <param name="progress">A callback method invoked with the number of bytes transferred so far. May be null.</param>
      <param name="cancellationToken">A cancellation token which may be used to cancel the stream copy. May be null.</param>
    </member>
    <member name="M:Nito.KitchenSink.StreamExtensions.GetConsumingEnumerable(System.IO.Stream,System.Byte[],System.Threading.CancellationToken)">
      <summary>
            Synchronously reads the contents of this stream as a sequence of byte buffers, enabling cancellation.
            </summary>
      <param name="source">The source stream.</param>
      <param name="buffer">The buffer used by the copy. The size of this buffer determines the sizes of reads made to the source stream.</param>
      <param name="cancellationToken">A cancellation token which may be used to cancel the stream copy.</param>
    </member>
    <member name="M:Nito.KitchenSink.StreamExtensions.GetConsumingEnumerable(System.IO.Stream,System.Byte[])">
      <summary>
            Synchronously reads the contents of this stream as a sequence of byte buffers.
            </summary>
      <param name="source">The source stream.</param>
      <param name="buffer">The buffer used by the copy. The size of this buffer determines the sizes of reads made to the source stream.</param>
    </member>
    <member name="T:Nito.KitchenSink.PositionTrackingTextReader`1">
      <summary>
            A wrapper around a source <see cref="T:System.IO.TextReader" />, providing stream position. This class does not perform buffering.
            </summary>
      <typeparam name="T">The type of <see cref="T:System.IO.TextReader" /> being wrapped.</typeparam>
    </member>
    <member name="M:Nito.KitchenSink.PositionTrackingTextReader`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.PositionTrackingTextReader`1" /> class wrapping the specified <see cref="T:System.IO.TextReader" />.
            </summary>
      <param name="source">The source <see cref="T:System.IO.TextReader" /> to wrap.</param>
    </member>
    <member name="M:Nito.KitchenSink.PositionTrackingTextReader`1.Read">
      <summary>
            Reads the next character from the input stream and advances the character position by one character.
            </summary>
      <returns>The next character from the input stream, or -1 if no more characters are available.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="P:Nito.KitchenSink.PositionTrackingTextReader`1.Position">
      <summary>
            Gets the position in the stream (the number of characters that have been read).
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.PeekableTextReader`1">
      <summary>
            A wrapper around a source <see cref="T:System.IO.TextReader" />, providing a single-character buffer. <see cref="M:Nito.KitchenSink.PeekableTextReader`1.Peek" /> only returns <c>-1</c> if the end of the stream is reached. This class does perform buffering.
            </summary>
      <typeparam name="T">The type of <see cref="T:System.IO.TextReader" /> being wrapped.</typeparam>
    </member>
    <member name="F:Nito.KitchenSink.PeekableTextReader`1.buffer">
      <summary>
            The single-character buffer, holding the next character that has been "peeked." If the source <see cref="T:System.IO.TextReader" /> supports peeking, then this member is always <c>null</c>.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.PeekableTextReader`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.PeekableTextReader`1" /> class wrapping the specified <see cref="T:System.IO.TextReader" />.
            </summary>
      <param name="source">The source <see cref="T:System.IO.TextReader" /> to wrap.</param>
    </member>
    <member name="M:Nito.KitchenSink.PeekableTextReader`1.Peek">
      <summary>
            Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the input stream.
            </summary>
      <returns>An integer representing the next character to be read, or -1 if no more characters are available.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:Nito.KitchenSink.PeekableTextReader`1.Read">
      <summary>
            Reads the next character from the input stream and advances the character position by one character.
            </summary>
      <returns>The next character from the input stream, or -1 if no more characters are available.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="P:Nito.KitchenSink.PeekableTextReader`1.BufferCount">
      <summary>
            Gets the buffer count.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.Mathematics.Numeric">
      <summary>
            Provides numerical functions.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Mathematics.Numeric.TruncateAwayFromZero(System.Decimal)">
      <summary>
            Removes the fractional part of a number, rounding it to the nearest integer, moving away from zero.
            </summary>
      <param name="value">The value to truncate.</param>
      <returns>The truncated value.</returns>
    </member>
    <member name="M:Nito.KitchenSink.Mathematics.Numeric.TruncateAwayFromZero(System.Double)">
      <summary>
            Removes the fractional part of a number, rounding it to the nearest integer, moving away from zero.
            </summary>
      <param name="value">The value to truncate.</param>
      <returns>The truncated value.</returns>
    </member>
    <member name="M:Nito.KitchenSink.Mathematics.Numeric.Bisect(System.Decimal@,System.Decimal@,System.Decimal,System.Func{System.Decimal,System.Int32})">
      <summary>
            Determines a root of a function by using the bisection method.
            </summary>
      <param name="low">The initial low-end guess. This value must have a positive fitness function result.</param>
      <param name="high">The initial high-end guess. This value must have a negative fitness function result.</param>
      <param name="accuracy">The required accuracy, if an exact solution isn't found. This may be zero to determine the root to the maximum accuracy supported by the <see cref="T:System.Decimal" /> type. This parameter may not be less than zero.</param>
      <param name="function">The fitness function. Given a guess, this function must return a negative number ("move lower") if the guess is too large; a positive number ("move higher") if the guess is too small; and zero if the guess is just right. It is acceptable to </param>
      <returns>Returns <c>true</c> if the root of the function was found; in this case, <paramref name="low" /> and <paramref name="high" /> are both equal to the root. Returns <c>false</c> if the root was not found; in this case, <paramref name="low" /> and <paramref name="high" /> bracket the root, and the difference between them is less than <c>2*<paramref name="accuracy" /></c></returns>
      <exception cref="T:System.InvalidOperationException">The fitness function <paramref name="function" /> does not converge within the range [<paramref name="low" />, <paramref name="high" />].</exception>
    </member>
    <member name="T:Nito.KitchenSink.PropertyChangedEventHandlerExtensions">
      <summary>
            Provides extension methods for <see cref="T:System.ComponentModel.PropertyChangedEventHandler" /> delegates.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.PropertyChangedEventHandlerExtensions.Raise``2(System.ComponentModel.PropertyChangedEventHandler,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Raises the delegate for the property identified by a lambda expression.
            </summary>
      <typeparam name="TObject">The type of object containing the property.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <param name="handler">The delegate to raise. If this parameter is null, then no action is taken.</param>
      <param name="sender">The object raising this event.</param>
      <param name="expression">The lambda expression identifying the property that changed.</param>
    </member>
    <member name="M:Nito.KitchenSink.PropertyChangedEventHandlerExtensions.RaiseItems(System.ComponentModel.PropertyChangedEventHandler,System.Object)">
      <summary>
            Raises the delegate for the items property (with the name "Items[]").
            </summary>
      <param name="handler">The delegate to raise. If this parameter is null, then no action is taken.</param>
      <param name="sender">The object raising this event.</param>
    </member>
    <member name="M:Nito.KitchenSink.PropertyChangedEventHandlerExtensions.Raise(System.ComponentModel.PropertyChangedEventHandler,System.Object)">
      <summary>
            Raises the delegate for all properties.
            </summary>
      <param name="handler">The delegate to raise. If this parameter is null, then no action is taken.</param>
      <param name="sender">The object raising this event.</param>
    </member>
    <member name="T:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableLexer">
      <summary>
            Parses an input stream into tokens.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableLexer.Tracer">
      <summary>
            The trace source to which messages are written during lexing.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableLexer.fieldSeparator">
      <summary>
            The character used as a field separator.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableLexer.data">
      <summary>
            The source data.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableLexer.#ctor(System.Collections.Generic.IEnumerable{System.Char},System.Char)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableLexer" /> class.
            </summary>
      <param name="data">The delimited text data.</param>
      <param name="fieldSeparator">The field separator character.</param>
    </member>
    <member name="M:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableLexer.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableLexer.Information(System.String)">
      <summary>
            Traces the specified informational message.
            </summary>
      <param name="message">The informational message to trace.</param>
    </member>
    <member name="M:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableLexer.Warning(System.String)">
      <summary>
            Traces the specified warning message.
            </summary>
      <param name="message">The warning message to trace.</param>
    </member>
    <member name="M:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableLexer.ReadUnescapedFieldValue(Nito.KitchenSink.EnumeratorWrapper{System.Char})">
      <summary>
            Reads a single unescaped field data value from the source. The source must be currently positioned on the first character of the field data. On return, the source is either at the end of the input or is positioned on the first character that is not part of the field data.
            </summary>
      <param name="source">The source from which to read.</param>
      <returns>The field data value.</returns>
    </member>
    <member name="M:Nito.KitchenSink.CharacterStreams.DelimitedText.EnumerableLexer.ReadEscapedFieldValue(Nito.KitchenSink.EnumeratorWrapper{System.Char})">
      <summary>
            Reads a single escaped field data value from the source. The source must be currently positioned on the opening double quote of the field data. On return, the source is either at the end of the input or is positioned on the first character that is not part of the field data (past the closing double quote).
            </summary>
      <param name="source">The source from which to read.</param>
      <returns>The field data value.</returns>
    </member>
    <member name="T:Nito.KitchenSink.Communication.SingleByteDelimiterFramer">
      <summary>
            Provides message framing for single-byte-delimiter-based protocols. Does not perform any unescaping of the message data.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.maxMessageSize">
      <summary>
            The maximum size of messages allowed, or 0 if there is no maximum.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.beginDelimiter">
      <summary>
            The beginning delimiter.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.endDelimiter">
      <summary>
            The ending delimiter.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.trace">
      <summary>
            The trace source used for all communications messages.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.dataBuffer">
      <summary>
            The data buffer, which grows dynamically as more data arrives. This is never null.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.sawBeginDelimiter">
      <summary>
            Whether the begin delimiter has been seen.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.#ctor(System.Int32,System.Byte,System.Byte)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.KitchenSink.Communication.SingleByteDelimiterFramer" /> class.
            </summary>
      <param name="maxMessageSize">Maximum size of messages, or 0 if message size is not restricted.</param>
      <param name="beginDelimiter">The begin delimiter.</param>
      <param name="endDelimiter">The end delimiter.</param>
    </member>
    <member name="M:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.Reset">
      <summary>
            Re-initializes the framer instance to a clean state. After this method returns, the framer instance is identical to a newly-constructed instance.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.DataReceived(System.Collections.Generic.IList{System.Byte})">
      <summary>
            Notifies the framer instance that incoming data has been received from the stream. This method will invoke <see cref="E:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.MessageArrived" /> as necessary.
            </summary>
      <remarks>
        <para>This method may invoke <see cref="E:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.MessageArrived" /> zero or more times.</para>
        <para>Zero-length receives are ignored. May streams use a 0-length read to indicate the end of a stream, but the framer takes no action in this case.</para>
      </remarks>
      <param name="data">The data received from the stream. Cannot be null. May be a slice of the read buffer for the stream.</param>
      <exception cref="T:System.Net.ProtocolViolationException">If the data received is not a properly-formed message.</exception>
    </member>
    <member name="M:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.AppendDataToDataBuffer(System.Collections.Generic.IList{System.Byte})">
      <summary>
            Resizes the data buffer and appends the new range of data to it.
            </summary>
      <param name="data">The buffer containing the new data to be appended.</param>
    </member>
    <member name="M:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.CheckMaxMessageSize(System.Int32,System.Int32)">
      <summary>
            Checks for messages that exceed the maximum message size in an overflow-safe way.
            </summary>
      <param name="currentCount">The current size of the message so far.</param>
      <param name="additionalCount">The additional bytes that have arrived as part of this message.</param>
    </member>
    <member name="E:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.MessageArrived">
      <summary>
            Occurs when a message has arrived. Exceptions thrown from this method propogate through <see cref="M:Nito.KitchenSink.Communication.SingleByteDelimiterFramer.DataReceived(System.Collections.Generic.IList{System.Byte})" />, and may leave the framer instance in an invalid state.
            </summary>
    </member>
    <member name="T:Nito.KitchenSink.DisposableExtensions">
      <summary>
            Provides extension methods for <see cref="T:System.IDisposable" /> types.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.DisposableExtensions.ReferenceCounted``1(``0)">
      <summary>
            Wraps this disposable object in a reference-counted disposable wrapper.
            </summary>
      <typeparam name="T">The type of the underlying disposable object.</typeparam>
      <param name="disposable">The underlying disposable object to wrap.</param>
      <returns>A reference-counted disposable wrapper.</returns>
    </member>
    <member name="M:Nito.KitchenSink.DisposableExtensions.IgnoreDisposeExceptions``1(``0)">
      <summary>
            Wraps this disposable object in a wrapper which swallows any exceptions thrown from <see cref="M:System.IDisposable.Dispose" />.
            </summary>
      <typeparam name="T">The type of the underlying disposable object.</typeparam>
      <param name="disposable">The underlying disposable object to wrap.</param>
      <returns>A safe disposable wrapper.</returns>
    </member>
    <member name="T:Nito.KitchenSink.StringExtensions">
      <summary>
            Provides useful extension methods for string operations.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.StringExtensions.csharpEscapeSequences">
      <summary>
            The standard escape sequences defined by the C# language.
            </summary>
    </member>
    <member name="F:Nito.KitchenSink.StringExtensions.prettyEscapeSequences">
      <summary>
            The escape sequences used by "pretty printing".
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.StringExtensions.PrintableEscape(System.String)">
      <summary>
            Returns a flattened, printable C#-escaped equivalent of the input string.
            </summary>
      <param name="source">The source string.</param>
      <returns>A backslash-escaped copy of the source string.</returns>
    </member>
    <member name="M:Nito.KitchenSink.StringExtensions.Printable(System.String)">
      <summary>
            Returns the string itself if it is printable and flattened, otherwise a <see cref="M:Nito.KitchenSink.StringExtensions.PrintableEscape(System.String)" /> copy of the string.
            </summary>
      <param name="source">The source string.</param>
      <returns>The source string or a backslash-escaped copy of the source string.</returns>
    </member>
    <member name="M:Nito.KitchenSink.StringExtensions.PrettyDump(System.Collections.Generic.IEnumerable{System.Byte})">
      <summary>
            Returns a printable string of the byte sequence, interpreting it as ASCII if possible. If the sequence is interpreted as a string, the flattened, escaped string is returned enclosed in double-quotes; otherwise, each byte of the sequence is converted to hex, separated by spaces, and enclosed in square brackets.
            </summary>
      <param name="data">The data to dump.</param>
      <returns>A printable string.</returns>
    </member>
    <member name="M:Nito.KitchenSink.StringExtensions.Flatten(System.String)">
      <summary>
            Replaces any '\r' or '\n' characters in the string with spaces.
            </summary>
      <param name="source">The source string.</param>
      <returns>The flattened string.</returns>
    </member>
    <member name="M:Nito.KitchenSink.StringExtensions.TextElements(System.String)">
      <summary>
            Gets all text elements (Unicode glyphs) for a given string.
            </summary>
      <param name="source">The source string.</param>
      <returns>All the text elements in the source string.</returns>
    </member>
    <member name="M:Nito.KitchenSink.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary>
            Concatenates a separator between each element of a string enumeration.
            </summary>
      <param name="source">The string enumeration.</param>
      <param name="separator">The separator string. This may not be null.</param>
      <returns>The concatenated string.</returns>
    </member>
    <member name="M:Nito.KitchenSink.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Concatenates a sequence of strings.
            </summary>
      <param name="source">The sequence of strings.</param>
      <returns>The concatenated string.</returns>
    </member>
    <member name="T:Nito.KitchenSink.ExtensibleObjects.ExtensionCollectionExtensions">
      <summary>
            Extension methods for extension collections.
            </summary>
    </member>
    <member name="M:Nito.KitchenSink.ExtensibleObjects.ExtensionCollectionExtensions.AddRange(Nito.KitchenSink.ExtensibleObjects.IExtensionCollection,System.Collections.Generic.IEnumerable{Nito.KitchenSink.ExtensibleObjects.IExtension})">
      <summary>
            Adds a sequence of extension objects to an extension collection.
            </summary>
      <param name="this">The extension collection to which to add the extensions.</param>
      <param name="extensions">The sequence of extension objects to add to the extension collection.</param>
    </member>
    <member name="M:Nito.KitchenSink.ExtensibleObjects.ExtensionCollectionExtensions.MoveAllExtensionsTo(Nito.KitchenSink.ExtensibleObjects.IExtensionCollection,Nito.KitchenSink.ExtensibleObjects.IExtensionCollection)">
      <summary>
            Removes all extension objects from this collection and moves them to a new collection.
            </summary>
      <param name="from">The extension collection from which to remove the extensions.</param>
      <param name="to">The extension collection to which to add the extensions.</param>
    </member>
    <member name="T:Nito.KitchenSink.Communication.MessageArrivedEventHandler">
      <summary>
            Receives notification that a message has arrived.
            </summary>
      <param name="message">The message that has arrived. This may contain an alias of the data passed to <see cref="M:Nito.KitchenSink.Communication.IFramer.DataReceived(System.Collections.Generic.IList{System.Byte})" /> in this call stack, but will not contain an alias to any data previously passed to <see cref="M:Nito.KitchenSink.Communication.IFramer.DataReceived(System.Collections.Generic.IList{System.Byte})" />.</param>
    </member>
    <member name="T:Nito.Linq.ListExtensions">
      <summary>
            Extension methods for <see cref="T:Nito.Linq.ISortedList`1" />.
            </summary>
      <summary>
            Provides useful extension methods for the <see cref="T:System.Collections.Generic.List`1" /> class.
            </summary>
      <summary>
            Provides useful extension methods for the <see cref="T:System.Collections.Generic.List`1" /> class.
            </summary>
      <summary>
            Provides useful extension methods for the <see cref="T:System.Collections.Generic.List`1" /> class.
            </summary>
      <summary>
            Provides useful extension methods for the <see cref="T:System.Collections.Generic.List`1" /> class.
            </summary>
      <summary>
            Provides useful extension methods for the <see cref="T:System.Collections.Generic.List`1" /> class.
            </summary>
      <summary>
            Provides useful extension methods for the <see cref="T:System.Collections.Generic.List`1" /> class.
            </summary>
      <summary>
            Provides useful extension methods for lists.
            </summary>
      <summary>
            Provides useful extension methods for the <see cref="T:System.Collections.Generic.List`1" /> class.
            </summary>
    </member>
    <member name="T:Nito.Linq.ListExtensions.ISwappable">
      <summary>
            Non-generic interface that allows swapping list elements.
            </summary>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ISwappable.Swap(System.Int32,System.Int32)">
      <summary>
            Swaps two elements in the list.
            </summary>
      <param name="indexA">The index of the first element to swap.</param>
      <param name="indexB">The index of the second element to swap.</param>
    </member>
    <member name="P:Nito.Linq.ListExtensions.ISwappable.Count">
      <summary>
            Gets the number of elements in this list.
            </summary>
    </member>
    <member name="T:Nito.Linq.ListExtensions.SwappableList`1">
      <summary>
            A wrapper around a generic list that allows swapping elements.
            </summary>
      <typeparam name="T">The type of items contained in the list.</typeparam>
    </member>
    <member name="M:Nito.Linq.ListExtensions.SwappableList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.ListExtensions.SwappableList`1" /> class with a specified source list.
            </summary>
      <param name="source">The source list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.SwappableList`1.Swap(System.Int32,System.Int32)">
      <summary>
            Swaps two elements in the list.
            </summary>
      <param name="indexA">The index of the first element to swap.</param>
      <param name="indexB">The index of the second element to swap.</param>
    </member>
    <member name="P:Nito.Linq.ListExtensions.SwappableList`1.Count">
      <summary>
            Gets the number of elements in this list.
            </summary>
    </member>
    <member name="T:Nito.Linq.ListExtensions.ConcreteList`1">
      <summary>
            Wraps a generic source list, treating it as a non-generic list.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.#ctor(System.Collections.Generic.IList{`0},System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.ListExtensions.ConcreteList`1" /> class.
            </summary>
      <param name="source">The generic source list to wrap.</param>
      <param name="isFixedSize">The fixed-size setting for this list.</param>
      <param name="isReadOnly">The read-only setting for this list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.Clear">
      <summary>
            Removes all items from this list.
            </summary>
      <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.DoGetItem(System.Int32)">
      <summary>
            Gets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.DoSetItem(System.Int32,`0)">
      <summary>
            Sets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.DoInsert(System.Int32,`0)">
      <summary>
            Inserts an element at the specified index.
            </summary>
      <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.DoRemoveAt(System.Int32)">
      <summary>
            Removes an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.ObjectIsT(System.Object)">
      <summary>
            Returns whether or not the type of a given item indicates it is appropriate for storing in this list.
            </summary>
      <param name="item">The item to test.</param>
      <returns>
        <c>true</c> if the item is appropriate to store in this list; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ConcreteList`1.WrongObjectType">
      <summary>
            Returns an exception indicating that the type of an item indicates it is not appropriate for storing in this list.
            </summary>
      <returns>An exception indicating that the type of an item indicates it is not appropriate for storing in this list.</returns>
    </member>
    <member name="P:Nito.Linq.ListExtensions.ConcreteList`1.Count">
      <summary>
            Gets the number of elements contained in this list.
            </summary>
      <returns>The number of elements contained in this list.</returns>
    </member>
    <member name="P:Nito.Linq.ListExtensions.ConcreteList`1.IsReadOnly">
      <summary>
            Gets a value indicating whether this list is read-only.
            </summary>
      <returns>true if this list is read-only; otherwise, false.</returns>
    </member>
    <member name="T:Nito.Linq.ListExtensions.ReadWriteProjectList`2">
      <summary>
            Projects a source list to a result list, and projects the result list back to the source list.
            </summary>
      <typeparam name="TSource">The type of object contained in the source list.</typeparam>
      <typeparam name="TResult">The type of object contained in the resulting list.</typeparam>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ReadWriteProjectList`2.#ctor(System.Collections.Generic.IList{`0},System.Func{`0,`1},System.Func{`1,`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.ListExtensions.ReadWriteProjectList`2" /> class.
            </summary>
      <param name="source">The source list.</param>
      <param name="selector">The projection function from source to result.</param>
      <param name="reverseSelector">The projection function from result to source.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ReadWriteProjectList`2.Clear">
      <summary>
            Removes all elements from the list.
            </summary>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ReadWriteProjectList`2.DoGetItem(System.Int32)">
      <summary>
            Gets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ReadWriteProjectList`2.DoSetItem(System.Int32,`1)">
      <summary>
            Sets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ReadWriteProjectList`2.DoInsert(System.Int32,`1)">
      <summary>
            Inserts an element at the specified index.
            </summary>
      <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ReadWriteProjectList`2.DoRemoveAt(System.Int32)">
      <summary>
            Removes an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
    </member>
    <member name="P:Nito.Linq.ListExtensions.ReadWriteProjectList`2.IsReadOnly">
      <summary>
            Gets a value indicating whether this list is read-only. This list is read-only if its source list is read-only.
            </summary>
      <value>
      </value>
      <returns>true if this list is read-only; otherwise, false.</returns>
    </member>
    <member name="P:Nito.Linq.ListExtensions.ReadWriteProjectList`2.Count">
      <summary>
            Gets the number of elements contained in this list.
            </summary>
      <returns>The number of elements contained in this list.</returns>
    </member>
    <member name="T:Nito.Linq.ListExtensions.SliceList`1">
      <summary>
            Slices a source list.
            </summary>
      <typeparam name="T">The type of object contained in the list.</typeparam>
    </member>
    <member name="M:Nito.Linq.ListExtensions.SliceList`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.ListExtensions.SliceList`1" /> class.
            </summary>
      <param name="source">The source list.</param>
      <param name="offset">The offset into the source list where this slice begins.</param>
      <param name="count">The number of objects in this slice.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.SliceList`1.Clear">
      <summary>
            Removes all elements from the list.
            </summary>
    </member>
    <member name="M:Nito.Linq.ListExtensions.SliceList`1.DoGetItem(System.Int32)">
      <summary>
            Gets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.SliceList`1.DoSetItem(System.Int32,`0)">
      <summary>
            Sets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.SliceList`1.DoInsert(System.Int32,`0)">
      <summary>
            Inserts an element at the specified index.
            </summary>
      <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.SliceList`1.DoRemoveAt(System.Int32)">
      <summary>
            Removes an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
    </member>
    <member name="P:Nito.Linq.ListExtensions.SliceList`1.Count">
      <summary>
            Gets the number of elements contained in this slice.
            </summary>
      <returns>The number of elements contained in this slice.</returns>
    </member>
    <member name="P:Nito.Linq.ListExtensions.SliceList`1.IsReadOnly">
      <summary>
            Gets a value indicating whether this slice is read-only. A slice is read-only if its source list is read-only.
            </summary>
      <returns>true if this slice is read-only; otherwise, false.</returns>
    </member>
    <member name="T:Nito.Linq.ListExtensions.StepList`1">
      <summary>
            Indexes into a source list using a step size.
            </summary>
      <typeparam name="T">The type of object contained in the list.</typeparam>
    </member>
    <member name="M:Nito.Linq.ListExtensions.StepList`1.#ctor(System.Collections.Generic.IList{`0},System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.ListExtensions.StepList`1" /> class.
            </summary>
      <param name="source">The source list.</param>
      <param name="step">The step size to use when traversing the source list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.StepList`1.DoGetItem(System.Int32)">
      <summary>
            Gets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.StepList`1.DoSetItem(System.Int32,`0)">
      <summary>
            Sets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="P:Nito.Linq.ListExtensions.StepList`1.Count">
      <summary>
            Gets the number of elements contained in this list.
            </summary>
      <value>
      </value>
      <returns>The number of elements contained in this list.</returns>
    </member>
    <member name="T:Nito.Linq.ListExtensions.GenericList`1">
      <summary>
            Wraps a non-generic source list, treating it as a generic list.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="M:Nito.Linq.ListExtensions.GenericList`1.#ctor(System.Collections.IList,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.ListExtensions.GenericList`1" /> class with the specified source and read-only setting.
            </summary>
      <param name="source">The non-generic source list to wrap.</param>
      <param name="isReadOnly">The read-only setting for this list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.GenericList`1.Clear">
      <summary>
            Removes all items from this list.
            </summary>
      <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
    </member>
    <member name="M:Nito.Linq.ListExtensions.GenericList`1.DoGetItem(System.Int32)">
      <summary>
            Gets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.GenericList`1.DoSetItem(System.Int32,`0)">
      <summary>
            Sets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.GenericList`1.DoInsert(System.Int32,`0)">
      <summary>
            Inserts an element at the specified index.
            </summary>
      <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.GenericList`1.DoRemoveAt(System.Int32)">
      <summary>
            Removes an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
    </member>
    <member name="P:Nito.Linq.ListExtensions.GenericList`1.Count">
      <summary>
            Gets the number of elements contained in this list.
            </summary>
      <returns>The number of elements contained in this list.</returns>
    </member>
    <member name="P:Nito.Linq.ListExtensions.GenericList`1.IsReadOnly">
      <summary>
            Gets a value indicating whether this list is read-only.
            </summary>
      <returns>true if this list is read-only; otherwise, false.</returns>
    </member>
    <member name="T:Nito.Linq.ListExtensions.ConcatList`1">
      <summary>
            Concatenates a list of source lists into a single list.
            </summary>
      <typeparam name="T">The type of object contained in the list.</typeparam>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ConcatList`1.#ctor(System.Collections.Generic.IList{System.Collections.Generic.IList{`0}})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.ListExtensions.ConcatList`1" /> class with the specified source lists.
            </summary>
      <param name="sources">The source lists to concatenate.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ConcatList`1.Clear">
      <summary>
            Removes all elements from the list.
            </summary>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ConcatList`1.DoGetItem(System.Int32)">
      <summary>
            Gets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ConcatList`1.DoSetItem(System.Int32,`0)">
      <summary>
            Sets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ConcatList`1.DoInsert(System.Int32,`0)">
      <summary>
            Inserts an element at the specified index.
            </summary>
      <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ConcatList`1.DoRemoveAt(System.Int32)">
      <summary>
            Removes an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ConcatList`1.FindExistingIndex(System.Int32,System.Collections.Generic.IList{`0}@,System.Int32@)">
      <summary>
            Finds the source list and its index for accessing a specified concatenated index.
            </summary>
      <param name="concatIndex">The concatenated index.</param>
      <param name="source">On return, holds the source list corresponding to the concatenated index.</param>
      <param name="sourceIndex">On return, holds the source list index corresponding to the concatenated index.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ConcatList`1.FindNewIndex(System.Int32,System.Collections.Generic.IList{`0}@,System.Int32@)">
      <summary>
            Finds the source list and its index for inserting at a specified concatenated index.
            </summary>
      <param name="concatIndex">The concatenated index at which to insert.</param>
      <param name="source">On return, holds the source list corresponding to the concatenated index.</param>
      <param name="sourceIndex">On return, holds the source list index corresponding to the concatenated index.</param>
    </member>
    <member name="P:Nito.Linq.ListExtensions.ConcatList`1.IsReadOnly">
      <summary>
            Gets a value indicating whether this list is read-only. This list is read-only if any of its source lists are read-only.
            </summary>
      <returns>true if this list is read-only; otherwise, false.</returns>
    </member>
    <member name="P:Nito.Linq.ListExtensions.ConcatList`1.Count">
      <summary>
            Gets the number of elements contained in this list.
            </summary>
      <returns>The number of elements contained in this list.</returns>
    </member>
    <member name="T:Nito.Linq.ListExtensions.ReverseList`1">
      <summary>
            Reverses a source list.
            </summary>
      <typeparam name="T">The type of object contained in the list.</typeparam>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ReverseList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.ListExtensions.ReverseList`1" /> class over the specified source list.
            </summary>
      <param name="source">The source list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ReverseList`1.Clear">
      <summary>
            Removes all elements from the list.
            </summary>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ReverseList`1.DoGetItem(System.Int32)">
      <summary>
            Gets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ReverseList`1.DoSetItem(System.Int32,`0)">
      <summary>
            Sets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ReverseList`1.DoInsert(System.Int32,`0)">
      <summary>
            Inserts an element at the specified index.
            </summary>
      <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.ReverseList`1.DoRemoveAt(System.Int32)">
      <summary>
            Removes an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
    </member>
    <member name="P:Nito.Linq.ListExtensions.ReverseList`1.Count">
      <summary>
            Gets the number of elements contained in this list.
            </summary>
      <value>
      </value>
      <returns>The number of elements contained in this list.</returns>
    </member>
    <member name="P:Nito.Linq.ListExtensions.ReverseList`1.IsReadOnly">
      <summary>
            Gets a value indicating whether this list is read-only. This list is read-only iff its source list is read-only.
            </summary>
      <returns>true if this list is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.AsSwappable``1(System.Collections.Generic.IList{``0})">
      <summary>
            Provides a non-generic <see cref="T:Nito.Linq.ListExtensions.ISwappable" /> interface for the source list.
            </summary>
      <typeparam name="T">The type of elements in the source list.</typeparam>
      <param name="source">The source list.</param>
      <returns>A non-generic <see cref="T:Nito.Linq.ListExtensions.ISwappable" /> interface for the source list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
      <summary>
            Swaps two elements in-place in the source list.
            </summary>
      <typeparam name="T">The type of elements in the source list.</typeparam>
      <param name="source">The source list.</param>
      <param name="indexA">The index of the first element to swap.</param>
      <param name="indexB">The index of the second element to swap.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.SwapAll``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{Nito.Linq.ListExtensions.ISwappable},System.Int32,System.Int32)">
      <summary>
            Swaps two element positions in-place in the source list and in a sequence of swappable lists.
            </summary>
      <typeparam name="T">The type of elements in the source list.</typeparam>
      <param name="source">The source list.</param>
      <param name="others">Other lists to keep in sync with the source list.</param>
      <param name="indexA">The index of the first element position to swap.</param>
      <param name="indexB">The index of the second element position to swap.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.AsList``1(System.Collections.Generic.IList{``0})">
      <summary>
            Returns the source typed as <see cref="T:System.Collections.Generic.IList`1" />. This method has no effect other than to restrict the compile-time type of an object implementing <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="list" />.</typeparam>
      <param name="list">The source list.</param>
      <returns>The source list, typed as <see cref="T:System.Collections.Generic.IList`1" />.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.AsList``1(System.Collections.IList,System.Boolean)">
      <summary>
            Casts or converts a non-generic <see cref="T:System.Collections.IList" /> object into a strongly-typed list.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="list">The non-generic source list to cast or wrap.</param>
      <param name="isReadOnly">Whether the wrapper should return <c>true</c> for <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />, if a wrapper is used.</param>
      <returns>The source list, if it implements <see cref="T:System.Collections.Generic.IList`1" />; otherwise, a wrapper around the source list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.AsList``1(System.Collections.IList)">
      <summary>
            Casts or converts a non-generic <see cref="T:System.Collections.IList" /> object into a strongly-typed list. If a wrapper is used, then the wrapper will return <c>true</c> for <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="list">The non-generic source list to cast or wrap.</param>
      <returns>The source list, if it implements <see cref="T:System.Collections.Generic.IList`1" />; otherwise, a wrapper around the source list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.AsConcreteList``1(System.Collections.Generic.IList{``0},System.Boolean,System.Boolean)">
      <summary>
            Casts or converts a generic <see cref="T:System.Collections.Generic.IList`1" /> into a non-generic <see cref="T:System.Collections.IList" /> object.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="list">The generic source list to cast or wrap.</param>
      <param name="isFixedSize">Whether the wrapper should return <c>true</c> for <see cref="P:System.Collections.IList.IsFixedSize" />, if a wrapper is used.</param>
      <param name="isReadOnly">Whether the wrapper should return <c>true</c> for <see cref="P:System.Collections.IList.IsReadOnly" />, if a wrapper is used.</param>
      <returns>The source list, if it implements <see cref="T:System.Collections.IList" />; otherwise, a wrapper around the source list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.AsConcreteList``1(System.Collections.Generic.IList{``0})">
      <summary>
            Casts or converts a generic <see cref="T:System.Collections.Generic.IList`1" /> into a non-generic <see cref="T:System.Collections.IList" /> object. If a wrapper is used, then the wrapper will return <c>true</c> for <see cref="P:System.Collections.IList.IsFixedSize" /> and <see cref="P:System.Collections.IList.IsReadOnly" />.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="list">The generic source list to cast or wrap.</param>
      <returns>The source list, if it implements <see cref="T:System.Collections.IList" />; otherwise, a wrapper around the source list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.AsReadOnly``1(System.Collections.Generic.IList{``0})">
      <summary>
            Returns a read-only list wrapper for a given list.
            </summary>
      <typeparam name="T">The type of elements in the source list.</typeparam>
      <param name="list">The source list.</param>
      <returns>A read-only wrapper for the source list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.Select``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
      <summary>
            Projects the elements of a specified list into a result list.
            </summary>
      <typeparam name="TSource">The type of the elements in the source list.</typeparam>
      <typeparam name="TResult">The type of the elements in the resulting list.</typeparam>
      <param name="list">The source list.</param>
      <param name="selector">The projection delegate.</param>
      <returns>The projected list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.Select``2(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,``1})">
      <summary>
            Projects the elements of a specified list into a result list.
            </summary>
      <typeparam name="TSource">The type of the elements in the source list.</typeparam>
      <typeparam name="TResult">The type of the elements in the resulting list.</typeparam>
      <param name="list">The source list.</param>
      <param name="selector">The projection delegate, which takes the index of the item as its second parameter.</param>
      <returns>The projected list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.Select``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Func{``1,``0})">
      <summary>
            Projects the elements of a specified list into a result list that supports updating.
            </summary>
      <typeparam name="TSource">The type of the elements in the source list.</typeparam>
      <typeparam name="TResult">The type of the elements in the resulting list.</typeparam>
      <param name="list">The source list.</param>
      <param name="selector">The projection delegate from source elements to result elements.</param>
      <param name="reverseSelector">The projection delegate from result elements to source elements.</param>
      <returns>The projected list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.Skip``1(System.Collections.Generic.IList{``0},System.Int32)">
      <summary>
            Returns a sliced list, which acts as a window into a subset of the original list.
            </summary>
      <typeparam name="T">The type of object contained in the list.</typeparam>
      <param name="list">The list to slice.</param>
      <param name="offset">The offset into the list at which the slice begins. If <paramref name="offset" /> is less than or equal to zero, then a list equivalent to the source list is returned; if <paramref name="offset" /> is greater than or equal to the count of the source list, then an empty list is returned.</param>
      <returns>A list that is a slice of the source list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.Take``1(System.Collections.Generic.IList{``0},System.Int32)">
      <summary>
            Returns a sliced list, which acts as a window into a subset of the original list.
            </summary>
      <typeparam name="T">The type of object contained in the list.</typeparam>
      <param name="list">The list to slice.</param>
      <param name="count">The number of elements in the slice. If <paramref name="count" /> is less than or equal to zero, then an empty list is returned; if <paramref name="count" /> is greater than or equal to the count of the source list, then a list equivalent to the source list is returned.</param>
      <returns>A list that is a slice of the source list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.Slice``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
      <summary>
            Returns a sliced list, which acts as a window into a subset of the original list. Similar to Skip followed by Take, only this has tighter restrictions on the <paramref name="offset" /> and <paramref name="count" /> parameters.
            </summary>
      <typeparam name="T">The type of object contained in the list.</typeparam>
      <param name="list">The list to slice.</param>
      <param name="offset">The offset into the list at which the slice begins. Must be a valid index into the source list, or equal to the count of the source list.</param>
      <param name="count">The number of elements in the slice. May not be less than zero. If count is greater than 0, then every value in the range [offset, offset + count) must be valid indexes into the source list.</param>
      <returns>A list that is a slice of the source list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.Step``1(System.Collections.Generic.IList{``0},System.Int32)">
      <summary>
            Steps through a list using a specified step size. The first element of the resulting list is the first element of the source list.
            </summary>
      <typeparam name="T">The type of object contained in the list.</typeparam>
      <param name="list">The list to step through.</param>
      <param name="step">The step size. Must be greater than 0.</param>
      <returns>The stepped list.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="step" /> is less than or equal to 0.</exception>
    </member>
    <member name="M:Nito.Linq.ListExtensions.Reverse``1(System.Collections.Generic.IList{``0})">
      <summary>
            Returns a list that acts as though the list has been reversed.
            </summary>
      <typeparam name="T">The type of elements contained in the list.</typeparam>
      <param name="list">The source list.</param>
      <returns>The reverse list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.Repeat``1(System.Collections.Generic.IList{``0},System.Int32)">
      <summary>
            Repeats a list of values a specified number of times.
            </summary>
      <typeparam name="T">The type of object contained in the list.</typeparam>
      <param name="list">The list of values to repeat.</param>
      <param name="count">The number of times to repeat all elements in the source list. If <paramref name="count" /> is less than or equal to 0, an empty list is returned.</param>
      <returns>A list containing the source list repeated the specified number of times.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.Concat``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0}[])">
      <summary>
            Concatenates the specified lists.
            </summary>
      <typeparam name="T">The type of elements in the source lists.</typeparam>
      <param name="list">The first source list to concatenate.</param>
      <param name="others">The other source lists to concatenate.</param>
      <returns>The concatenated list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.Concat``1(System.Collections.Generic.IList{System.Collections.Generic.IList{``0}})">
      <summary>
            Concatenates the specified lists.
            </summary>
      <typeparam name="T">The type of elements in the source lists.</typeparam>
      <param name="lists">The source lists to concatenate.</param>
      <returns>The concatenated list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.FlattenList``1(System.Collections.Generic.IList{System.Collections.Generic.IList{``0}})">
      <summary>
            Flattens a list of lists into one long list.
            </summary>
      <typeparam name="T">The type of elements in the resulting list.</typeparam>
      <param name="list">The list of lists.</param>
      <returns>The flattened list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.Zip``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Func{``0,``1,``2})">
      <summary>
            Combines two source lists into a result list. If the source lists are of different lengths, the resulting list has a length equal to the smaller of the two.
            </summary>
      <typeparam name="TFirst">The type of elements in the first source list.</typeparam>
      <typeparam name="TSecond">The type of elements in the second source list.</typeparam>
      <typeparam name="TResult">The type of elements in the resulting list.</typeparam>
      <param name="first">The first source list.</param>
      <param name="second">The second source list.</param>
      <param name="zipper">The delegate that creates a new element from corresponding elements of the two source lists.</param>
      <returns>The combined list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.Zip``4(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Func{``0,``1,``2,``3})">
      <summary>
            Combines three source lists into a result list. If the source lists are of different lengths, the resulting list has a length equal to the smallest of the three.
            </summary>
      <typeparam name="TFirst">The type of elements in the first source list.</typeparam>
      <typeparam name="TSecond">The type of elements in the second source list.</typeparam>
      <typeparam name="TThird">The type of elements in the third source list.</typeparam>
      <typeparam name="TResult">The type of elements in the resulting list.</typeparam>
      <param name="first">The first source list.</param>
      <param name="second">The second source list.</param>
      <param name="third">The third source list.</param>
      <param name="zipper">The delegate that creates a new element from corresponding elements of the two source lists.</param>
      <returns>The combined list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.Rotate``1(System.Collections.Generic.IList{``0},System.Int32)">
      <summary>
            Rotates a list by a given offset.
            </summary>
      <typeparam name="T">The type of elements in the source list.</typeparam>
      <param name="list">The source list.</param>
      <param name="offset">The number of elements to rotate. If <paramref name="offset" /> is less than or equal to 0, or if <paramref name="offset" /> is greater than or equal to the number of elements in the list, then the result of this method is identical to the source list.</param>
      <returns>The rotated list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.RandomShuffle``1(System.Collections.Generic.IList{``0},System.Func{System.Int32,System.Int32},Nito.Linq.ListExtensions.ISwappable[])">
      <summary>
            Randomly reorders the elements of a list in-place using the specified random number generator delegate.
            </summary>
      <typeparam name="T">The type of elements in the source list.</typeparam>
      <param name="list">The source list.</param>
      <param name="randomNumberGenerator">The random number generator delegate; when invoked with a value <c>n</c>, this delegate must return a random number in the range [0, n).</param>
      <param name="others">Other lists to be kept in sync with the randomized list. As <paramref name="list" /> is randomized, the same relative elements are rearranged in these lists.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.RandomShuffle``1(System.Collections.Generic.IList{``0},System.Random,Nito.Linq.ListExtensions.ISwappable[])">
      <summary>
            Randomly reorders the elements of a list in-place using the specified random number generator.
            </summary>
      <typeparam name="T">The type of elements in the source list.</typeparam>
      <param name="list">The source list.</param>
      <param name="randomNumberGenerator">The random number generator.</param>
      <param name="others">Other lists to be kept in sync with the randomized list. As <paramref name="list" /> is randomized, the same relative elements are rearranged in these lists.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.RandomShuffle``1(System.Collections.Generic.IList{``0},Nito.Linq.ListExtensions.ISwappable[])">
      <summary>
            Randomly reorders the elements of a list in-place using the default pseudo-random number generator.
            </summary>
      <typeparam name="T">The type of elements in the source list.</typeparam>
      <param name="list">The source list.</param>
      <param name="others">Other lists to be kept in sync with the randomized list. As <paramref name="list" /> is randomized, the same relative elements are rearranged in these lists.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.RandomShuffleIndirect``1(System.Collections.Generic.IList{``0},System.Func{System.Int32,System.Int32},Nito.Linq.ListExtensions.ISwappable[])">
      <summary>
            Creates and returns a view of the source list in which the elements are in a random order, using the specified random number generator delegate.
            </summary>
      <typeparam name="T">The type of elements in the source list.</typeparam>
      <param name="list">The source list. As long as the returned view is referenced, the size of the source list should not change.</param>
      <param name="randomNumberGenerator">The random number generator delegate; when invoked with a value <c>n</c>, this delegate must return a random number in the range [0, n).</param>
      <param name="others">Other lists to be kept in sync with the randomized view. As the view is randomized, the same relative elements are rearranged in these lists.</param>
      <returns>The randomized view of the source list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.RandomShuffleIndirect``1(System.Collections.Generic.IList{``0},System.Random,Nito.Linq.ListExtensions.ISwappable[])">
      <summary>
            Creates and returns a view of the source list in which the elements are in a random order, using the specified random number generator.
            </summary>
      <typeparam name="T">The type of elements in the source list.</typeparam>
      <param name="list">The source list. As long as the returned view is referenced, the size of the source list should not change.</param>
      <param name="randomNumberGenerator">The random number generator.</param>
      <param name="others">Other lists to be kept in sync with the randomized view. As the view is randomized, the same relative elements are rearranged in these lists.</param>
      <returns>The randomized view of the source list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.RandomShuffleIndirect``1(System.Collections.Generic.IList{``0},Nito.Linq.ListExtensions.ISwappable[])">
      <summary>
            Creates and returns a view of the source list in which the elements are in a random order, using the default pseudo-random number generator.
            </summary>
      <typeparam name="T">The type of elements in the source list.</typeparam>
      <param name="list">The source list. As long as the returned view is referenced, the size of the source list should not change.</param>
      <param name="others">Other lists to be kept in sync with the randomized view. As the view is randomized, the same relative elements are rearranged in these lists.</param>
      <returns>The randomized view of the source list.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.LastIndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
      <summary>
            Determines the index of the last matching element in a list.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="list" />.</typeparam>
      <param name="list">The list in which to locate the value.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
      <returns>The index of the last element that returned true from <paramref name="match" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.LastIndexOf``1(System.Collections.Generic.IList{``0},``0)">
      <summary>
            Determines the index of the last matching element in a list.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="list" />.</typeparam>
      <param name="list">The list in which to locate the value.</param>
      <param name="value">The value to locate in the list.</param>
      <returns>The index of the last instance of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.Last``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the last element of a list that satisfies a specified condition.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="list" />.</typeparam>
      <param name="list">The list in which to locate the value.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
      <returns>The last element of the list that returned true from <paramref name="match" />.</returns>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition.</exception>
    </member>
    <member name="M:Nito.Linq.ListExtensions.LastOrDefault``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the last element of a list that satisfies a specified condition, or a default value if no element is found.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="list" />.</typeparam>
      <param name="list">The list in which to locate the value.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
      <returns>The last element of the list that returned true from <paramref name="match" />, or <c>default(T)</c> if no element is found.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.CopyTo``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
      <summary>
            Copies a range of the list to a range in a destination list. The elements are copied in index order.
            </summary>
      <typeparam name="T">The type of elements contained in the lists.</typeparam>
      <param name="list">The source list.</param>
      <param name="index">The zero-based index into the source list at which copying begins.</param>
      <param name="destination">The destination list.</param>
      <param name="destinationIndex">The zero-based index into the destination list at which copying begins.</param>
      <param name="count">The number of elements to copy.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.CopyTo``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Int32)">
      <summary>
            Copies the entire list to a destination list, starting at the specified index of the destination list. The elements are copied in index order.
            </summary>
      <typeparam name="T">The type of elements contained in the lists.</typeparam>
      <param name="list">The source list.</param>
      <param name="destination">The destination list.</param>
      <param name="destinationIndex">The zero-based index into the destination list at which copying begins.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.CopyTo``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
      <summary>
            Copies the entire list to a destination list, starting at the beginning of the destination list. The elements are copied in index order.
            </summary>
      <typeparam name="T">The type of elements contained in the lists.</typeparam>
      <param name="list">The source list.</param>
      <param name="destination">The destination list.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.CopyBackward``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
      <summary>
            Copies a range of the list to a range in a destination list. The elements are copied in reverse index order.
            </summary>
      <typeparam name="T">The type of elements contained in the lists.</typeparam>
      <param name="list">The source list.</param>
      <param name="index">The zero-based index into the source list at which copying begins.</param>
      <param name="destination">The destination list.</param>
      <param name="destinationIndex">The zero-based index into the destination list at which copying begins.</param>
      <param name="count">The number of elements to copy.</param>
    </member>
    <member name="M:Nito.Linq.ListExtensions.SequenceEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Compares two sequences and determines if they are equal, using the specified element equality comparer.
            </summary>
      <typeparam name="T">The type of elements contained in the lists.</typeparam>
      <param name="list">The first source list.</param>
      <param name="other">The second source list.</param>
      <param name="comparer">The comparison object used to compare elements for equality.</param>
      <returns>
        <c>true</c> if every element in both lists are equal; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nito.Linq.ListExtensions.SequenceEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
      <summary>
            Compares two sequences and determines if they are equal, using the default element equality comparer.
            </summary>
      <typeparam name="T">The type of elements contained in the lists.</typeparam>
      <param name="list">The first source list.</param>
      <param name="other">The second source list.</param>
      <returns>
        <c>true</c> if every element in both lists are equal; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:Nito.Linq.Implementation.ListBase`1">
      <summary>
            Provides common implementations of some list methods.
            </summary>
      <typeparam name="T">The type of element contained in the list.</typeparam>
    </member>
    <member name="M:Nito.Linq.Implementation.ListBase`1.Insert(System.Int32,`0)">
      <summary>
            Inserts an item to this list at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into this list.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in this list.
            </exception>
      <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
    </member>
    <member name="M:Nito.Linq.Implementation.ListBase`1.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in this list.
            </exception>
      <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
    </member>
    <member name="M:Nito.Linq.Implementation.ListBase`1.Clear">
      <summary>
            Removes all items from this list.
            </summary>
      <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
    </member>
    <member name="M:Nito.Linq.Implementation.ListBase`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in this list.
            </summary>
      <param name="item">The object to locate in this list.</param>
      <returns>The index of <paramref name="item" /> if found in this list; otherwise, -1.</returns>
    </member>
    <member name="M:Nito.Linq.Implementation.ListBase`1.Add(`0)">
      <summary>
            Adds an item to the end of this list.
            </summary>
      <param name="item">The object to add to this list.</param>
      <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
    </member>
    <member name="M:Nito.Linq.Implementation.ListBase`1.Contains(`0)">
      <summary>
            Determines whether this list contains a specific value.
            </summary>
      <param name="item">The object to locate in this list.</param>
      <returns>
            true if <paramref name="item" /> is found in this list; otherwise, false.
            </returns>
    </member>
    <member name="M:Nito.Linq.Implementation.ListBase`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the elements of this list to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from this slice. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
    </member>
    <member name="M:Nito.Linq.Implementation.ListBase`1.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific object from this list.
            </summary>
      <param name="item">The object to remove from this list.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from this list; otherwise, false. This method also returns false if <paramref name="item" /> is not found in this list.
            </returns>
      <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
    </member>
    <member name="M:Nito.Linq.Implementation.ListBase`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Nito.Linq.Implementation.ListBase`1.DoGetItem(System.Int32)">
      <summary>
            Gets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:Nito.Linq.Implementation.ListBase`1.DoSetItem(System.Int32,`0)">
      <summary>
            Sets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.Implementation.ListBase`1.DoInsert(System.Int32,`0)">
      <summary>
            Inserts an element at the specified index.
            </summary>
      <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.Implementation.ListBase`1.DoRemoveAt(System.Int32)">
      <summary>
            Removes an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
    </member>
    <member name="P:Nito.Linq.Implementation.ListBase`1.Count">
      <summary>
            Gets the number of elements contained in this list.
            </summary>
      <returns>The number of elements contained in this list.</returns>
    </member>
    <member name="P:Nito.Linq.Implementation.ListBase`1.IsReadOnly">
      <summary>
            Gets a value indicating whether this list is read-only. This implementation always returns <c>false</c>.
            </summary>
      <returns>true if this list is read-only; otherwise, false.</returns>
    </member>
    <member name="P:Nito.Linq.Implementation.ListBase`1.Item(System.Int32)">
      <summary>
            Gets or sets the item at the specified index.
            </summary>
      <param name="index">The index of the item to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in this list.
            </exception>
      <exception cref="T:System.NotSupportedException">
            This property is set and the list is read-only.
            </exception>
    </member>
    <member name="T:Nito.Linq.Implementation.ReadOnlyListBase`1">
      <summary>
            Provides implementations of most list methods, for any list types that either do not allow item modification OR do not allow list modification. The default implementations of the methods in this class do not allow either.
            </summary>
      <typeparam name="T">The type of item contained in the list.</typeparam>
    </member>
    <member name="M:Nito.Linq.Implementation.ReadOnlyListBase`1.Clear">
      <summary>
            Removes all elements from the list. This implementation always throws <see cref="T:System.NotSupportedException" />.
            </summary>
    </member>
    <member name="M:Nito.Linq.Implementation.ReadOnlyListBase`1.ReadOnlyException">
      <summary>
            Returns an exception stating that this list is read-only.
            </summary>
      <returns>A <see cref="T:System.NotSupportedException" /> indicating that the list is read-only.</returns>
    </member>
    <member name="M:Nito.Linq.Implementation.ReadOnlyListBase`1.DoSetItem(System.Int32,`0)">
      <summary>
            Sets an element at the specified index. This implementation always throws <see cref="T:System.NotSupportedException" />.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.Implementation.ReadOnlyListBase`1.DoInsert(System.Int32,`0)">
      <summary>
            Inserts an element at the specified index. This implementation always throws <see cref="T:System.NotSupportedException" />.
            </summary>
      <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.Implementation.ReadOnlyListBase`1.DoRemoveAt(System.Int32)">
      <summary>
            Removes an element at the specified index. This implementation always throws <see cref="T:System.NotSupportedException" />.
            </summary>
      <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
    </member>
    <member name="P:Nito.Linq.Implementation.ReadOnlyListBase`1.IsReadOnly">
      <summary>
            Gets a value indicating whether this list is read-only. This implementation always returns <c>true</c>.
            </summary>
      <value>
      </value>
      <returns>true if this list is read-only; otherwise, false.</returns>
    </member>
    <member name="T:Nito.Linq.SortedEnumerableSource">
      <summary>
            Sorted sequence sources.
            </summary>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableSource.Empty``1(System.Collections.Generic.IComparer{``0})">
      <summary>
            Creates a sorted, empty sequence. The sequence is sorted by the specified comparison object.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="comparer">The comparison object.</param>
      <returns>The sorted, empty sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableSource.Empty``1">
      <summary>
            Creates a sorted, empty sequence. The sequence is sorted by the default comparison object.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <returns>The sorted, empty sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableSource.Empty``1(System.Func{``0,``0,System.Int32})">
      <summary>
            Creates a sorted, empty sequence. The sequence is sorted by the specified comparison delegate.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="comparer">The comparison delegate.</param>
      <returns>The sorted, empty sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableSource.Return``1(``0,System.Collections.Generic.IComparer{``0})">
      <summary>
            Converts a single value into a sorted sequence containing a single value. The sequence is treated as though it were sorted by the specified comparison object.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <param name="comparer">The comparison object that defines how the sequence is sorted.</param>
      <returns>A sorted sequence containing a single element, <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableSource.Return``1(``0)">
      <summary>
            Converts a single value into a sorted sequence containing a single value. The sequence is treated as though it were sorted by the default comparison object.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <returns>A sorted sequence containing a single element, <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableSource.Return``1(``0,System.Func{``0,``0,System.Int32})">
      <summary>
            Converts a single value into a sorted sequence containing a single value. The sequence is treated as though it were sorted by the specified comparison delegate.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <param name="comparer">The comparison delegate that defines how the sequence is sorted.</param>
      <returns>A sorted sequence containing a single element, <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableSource.Repeat``1(``0,System.Collections.Generic.IComparer{``0},System.Int32)">
      <summary>
            Converts a single value into a sorted sequence containing that value the specified number of times. The sequence is treated as though it were sorted by the specified comparison object.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <param name="comparer">The comparison object that defines how the sequence is sorted.</param>
      <param name="count">The number of times <paramref name="source" /> is repeated. If <paramref name="count" /> is less than or equal to 0, an empty sequence is returned.</param>
      <returns>A sorted sequence containing <paramref name="count" /> elements, all equal to <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableSource.Repeat``1(``0,System.Int32)">
      <summary>
            Converts a single value into a sorted sequence containing that value the specified number of times. The sequence is treated as though it were sorted by the default comparison object.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <param name="count">The number of times <paramref name="source" /> is repeated. If <paramref name="count" /> is less than or equal to 0, an empty sequence is returned.</param>
      <returns>A sorted sequence containing <paramref name="count" /> elements, all equal to <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableSource.Repeat``1(``0,System.Func{``0,``0,System.Int32},System.Int32)">
      <summary>
            Converts a single value into a sorted sequence containing that value the specified number of times. The sequence is treated as though it were sorted by the specified comparison delegate.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <param name="comparer">The comparison delegate that defines how the sequence is sorted.</param>
      <param name="count">The number of times <paramref name="source" /> is repeated. If <paramref name="count" /> is less than or equal to 0, an empty sequence is returned.</param>
      <returns>A sorted sequence containing <paramref name="count" /> elements, all equal to <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableSource.Repeat``1(``0,System.Collections.Generic.IComparer{``0})">
      <summary>
            Converts a single value into a sorted sequence containing that value an infinite number of times. The sequence is treated as though it were sorted by the specified comparison object.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <param name="comparer">The comparison object that defines how the sequence is sorted.</param>
      <returns>A sorted sequence containing an infinite number of elements, all equal to <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableSource.Repeat``1(``0)">
      <summary>
            Converts a single value into a sorted sequence containing that value an infinite number of times. The sequence is treated as though it were sorted by the default comparison object.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <returns>A sorted sequence containing an infinite number of elements, all equal to <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableSource.Repeat``1(``0,System.Func{``0,``0,System.Int32})">
      <summary>
            Converts a single value into a sorted sequence containing that value an infinite number of times. The sequence is treated as though it were sorted by the specified comparison delegate.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <param name="comparer">The comparison delegate that defines how the sequence is sorted.</param>
      <returns>A sorted sequence containing an infinite number of elements, all equal to <paramref name="source" />.</returns>
    </member>
    <member name="T:Nito.Linq.SequenceComparer`1">
      <summary>
            A comparison object that performs a lexicographical comparison of sequences.
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
    </member>
    <member name="M:Nito.Linq.SequenceComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.SequenceComparer`1" /> class with the specified item comparison object.
            </summary>
      <param name="comparer">The item comparison object, used to compare elements of the sequences.</param>
    </member>
    <member name="M:Nito.Linq.SequenceComparer`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.SequenceComparer`1" /> class with the default item comparison object.
            </summary>
    </member>
    <member name="M:Nito.Linq.SequenceComparer`1.Compare(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Compares two sequences and returns a value less than 0 if <paramref name="x" /> is less than <paramref name="y" />, 0 if <paramref name="x" /> is equal to <paramref name="y" />, or greater than 0 if <paramref name="x" /> is greater than <paramref name="y" />.
            </summary>
      <param name="x">The first sequence to compare.</param>
      <param name="y">The second sequence to compare.</param>
      <returns>A value less than 0 if <paramref name="x" /> is less than <paramref name="y" />, 0 if <paramref name="x" /> is equal to <paramref name="y" />, or greater than 0 if <paramref name="x" /> is greater than <paramref name="y" />.</returns>
    </member>
    <member name="P:Nito.Linq.SequenceComparer`1.Comparer">
      <summary>
            Gets the item comparison object.
            </summary>
    </member>
    <member name="T:Nito.Linq.SortedListSource">
      <summary>
            Sorted list sources.
            </summary>
    </member>
    <member name="M:Nito.Linq.SortedListSource.Empty``1(System.Collections.Generic.IComparer{``0})">
      <summary>
            Creates an empty sorted list. The list is sorted by the specified comparison object.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="comparer">The comparison object.</param>
      <returns>An empty sorted list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListSource.Empty``1">
      <summary>
            Creates an empty sorted list. The list is sorted by the default comparison object.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <returns>An empty sorted list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListSource.Empty``1(System.Func{``0,``0,System.Int32})">
      <summary>
            Creates an empty sorted list. The list is sorted by the specified comparison delegate.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="comparer">The comparison delegate.</param>
      <returns>An empty sorted list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListSource.Return``1(``0,System.Collections.Generic.IComparer{``0})">
      <summary>
            Converts a single value into a sorted list containing a single value. The list is treated as though it were sorted by the specified comparison object.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <param name="comparer">The comparison object that defines how the list is sorted.</param>
      <returns>A sorted list containing a single element, <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListSource.Return``1(``0)">
      <summary>
            Converts a single value into a sorted list containing a single value. The list is treated as though it were sorted by the default comparison object.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <returns>A sorted list containing a single element, <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListSource.Return``1(``0,System.Func{``0,``0,System.Int32})">
      <summary>
            Converts a single value into a sorted list containing a single value. The list is treated as though it were sorted by the specified comparison delegate.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <param name="comparer">The comparison delegate that defines how the list is sorted.</param>
      <returns>A sorted list containing a single element, <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListSource.Repeat``1(``0,System.Collections.Generic.IComparer{``0},System.Int32)">
      <summary>
            Converts a single value into a sorted list containing that value the specified number of times. The list is treated as though it were sorted by the specified comparison object.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <param name="comparer">The comparison object that defines how the list is sorted.</param>
      <param name="count">The number of times <paramref name="source" /> is repeated. If <paramref name="count" /> is less than or equal to 0, an empty list is returned.</param>
      <returns>A sorted list containing <paramref name="count" /> elements, all equal to <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListSource.Repeat``1(``0,System.Int32)">
      <summary>
            Converts a single value into a sorted list containing that value the specified number of times. The list is treated as though it were sorted by the default comparison object.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <param name="count">The number of times <paramref name="source" /> is repeated. If <paramref name="count" /> is less than or equal to 0, an empty list is returned.</param>
      <returns>A sorted list containing <paramref name="count" /> elements, all equal to <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListSource.Repeat``1(``0,System.Func{``0,``0,System.Int32},System.Int32)">
      <summary>
            Converts a single value into a sorted list containing that value the specified number of times. The list is treated as though it were sorted by the specified comparison delegate.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <param name="comparer">The comparison delegate that defines how the list is sorted.</param>
      <param name="count">The number of times <paramref name="source" /> is repeated. If <paramref name="count" /> is less than or equal to 0, an empty list is returned.</param>
      <returns>A sorted list containing <paramref name="count" /> elements, all equal to <paramref name="source" />.</returns>
    </member>
    <member name="T:Nito.Linq.ISortedEnumerable`1">
      <summary>
            Represents a sequence that is sorted by a single comparison.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
    </member>
    <member name="P:Nito.Linq.ISortedEnumerable`1.Comparer">
      <summary>
            Gets a comparison object that defines how this sequence is sorted.
            </summary>
    </member>
    <member name="T:Nito.Linq.ISortedList`1">
      <summary>
            Represents a list that is sorted by a single comparison.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
    </member>
    <member name="T:Nito.Linq.SortedListExtensions">
      <summary>
            Extension methods for <see cref="T:Nito.Linq.ISortedList`1" />.
            </summary>
    </member>
    <member name="T:Nito.Linq.SortedListExtensions.SortParameters`1">
      <summary>
            A parameter holder class that exists only to reduce stack usage in the recursive QuickSort algorithm.
            </summary>
      <typeparam name="T">The type of elements in the source list.</typeparam>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.SortParameters`1.Swap(System.Int32,System.Int32)">
      <summary>
            Swaps two elements in the source list and all other lists.
            </summary>
      <param name="indexA">The index of the first element to swap.</param>
      <param name="indexB">The index of the second element to swap.</param>
    </member>
    <member name="P:Nito.Linq.SortedListExtensions.SortParameters`1.List">
      <summary>
            Gets or sets the source list.
            </summary>
    </member>
    <member name="P:Nito.Linq.SortedListExtensions.SortParameters`1.Comparer">
      <summary>
            Gets or sets the comparison object.
            </summary>
    </member>
    <member name="P:Nito.Linq.SortedListExtensions.SortParameters`1.Others">
      <summary>
            Gets or sets any other lists that need to be kept in sync with the source list.
            </summary>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.AsSortedList``1(Nito.Linq.ISortedList{``0})">
      <summary>
            Returns the source typed as <see cref="T:Nito.Linq.ISortedList`1" />. This method has no effect other than to restrict the compile-time type of an object implementing <see cref="T:Nito.Linq.ISortedList`1" />.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="list" />.</typeparam>
      <param name="list">The source list.</param>
      <returns>The source list, typed as <see cref="T:Nito.Linq.ISortedList`1" />.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.AsSorted``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Treats a list as though it were already sorted by the specified comparison object.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The list, which is already sorted.</param>
      <param name="comparer">The comparison object that defines how the list is sorted.</param>
      <returns>The sorted list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.AsSorted``1(System.Collections.Generic.IList{``0})">
      <summary>
            Treats a list as though it were already sorted by the item type's default comparison.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The list, which is already sorted.</param>
      <returns>The sorted list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.AsSorted``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Int32})">
      <summary>
            Treats a list as though it were already sorted by the specified comparison delegate.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The list, which is already sorted.</param>
      <param name="comparer">The comparison delegate that defines how the list is sorted.</param>
      <returns>The sorted list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.ToSortedList``1(Nito.Linq.ISortedEnumerable{``0})">
      <summary>
            Creates a sorted list from a sorted source sequence.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The source sequence.</param>
      <returns>The sorted list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.Reverse``1(Nito.Linq.ISortedList{``0})">
      <summary>
            Returns a list that acts as though it has been reversed, with a reversed comparison object.
            </summary>
      <typeparam name="T">The type of elements contained in the list.</typeparam>
      <param name="list">The source list.</param>
      <returns>A list sorted in reverse order of the original list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.Skip``1(Nito.Linq.ISortedList{``0},System.Int32)">
      <summary>
            Returns a sliced list, which acts as a window into a subset of the original list.
            </summary>
      <typeparam name="T">The type of object contained in the list.</typeparam>
      <param name="list">The list to slice.</param>
      <param name="offset">The offset into the list at which the slice begins. Must be a valid index into the source list, or equal to the count of the source list.</param>
      <returns>A list that is a slice of the source list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.Slice``1(Nito.Linq.ISortedList{``0},System.Int32,System.Int32)">
      <summary>
            Returns a sliced list, which acts as a window into a subset of the original list. Similar to Skip followed by Take, only this is more efficient and preserves IList semantics.
            </summary>
      <typeparam name="T">The type of object contained in the list.</typeparam>
      <param name="list">The list to slice.</param>
      <param name="offset">The offset into the list at which the slice begins. Must be a valid index into the source list, or equal to the count of the source list.</param>
      <param name="count">The number of elements in the slice. May not be less than zero. If count is greater than 0, then every value in the range [offset, offset + count) must be valid indexes into the source list.</param>
      <returns>A list that is a slice of the source list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.Step``1(Nito.Linq.ISortedList{``0},System.Int32)">
      <summary>
            Steps through a list using a specified step size.
            </summary>
      <typeparam name="T">The type of object contained in the list.</typeparam>
      <param name="list">The list to step through.</param>
      <param name="step">The step size. Must be greater than 0.</param>
      <returns>The stepped list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.Take``1(Nito.Linq.ISortedList{``0},System.Int32)">
      <summary>
            Returns a sliced list, which acts as a window into a subset of the original list.
            </summary>
      <typeparam name="T">The type of object contained in the list.</typeparam>
      <param name="list">The list to slice.</param>
      <param name="count">The number of elements in the slice. May not be less than zero. If count is greater than 0, then every value in the range [0, count) must be valid indexes into the source list.</param>
      <returns>A list that is a slice of the source list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0},Nito.Linq.ListExtensions.ISwappable[])">
      <summary>
            Sorts a list in-place using the specified comparison object.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The list to be sorted.</param>
      <param name="comparer">The comparison object.</param>
      <param name="others">Other lists to be kept in sync with the sorted list. As <paramref name="list" /> is sorted, the same relative elements are rearranged in these lists.</param>
      <returns>The sorted list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.Sort``1(System.Collections.Generic.IList{``0},Nito.Linq.ListExtensions.ISwappable[])">
      <summary>
            Sorts a list in-place using the default comparison object.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The list to be sorted.</param>
      <param name="others">Other lists to be kept in sync with the sorted list. As <paramref name="list" /> is sorted, the same relative elements are rearranged in these lists.</param>
      <returns>The sorted list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Int32},Nito.Linq.ListExtensions.ISwappable[])">
      <summary>
            Sorts a list in-place using the specified comparison delegate.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The list to be sorted.</param>
      <param name="comparer">The comparison delegate.</param>
      <param name="others">Other lists to be kept in sync with the sorted list. As <paramref name="list" /> is sorted, the same relative elements are rearranged in these lists.</param>
      <returns>The sorted list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.SortIndirect``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0},Nito.Linq.ListExtensions.ISwappable[])">
      <summary>
            Creates and returns a sorted view of the source list, using the specified comparison object.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The list to be sorted. As long as the returned view is referenced, the source list should not be modified in any way.</param>
      <param name="comparer">The comparison object.</param>
      <param name="others">Other lists to be kept in sync with the sorted view. As the view is sorted, the same relative elements are rearranged in these lists.</param>
      <returns>The sorted view of the source list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.SortIndirect``1(System.Collections.Generic.IList{``0},Nito.Linq.ListExtensions.ISwappable[])">
      <summary>
            Creates and returns a sorted view of the source list, using the default comparison object.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The list to be sorted. As long as the returned view is referenced, the source list should not be modified in any way.</param>
      <param name="others">Other lists to be kept in sync with the sorted view. As the view is sorted, the same relative elements are rearranged in these lists.</param>
      <returns>The sorted view of the source list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.SortIndirect``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Int32},Nito.Linq.ListExtensions.ISwappable[])">
      <summary>
            Creates and returns a sorted view of the source list, using the specified comparison delegate.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The list to be sorted. As long as the returned view is referenced, the source list should not be modified in any way.</param>
      <param name="comparer">The comparison delegate.</param>
      <param name="others">Other lists to be kept in sync with the sorted view. As the view is sorted, the same relative elements are rearranged in these lists.</param>
      <returns>The sorted view of the source list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.Contains``1(Nito.Linq.ISortedList{``0},System.Func{``0,System.Int32})">
      <summary>
            Searches a sorted list using a given finder function. The finder function must be compatible with the comparer used to sort the list.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The sorted list.</param>
      <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
      <returns>
        <c>true</c> if there is at least one item that causes <paramref name="finder" /> to return 0, if any; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.IndexOf``1(Nito.Linq.ISortedList{``0},System.Func{``0,System.Int32})">
      <summary>
            Searches a sorted list using a given finder function, returning the index of the first matching item if found. If not found, the return value is -1. The finder function must be compatible with the comparer used to sort the list.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The sorted list.</param>
      <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
      <returns>The index of the first item that causes <paramref name="finder" /> to return 0, if any; otherwise, -1.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.LastIndexOf``1(Nito.Linq.ISortedList{``0},System.Func{``0,System.Int32})">
      <summary>
            Searches a sorted list using a given finder function, returning the index of the last matching item if found. If not found, the return value is -1. The finder function must be compatible with the comparer used to sort the list.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The sorted list.</param>
      <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
      <returns>The index of the last item that causes <paramref name="finder" /> to return 0, if any; otherwise, -1.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.LastIndexOf``1(Nito.Linq.ISortedList{``0},``0)">
      <summary>
            Searches a sorted list for a given value, returning the index of the last matching item if found. If not found, the return value is -1.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The sorted list.</param>
      <param name="item">The item to search for in the list.</param>
      <returns>The index of the last occurence of <paramref name="item" />, if any; otherwise, -1.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.BinarySearch``1(Nito.Linq.ISortedList{``0},``0)">
      <summary>
            Searches a sorted list for a given value, returning its index if found. If not found, the return value is the bitwise complement of the next element larger than the value.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The sorted list.</param>
      <param name="item">The item to search for in the list.</param>
      <returns>The index of <paramref name="item" /> if it was in the list; otherwise, the bitwise complement of the next larger element in the list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.BinarySearch``1(Nito.Linq.ISortedList{``0},System.Func{``0,System.Int32})">
      <summary>
            Searches a sorted list using a given finder function. If not found, the return value is the bitwise complement of the next element larger than the value. The finder function must be compatible with the comparer used to sort the list.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The sorted list.</param>
      <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
      <returns>The index of an item that causes <paramref name="finder" /> to return 0, if any; otherwise, the bitwise complement of the next larger element in the list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.LowerBound``1(Nito.Linq.ISortedList{``0},``0)">
      <summary>
            Searches a sorted list for a given value, returning the index of the first matching item if found. If not found, the return value is the bitwise complement of the next element larger than the value.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The sorted list.</param>
      <param name="item">The item to search for in the list.</param>
      <returns>The index of the first occurence of <paramref name="item" /> if it was in the list; otherwise, the bitwise complement of the next larger element in the list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.LowerBound``1(Nito.Linq.ISortedList{``0},System.Func{``0,System.Int32})">
      <summary>
            Searches a sorted list using a given finder function, returning the index of the first matching item if found. If not found, the return value is the bitwise complement of the next element larger than the value. The finder function must be compatible with the comparer used to sort the list.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The sorted list.</param>
      <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
      <returns>The index of the first item that causes <paramref name="finder" /> to return 0, if any; otherwise, the bitwise complement of the next larger element in the list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.UpperBound``1(Nito.Linq.ISortedList{``0},``0)">
      <summary>
            Searches a sorted list for a given value, returning the index one past the last matching item if found. If not found, the return value is the bitwise complement of the next element larger than the value.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The sorted list.</param>
      <param name="item">The item to search for in the list.</param>
      <returns>The index one past the last occurence of <paramref name="item" /> if it was in the list; otherwise, the bitwise complement of the next larger element in the list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.UpperBound``1(Nito.Linq.ISortedList{``0},System.Func{``0,System.Int32})">
      <summary>
            Searches a sorted list using a given finder function, returning the index one past the last matching item if found. If not found, the return value is the bitwise complement of the next element larger than the value. The finder function must be compatible with the comparer used to sort the list.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The sorted list.</param>
      <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
      <returns>The index one past the last item that causes <paramref name="finder" /> to return 0, if any; otherwise, the bitwise complement of the index one past the last item that causes <paramref name="finder" /> to return a positive result.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.EqualRange``1(Nito.Linq.ISortedList{``0},``0,System.Int32@,System.Int32@)">
      <summary>
            Searches a sorted list for all instances of a given value.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The sorted list.</param>
      <param name="item">The item to search for in the list.</param>
      <param name="begin">The lower bound of the range of matching values. [begin, end) may be an empty range.</param>
      <param name="end">The upper bound of the range of matching values. [begin, end) may be an empty range.</param>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.EqualRange``1(Nito.Linq.ISortedList{``0},System.Func{``0,System.Int32},System.Int32@,System.Int32@)">
      <summary>
            Searches a sorted list using a given finder function. The finder function must be compatible with the comparer used to sort the list.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The sorted list.</param>
      <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
      <param name="begin">The lower bound of the range of values causing <paramref name="finder" /> to return 0. [begin, end) may be an empty range.</param>
      <param name="end">The upper bound of the range of values causing <paramref name="finder" /> to return 0. [begin, end) may be an empty range.</param>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.Insert``1(Nito.Linq.ISortedList{``0},``0)">
      <summary>
            Inserts a value into a sorted list in-place, maintaining the sort order. Returns the index of the inserted item. To "insert" an item without modifying the source list, call <see cref="O:SortedEnumerableExtensions.MergeSorted" />.
            </summary>
      <typeparam name="T">The type of object contained in the list.</typeparam>
      <param name="list">The sorted list into which to insert.</param>
      <param name="item">The item to insert into the list.</param>
      <returns>The index at which the new item was inserted.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.BinarySearchCore``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32},System.Int32@,System.Int32@)">
      <summary>
            Performs a binary search over a sorted list, returning both a match and the narrowed range.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The sorted list.</param>
      <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
      <param name="begin">On input, contains the beginning index at which to search. On output, contains the index of an item less than the found item, or the first item equal to the found item.</param>
      <param name="end">On input, contains the ending index at which to search. On output, contains the index one past an item greater than the found item, or the index one past the last item equal to the found item.</param>
      <returns>The index of an item that causes <paramref name="finder" /> to return 0, if any; otherwise, the bitwise complement of the next larger element in the list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.LowerBoundCore``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32},System.Int32@,System.Int32)">
      <summary>
            Modifies <paramref name="begin" /> so that it refers to the first matching item.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The sorted list.</param>
      <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
      <param name="begin">On input, contains the beginning index at which to search. On output, contains the index of the first matching item.</param>
      <param name="end">The ending index at which to search. The item at this index must match.</param>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.UpperBoundCore``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32},System.Int32,System.Int32@)">
      <summary>
            Modifies <paramref name="end" /> so that it refers to one past the last matching item.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="list">The sorted list.</param>
      <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
      <param name="begin">The beginning index at which to search. The item at this index must match.</param>
      <param name="end">On input, contains the ending index at which to search. On output, contains the index one past the last matching item.</param>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.QuickSortCore``1(Nito.Linq.SortedListExtensions.SortParameters{``0},System.Int32,System.Int32)">
      <summary>
            Sorts a portion of a list. The range to sort is [<paramref name="begin" />, <paramref name="end" />).
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="parameters">The source list, comparison object, and other lists that must be kept in sync.</param>
      <param name="begin">The beginning of the range to sort.</param>
      <param name="end">The ending of the range to sort.</param>
    </member>
    <member name="M:Nito.Linq.SortedListExtensions.QuickSortPartition``1(Nito.Linq.SortedListExtensions.SortParameters{``0},System.Int32,System.Int32,System.Int32)">
      <summary>
            Partitions the elements of a list around a given pivot element. The range to partition is [<paramref name="begin" />, <paramref name="end" />), and this range must be at least 2 elements long.
            </summary>
      <typeparam name="T">The type of items in the list.</typeparam>
      <param name="parameters">The source list, comparison object, and other lists that must be kept in sync.</param>
      <param name="begin">The beginning of the range to partition.</param>
      <param name="end">The ending of the range to partition.</param>
      <param name="pivotIndex">The index of the element chosen as the pivot.</param>
      <returns>The new index of the pivot element.</returns>
    </member>
    <member name="T:Nito.Linq.ListSource">
      <summary>
            List sources.
            </summary>
    </member>
    <member name="M:Nito.Linq.ListSource.Empty``1">
      <summary>
            Returns an empty list.
            </summary>
      <typeparam name="T">The type of elements contained in the list.</typeparam>
      <returns>An empty read-only list.</returns>
    </member>
    <member name="M:Nito.Linq.ListSource.Return``1(``0)">
      <summary>
            Converts a single value into a list containing a single value.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <returns>A read-only list containing a single element, <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.ListSource.Repeat``1(``0,System.Int32)">
      <summary>
            Converts a single value into a list containing that value the specified number of times.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <param name="count">The number of times <paramref name="source" /> is repeated. If <paramref name="count" /> is less than or equal to 0, an empty list is returned.</param>
      <returns>A read-only list containing <paramref name="count" /> elements, all equal to <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.ListSource.Generate``1(System.Func{``0},System.Int32)">
      <summary>
            Returns a read-only list that generates its elements when they are read.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="generator">The delegate that is used to generate the elements. This may be <c>null</c> if <paramref name="count" /> is less than or equal to 0.</param>
      <param name="count">The number of elements in the list. If <paramref name="count" /> is less than or equal to 0, an empty list is returned.</param>
      <returns>A read-only list that generates its elements on demand.</returns>
    </member>
    <member name="M:Nito.Linq.ListSource.Generate``1(System.Func{System.Int32,``0},System.Int32)">
      <summary>
            Returns a read-only list that generates its elements when they are read, passing the element's index to the generator delegate.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="generator">The delegate that is used to generate the elements. This may be <c>null</c> if <paramref name="count" /> is less than or equal to 0.</param>
      <param name="count">The number of elements in the list. If <paramref name="count" /> is less than or equal to 0, an empty list is returned.</param>
      <returns>A read-only list that generates its elements on demand.</returns>
    </member>
    <member name="M:Nito.Linq.ListSource.Generate``1(System.Func{``0},System.Func{System.Int32})">
      <summary>
            Returns a read-only list of dynamic size that generates its elements when they are read.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="generator">The delegate that is used to generate the elements. This may be <c>null</c> if <paramref name="counter" /> returns a number less than or equal to 0.</param>
      <param name="counter">The delegate that is used to count the number of elements in the list.</param>
      <returns>A read-only list that generates its elements on demand.</returns>
    </member>
    <member name="M:Nito.Linq.ListSource.Generate``1(System.Func{System.Int32,``0},System.Func{System.Int32})">
      <summary>
            Returns a read-only list of dynamic size that generates its elements when they are read, passing the element's index to the generator delegate.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="generator">The delegate that is used to generate the elements. This may be <c>null</c> if <paramref name="counter" /> returns a number less than or equal to 0.</param>
      <param name="counter">The delegate that is used to count the number of elements in the list.</param>
      <returns>A read-only list that generates its elements on demand.</returns>
    </member>
    <member name="T:Nito.Linq.Implementation.SortedListWrapper`1">
      <summary>
            Wraps a source list and comparison object.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="F:Nito.Linq.Implementation.SortedListWrapper`1.source">
      <summary>
            The source list.
            </summary>
    </member>
    <member name="M:Nito.Linq.Implementation.SortedListWrapper`1.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.Implementation.SortedListWrapper`1" /> class with the specified source list and comparison object.
            </summary>
      <param name="source">The source list.</param>
      <param name="comparer">The comparison object.</param>
    </member>
    <member name="M:Nito.Linq.Implementation.SortedListWrapper`1.Clear">
      <summary>
            Removes all items from this list.
            </summary>
      <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
    </member>
    <member name="M:Nito.Linq.Implementation.SortedListWrapper`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in this list.
            </summary>
      <param name="item">The object to locate in this list.</param>
      <returns>
            The index of <paramref name="item" /> if found in this list; otherwise, -1.
            </returns>
    </member>
    <member name="M:Nito.Linq.Implementation.SortedListWrapper`1.Contains(`0)">
      <summary>
            Determines whether this list contains a specific value.
            </summary>
      <param name="item">The object to locate in this list.</param>
      <returns>
            true if <paramref name="item" /> is found in this list; otherwise, false.
            </returns>
    </member>
    <member name="M:Nito.Linq.Implementation.SortedListWrapper`1.DoGetItem(System.Int32)">
      <summary>
            Gets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:Nito.Linq.Implementation.SortedListWrapper`1.DoSetItem(System.Int32,`0)">
      <summary>
            Sets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.Implementation.SortedListWrapper`1.DoInsert(System.Int32,`0)">
      <summary>
            Inserts an element at the specified index.
            </summary>
      <param name="index">The zero-based index at which the element should be inserted. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Linq.Implementation.SortedListWrapper`1.DoRemoveAt(System.Int32)">
      <summary>
            Removes an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to remove. This index is guaranteed to be valid.</param>
    </member>
    <member name="P:Nito.Linq.Implementation.SortedListWrapper`1.Comparer">
      <summary>
            Gets a comparison object that defines how this list is sorted.
            </summary>
    </member>
    <member name="P:Nito.Linq.Implementation.SortedListWrapper`1.IsReadOnly">
      <summary>
            Gets a value indicating whether this list is read-only. This list is read-only iff its source list is read-only.
            </summary>
      <returns>true if this list is read-only; otherwise, false.</returns>
    </member>
    <member name="P:Nito.Linq.Implementation.SortedListWrapper`1.Count">
      <summary>
            Gets the number of elements contained in this list.
            </summary>
      <returns>The number of elements contained in this list.</returns>
    </member>
    <member name="T:Nito.Linq.Implementation.IndirectList`1">
      <summary>
            An indirect list, which provides a layer of indirection for the index values of a source list.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="F:Nito.Linq.Implementation.IndirectList`1.indices">
      <summary>
            The redirected index values.
            </summary>
    </member>
    <member name="M:Nito.Linq.Implementation.IndirectList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.Implementation.IndirectList`1" /> class for the given source list.
            </summary>
      <param name="source">The source list. The number of elements in the source list may not change as long as this <see cref="T:Nito.Linq.Implementation.IndirectList`1" /> is reachable.</param>
    </member>
    <member name="M:Nito.Linq.Implementation.IndirectList`1.GetComparer(System.Collections.Generic.IComparer{`0})">
      <summary>
            Returns an indirect comparer which may be used to sort or compare elements in <see cref="P:Nito.Linq.Implementation.IndirectList`1.Indices" />, based on the specified source comparer.
            </summary>
      <param name="comparer">The source comparer.</param>
      <returns>The indirect comparer.</returns>
    </member>
    <member name="M:Nito.Linq.Implementation.IndirectList`1.GetComparer">
      <summary>
            Returns an indirect comparer which may be used to sort or compare elements in <see cref="P:Nito.Linq.Implementation.IndirectList`1.Indices" />, based on the default source comparer.
            </summary>
      <returns>The indirect comparer.</returns>
    </member>
    <member name="M:Nito.Linq.Implementation.IndirectList`1.DoGetItem(System.Int32)">
      <summary>
            Gets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:Nito.Linq.Implementation.IndirectList`1.DoSetItem(System.Int32,`0)">
      <summary>
            Sets an element at the specified index. This implementation always throws <see cref="T:System.NotSupportedException" />.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="P:Nito.Linq.Implementation.IndirectList`1.Source">
      <summary>
            Gets the source list.
            </summary>
    </member>
    <member name="P:Nito.Linq.Implementation.IndirectList`1.Indices">
      <summary>
            Gets the redirected index values. Elements in this list may be set, but not inserted or removed.
            </summary>
    </member>
    <member name="P:Nito.Linq.Implementation.IndirectList`1.Count">
      <summary>
            Gets the number of elements contained in this list.
            </summary>
    </member>
    <member name="T:Nito.Linq.Implementation.A">
      <summary>
            A type that constructs anonymous types from delegates.
            </summary>
    </member>
    <member name="M:Nito.Linq.Implementation.A.Comparer``1(System.Func{``0,``0,System.Int32})">
      <summary>
            Constructs an object that implements <see cref="T:System.Collections.Generic.IComparer`1" /> using a delegate.
            </summary>
      <typeparam name="T">The type of items to compare.</typeparam>
      <param name="compare">The Compare delegate, which compares two objects and returns a value less than 0 if its first argument is less than its second argument, 0 if its two arguments are equal, or greater than 0 if its first argument is greater than its second argument.</param>
      <returns>An object that implements <see cref="T:System.Collections.Generic.IComparer`1" /> using a delegate.</returns>
    </member>
    <member name="T:Nito.Linq.SortedEnumerableExtensions">
      <summary>
            Extension methods for <see cref="T:Nito.Linq.ISortedEnumerable`1" />.
            </summary>
    </member>
    <member name="T:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1">
      <summary>
            An enumerator that caches the return value from <see cref="M:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.MoveNext" /> and starts on the first value.
            </summary>
      <typeparam name="T">The type of element contained in the enumerator.</typeparam>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1" /> class with the given source enumerable.
            </summary>
      <param name="source">The source enumerable.</param>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.MoveNext">
      <summary>
            Moves the iterator forward one value. Returns false if <see cref="P:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.Done" /> is now true.
            </summary>
      <returns>Whether the sequence is still valid.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.Dispose">
      <summary>
            Disposes the iterator.
            </summary>
    </member>
    <member name="P:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.Done">
      <summary>
            Gets a value indicating whether this iterator is done.
            </summary>
    </member>
    <member name="P:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.Current">
      <summary>
            Gets the current value of the iterator. Only valid if <see cref="P:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.Done" /> is false.
            </summary>
    </member>
    <member name="P:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.RemainingValues">
      <summary>
            Gets an enumeration that, starting with <see cref="P:Nito.Linq.SortedEnumerableExtensions.ForwardIterator`1.Current" />, yields all remaining values in the source enumerator.
            </summary>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.IsSorted``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a value indicating whether this sequence is sorted according to the default comparison object.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The source sequence.</param>
      <returns>Whether this sequence is sorted according to the default comparison object.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.IsSorted``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns a value indicating whether this sequence is sorted according to the given comparison object.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The source sequence.</param>
      <param name="comparer">The comparison object.</param>
      <returns>Whether this sequence is sorted according to the given comparison object.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.IsSorted``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
      <summary>
            Returns a value indicating whether this sequence is sorted according to the given comparison delegate.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The source sequence.</param>
      <param name="comparer">The comparison delegate.</param>
      <returns>Whether this sequence is sorted according to the given comparison delegate.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.AsSortedEnumerable``1(Nito.Linq.ISortedEnumerable{``0})">
      <summary>
            Returns the source typed as <see cref="T:Nito.Linq.ISortedEnumerable`1" />. This method has no effect other than to restrict the compile-time type of an object implementing <see cref="T:Nito.Linq.ISortedEnumerable`1" />.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
      <param name="source">The source sequence.</param>
      <returns>The source sequence, typed as <see cref="T:Nito.Linq.ISortedEnumerable`1" />.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.AsSorted``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Treats a sequence as though it were already sorted.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The sequence, which is already sorted.</param>
      <param name="comparer">The comparison object that defines how the sequence is sorted.</param>
      <returns>The sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.AsSorted``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Treats a sequence as though it were already sorted by the item type's default comparison.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The sequence, which is already sorted.</param>
      <returns>The sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.AsSorted``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
      <summary>
            Treats a sequence as though it were already sorted.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The sequence, which is already sorted.</param>
      <param name="comparer">The comparison delegate that defines how the sequence is sorted.</param>
      <returns>The sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.AsSorted``2(System.Collections.Generic.SortedList{``0,``1})">
      <summary>
            Treats a <see cref="T:System.Collections.Generic.SortedList`2" /> as a sorted sequence, sorted by the comparison function of the <see cref="T:System.Collections.Generic.SortedList`2" />.
            </summary>
      <typeparam name="TKey">The type of keys in the <see cref="T:System.Collections.Generic.SortedList`2" />.</typeparam>
      <typeparam name="TValue">The type of values in the <see cref="T:System.Collections.Generic.SortedList`2" />.</typeparam>
      <param name="source">The <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
      <returns>The <see cref="T:System.Collections.Generic.SortedList`2" /> as a sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.AsSorted``2(System.Collections.Generic.SortedDictionary{``0,``1})">
      <summary>
            Treats a <see cref="T:System.Collections.Generic.SortedDictionary`2" /> as a sorted sequence, sorted by the comparison function of the <see cref="T:System.Collections.Generic.SortedDictionary`2" />.
            </summary>
      <typeparam name="TKey">The type of keys in the <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</typeparam>
      <typeparam name="TValue">The type of values in the <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</typeparam>
      <param name="source">The <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <returns>The <see cref="T:System.Collections.Generic.SortedDictionary`2" /> as a sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.LowerBound``1(Nito.Linq.ISortedEnumerable{``0},``0)">
      <summary>
            Searches a sorted sequence for a given value, returning the index of the first matching item if found. If not found, the return value is the bitwise complement of the next element larger than the value.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The sorted sequence.</param>
      <param name="item">The item to search for in the sequence.</param>
      <returns>The index of the first occurence of <paramref name="item" /> if it was in the list; otherwise, the bitwise complement of the next larger element in the sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.LowerBound``1(Nito.Linq.ISortedEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            Searches a sorted sequence for a given value, returning the index of the first matching item if found. If not found, the return value is the bitwise complement of the next element larger than the value. The finder function must be compatible with the comparer used to sort the sequence.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The sorted sequence.</param>
      <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
      <returns>The index of the first item that causes <paramref name="finder" /> to return 0, if any; otherwise, the bitwise complement of the next larger element in the list.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.UpperBound``1(Nito.Linq.ISortedEnumerable{``0},``0)">
      <summary>
            Searches a sorted sequence for a given value, returning the index one past the last matching item if found. If not found, the return value is the bitwise complement of the next element larger than the value.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The sorted sequence.</param>
      <param name="item">The item to search for in the sequence.</param>
      <returns>The index one past the last occurence of <paramref name="item" /> if it was in the sequence; otherwise, the bitwise complement of the next larger element in the sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.UpperBound``1(Nito.Linq.ISortedEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            Searches a sorted sequence using a given finder function, returning the index one past the last matching item if found. If not found, the return value is the bitwise complement of the next element larger than the value. The finder function must be compatible with the comparer used to sort the sequence.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The sorted sequence.</param>
      <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
      <returns>The index one past the last item that causes <paramref name="finder" /> to return 0, if any; otherwise, the bitwise complement of the index one past the last item that causes <paramref name="finder" /> to return a positive result.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.EqualRange``1(Nito.Linq.ISortedEnumerable{``0},``0,System.Int32@,System.Int32@)">
      <summary>
            Searches a sorted sequence for all instances of a given value.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The sorted sequence.</param>
      <param name="item">The item to search for in the sequence.</param>
      <param name="begin">The lower bound of the range of matching values. [begin, end) may be an empty range.</param>
      <param name="end">The upper bound of the range of matching values. [begin, end) may be an empty range.</param>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.EqualRange``1(Nito.Linq.ISortedEnumerable{``0},System.Func{``0,System.Int32},System.Int32@,System.Int32@)">
      <summary>
            Searches a sorted sequence using a given finder function. The finder function must be compatible with the comparer used to sort the sequence.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The sorted sequence.</param>
      <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
      <param name="begin">The lower bound of the range of values causing <paramref name="finder" /> to return 0. [begin, end) may be an empty range.</param>
      <param name="end">The upper bound of the range of values causing <paramref name="finder" /> to return 0. [begin, end) may be an empty range.</param>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.Contains``1(Nito.Linq.ISortedEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            Searches a sorted sequence using a given finder function. The finder function must be compatible with the comparer used to sort the sequence.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The sorted sequence.</param>
      <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
      <returns>
        <c>true</c> if there is at least one item that causes <paramref name="finder" /> to return 0, if any; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.Contains``1(Nito.Linq.ISortedEnumerable{``0},``0)">
      <summary>
            Searches a sorted sequence for a given value.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The sorted sequence.</param>
      <param name="item">The item to search for in the sequence.</param>
      <returns>
        <c>true</c> if there is at least one item that matches <paramref name="item" />, if any; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.IndexOf``1(Nito.Linq.ISortedEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            Searches a sorted sequence using a given finder function, returning the index of the first matching item if found. If not found, the return value is -1. The finder function must be compatible with the comparer used to sort the sequence.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The sorted sequence.</param>
      <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
      <returns>The index of the first item that causes <paramref name="finder" /> to return 0, if any; otherwise, -1.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.IndexOf``1(Nito.Linq.ISortedEnumerable{``0},``0)">
      <summary>
            Searches a sorted sequence for a given value, returning the index of the first matching item if found. If not found, the return value is -1.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The sorted sequence.</param>
      <param name="item">The item to search for in the sequence.</param>
      <returns>The index of the first item that matches <paramref name="item" />, if any; otherwise, -1.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.LastIndexOf``1(Nito.Linq.ISortedEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            Searches a sorted sequence using a given finder function, returning the index of the last matching item if found. If not found, the return value is -1. The finder function must be compatible with the comparer used to sort the sequence.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The sorted sequence.</param>
      <param name="finder">The finder function to use to find the item. This function should return 0 for a match, a negative value (meaning "search lower") if its parameter is too large, or a positive value (meaning "search higher") if its parameter is too small.</param>
      <returns>The index of the last item that causes <paramref name="finder" /> to return 0, if any; otherwise, -1.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.LastIndexOf``1(Nito.Linq.ISortedEnumerable{``0},``0)">
      <summary>
            Searches a sorted sequence for a given value, returning the index of the last matching item if found. If not found, the return value is -1.
            </summary>
      <typeparam name="T">The type of items in the sequence.</typeparam>
      <param name="source">The sorted sequence.</param>
      <param name="item">The item to search for in the sequence.</param>
      <returns>The index of the last occurence of <paramref name="item" />, if any; otherwise, -1.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.Skip``1(Nito.Linq.ISortedEnumerable{``0},System.Int32)">
      <summary>
            Skips the first few elements of a source sequence.
            </summary>
      <typeparam name="T">The type of object contained in the sequence.</typeparam>
      <param name="source">The source sequence.</param>
      <param name="offset">The offset into the sequence at which the returned sequence begins. Must be a valid index into the source sequence, or equal to the count of the source sequence.</param>
      <returns>A sequence that skips the first <paramref name="offset" /> elements of the source sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.Step``1(Nito.Linq.ISortedEnumerable{``0},System.Int32)">
      <summary>
            Steps through a sequence using a specified step size.
            </summary>
      <typeparam name="T">The type of object contained in the sequence.</typeparam>
      <param name="source">The sequence to step through.</param>
      <param name="step">The step size. Must be greater than 0.</param>
      <returns>The stepped sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.Take``1(Nito.Linq.ISortedEnumerable{``0},System.Int32)">
      <summary>
            Returns the first few elements of a source sequence.
            </summary>
      <typeparam name="T">The type of object contained in the sequence.</typeparam>
      <param name="source">The source sequence.</param>
      <param name="count">The number of elements to return. May not be less than zero. If count is greater than 0, then every value in the range [0, count) must be valid indexes into the source sequence.</param>
      <returns>A sequence that includes the first <paramref name="count" /> elements of the source sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.MergeSorted``1(Nito.Linq.ISortedEnumerable{``0},Nito.Linq.ISortedEnumerable{``0}[])">
      <summary>
            Produces a sorted sequence that is the merging of this sequence with all sequence arguments. Each argument must be a sequence that is sorted with a comparison object equivalent to this sequence's comparison object.
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="source">The first source sequence.</param>
      <param name="others">The other source sequences.</param>
      <returns>The merging of the first source sequence with all the other source sequences, as a sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.MergeSorted``1(System.Collections.Generic.IEnumerable{Nito.Linq.ISortedEnumerable{``0}})">
      <summary>
            Given a non-empty sequence of sorted sequences, produces a sorted sequence that is the merging of those sequences. All sorted sequences in <paramref name="sources" /> must be sorted using equivalent comparison objects.
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="sources">The sequence of sorted sequences.</param>
      <returns>The merging of the source sequences, as a sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.MergeSorted``1(Nito.Linq.ISortedEnumerable{``0},``0[])">
      <summary>
            Produces a sorted sequence that is the merging of this sequence with all value arguments. The arguments need not be in a sorted order.
            </summary>
      <typeparam name="T">The type of elements in the source sequence.</typeparam>
      <param name="source">The source sequence.</param>
      <param name="values">The values to merge into the source source.</param>
      <returns>The merging of the source sequence with all values.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.UnionWithDuplicates``1(Nito.Linq.ISortedEnumerable{``0},Nito.Linq.ISortedEnumerable{``0}[])">
      <summary>
            Produces a sorted sequence that is the union of this sequence with all sequence arguments. Each argument must be a sequence that is sorted with a comparison object equivalent to this sequence's comparison object. Items that are duplicated in at least one of the input(s) are duplicated in the output.
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="source">The first source sequence.</param>
      <param name="others">The other source sequences.</param>
      <returns>The union of the first source sequence with all the other source sequences, as a sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.Union``1(Nito.Linq.ISortedEnumerable{``0},Nito.Linq.ISortedEnumerable{``0}[])">
      <summary>
            Produces a sorted sequence that is the union of this sequence with all sequence arguments. Each argument must be a sequence that is sorted with a comparison object equivalent to this sequence's comparison object. The resulting sequence is distinct (no duplicate items).
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="source">The first source sequence.</param>
      <param name="others">The other source sequences.</param>
      <returns>The distinct union of the first source sequence with all the other source sequences, as a sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.UnionWithDuplicates``1(System.Collections.Generic.IEnumerable{Nito.Linq.ISortedEnumerable{``0}})">
      <summary>
            Given a non-empty sequence of sorted sequences, produces a sorted sequence that is the union of those sequences. All sorted sequences in <paramref name="sources" /> must be sorted using equivalent comparison objects. Items that are duplicated in at least one of the input(s) are duplicated in the output.
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="sources">The sequence of sorted sequences.</param>
      <returns>The union of the source sequences, as a sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.Union``1(System.Collections.Generic.IEnumerable{Nito.Linq.ISortedEnumerable{``0}})">
      <summary>
            Given a non-empty sequence of sorted sequences, produces a sorted sequence that is the union of those sequences. All sorted sequences in <paramref name="sources" /> must be sorted using equivalent comparison objects. The resulting sequence is distinct (no duplicate items).
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="sources">The sequence of sorted sequences.</param>
      <returns>The distinct union of the source sequences, as a sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.UnionWithDuplicates``1(Nito.Linq.ISortedEnumerable{``0},``0[])">
      <summary>
            Produces a sorted sequence that is the union of this sequence with all value arguments. The arguments need not be in a sorted order. Items that are duplicated in at least one of the input(s) are duplicated in the output.
            </summary>
      <typeparam name="T">The type of elements in the source sequence.</typeparam>
      <param name="source">The source sequence.</param>
      <param name="values">The values to merge into the source source.</param>
      <returns>The union of the source sequence with all values.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.Union``1(Nito.Linq.ISortedEnumerable{``0},``0[])">
      <summary>
            Produces a sorted sequence that is the union of this sequence with all value arguments. The arguments need not be in a sorted order. The resulting sequence is distinct (no duplicate items).
            </summary>
      <typeparam name="T">The type of elements in the source sequence.</typeparam>
      <param name="source">The source sequence.</param>
      <param name="values">The values to merge into the source source.</param>
      <returns>The distinct union of the source sequence with all values.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.IntersectWithDuplicates``1(Nito.Linq.ISortedEnumerable{``0},Nito.Linq.ISortedEnumerable{``0}[])">
      <summary>
            Produces a sorted sequence that is the intersection of this sequence with all sequence arguments. Each argument must be a sequence that is sorted with a comparison object equivalent to this sequence's comparison object. Items that are duplicated in all input sequences are duplicated in the output.
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="source">The first source sequence.</param>
      <param name="others">The other source sequences.</param>
      <returns>The intersection of the first source sequence with all the other source sequences, as a sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.Intersect``1(Nito.Linq.ISortedEnumerable{``0},Nito.Linq.ISortedEnumerable{``0}[])">
      <summary>
            Produces a sorted sequence that is the intersection of this sequence with all sequence arguments. Each argument must be a sequence that is sorted with a comparison object equivalent to this sequence's comparison object. The resulting sequence is distinct (no duplicate items).
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="source">The first source sequence.</param>
      <param name="others">The other source sequences.</param>
      <returns>The intersection of the first source sequence with all the other source sequences, as a distinct, sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.IntersectWithDuplicates``1(System.Collections.Generic.IEnumerable{Nito.Linq.ISortedEnumerable{``0}})">
      <summary>
            Given a non-empty sequence of sorted sequences, produces a sorted sequence that is the intersection of those sequences. All sorted sequences in <paramref name="sources" /> must be sorted using equivalent comparison objects. Items that are duplicated in all input sequences are duplicated in the output.
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="sources">The sequence of sorted sequences.</param>
      <returns>The intersection of the source sequences, as a sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{Nito.Linq.ISortedEnumerable{``0}})">
      <summary>
            Given a non-empty sequence of sorted sequences, produces a sorted sequence that is the intersection of those sequences. All sorted sequences in <paramref name="sources" /> must be sorted using equivalent comparison objects. The resulting sequence is distinct (no duplicate items).
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="sources">The sequence of sorted sequences.</param>
      <returns>The intersection of the source sequences, as a distinct, sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.ExceptWithDuplicates``1(Nito.Linq.ISortedEnumerable{``0},Nito.Linq.ISortedEnumerable{``0})">
      <summary>
            Produces a sorted sequence that is the difference of this sequence with another sequence. The other sequence must be a sequence that is sorted with a comparison object equivalent to this sequence's comparison object. Items that are duplicated in the source sequences must be duplicated in the other sequence to prevent them from being included in the resulting sequence.
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="source">The first source sequence.</param>
      <param name="other">The other source sequence.</param>
      <returns>A sorted sequence containing all elements in the first source sequence except for elements in the other source sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.Except``1(Nito.Linq.ISortedEnumerable{``0},Nito.Linq.ISortedEnumerable{``0})">
      <summary>
            Produces a sorted sequence that is the difference of this sequence with another sequence. The other sequence must be a sequence that is sorted with a comparison object equivalent to this sequence's comparison object. The resulting sequence is distinct (no duplicate items).
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="source">The first source sequence.</param>
      <param name="other">The other source sequence.</param>
      <returns>A sorted sequence containing all distinct elements in the first source sequence except for elements in the other source sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.Distinct``1(Nito.Linq.ISortedEnumerable{``0})">
      <summary>
            Returns distinct elements from a sorted sequence.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="source">The source sequence.</param>
      <returns>Each distinct element in <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.DistinctCore``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns distinct elements from an implicitly sorted sequence.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="source">The implicitly sorted source sequence.</param>
      <param name="comparer">The comparison object. The implicitly sorted sequence <paramref name="source" /> must be sorted using a comparison object equivalent to <paramref name="comparer" />.</param>
      <returns>Each distinct element in <paramref name="source" />, as an implicitly sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.UnionCore``1(System.Collections.Generic.IEnumerable{Nito.Linq.ISortedEnumerable{``0}},System.Collections.Generic.IComparer{``0})">
      <summary>
            Given a sequence of sorted sequences, produces a sorted sequence that is the union of those sequences according to a specified comparison object.
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="sources">The sequence of sorted sequences.</param>
      <param name="comparer">The comparison object. All sorted sequences in <paramref name="sources" /> must be sorted using a comparison object equivalent to <paramref name="comparer" />.</param>
      <returns>The union of the source sequences, as a sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.UnionCore``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Given two implicitly sorted sequences, produces an implicitly sorted sequence that is the union of those sequences according to a specified comparison object.
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="first">The first implicitly sorted sequence.</param>
      <param name="second">The second implicitly sorted sequence.</param>
      <param name="comparer">The comparison object. Both <paramref name="first" /> and <paramref name="second" /> must be sorted using a comparison object equivalent to <paramref name="comparer" />.</param>
      <returns>The union of <paramref name="first" /> and <paramref name="second" />, as an implicitly sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.MergeCore``1(System.Collections.Generic.IEnumerable{Nito.Linq.ISortedEnumerable{``0}},System.Collections.Generic.IComparer{``0})">
      <summary>
            Given a sequence of sorted sequences, produces a sorted sequence that is the merging of those sequences according to a specified comparison object.
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="sources">The sequence of sorted sequences.</param>
      <param name="comparer">The comparison object. All sorted sequences in <paramref name="sources" /> must be sorted using a comparison object equivalent to <paramref name="comparer" />.</param>
      <returns>The merging of the source sequences, as a sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.MergeCore``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Given two implicitly sorted sequences, produces an implicitly sorted sequence that is the merging of those sequences according to a specified comparison object.
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="first">The first implicitly sorted sequence.</param>
      <param name="second">The second implicitly sorted sequence.</param>
      <param name="comparer">The comparison object. Both <paramref name="first" /> and <paramref name="second" /> must be sorted using a comparison object equivalent to <paramref name="comparer" />.</param>
      <returns>The merging of <paramref name="first" /> and <paramref name="second" />, as an implicitly sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.IntersectCore``1(System.Collections.Generic.IEnumerable{Nito.Linq.ISortedEnumerable{``0}},System.Collections.Generic.IComparer{``0})">
      <summary>
            Given a sequence of sorted sequences, produces a sorted sequence that is the intersection of those sequences according to a specified comparison object.
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="sources">The sequence of sorted sequences.</param>
      <param name="comparer">The comparison object. All sorted sequences in <paramref name="sources" /> must be sorted using a comparison object equivalent to <paramref name="comparer" />.</param>
      <returns>The intersection of the source sequences, as a sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.IntersectCore``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Given two implicitly sorted sequences, produces an implicitly sorted sequence that is the intersection of those sequences according to a specified comparison object.
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="first">The first implicitly sorted sequence.</param>
      <param name="second">The second implicitly sorted sequence.</param>
      <param name="comparer">The comparison object. Both <paramref name="first" /> and <paramref name="second" /> must be sorted using a comparison object equivalent to <paramref name="comparer" />.</param>
      <returns>The intersection of <paramref name="first" /> and <paramref name="second" />, as an implicitly sorted sequence.</returns>
    </member>
    <member name="M:Nito.Linq.SortedEnumerableExtensions.ExceptCore``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Given two implicitly sorted sequences, produces an implicitly sorted sequence that is the difference of those sequences according to a specified comparison object.
            </summary>
      <typeparam name="T">The type of elements in the sequences.</typeparam>
      <param name="first">The first implicitly sorted sequence.</param>
      <param name="second">The second implicitly sorted sequence.</param>
      <param name="comparer">The comparison object. Both <paramref name="first" /> and <paramref name="second" /> must be sorted using a comparison object equivalent to <paramref name="comparer" />.</param>
      <returns>The difference of <paramref name="first" /> and <paramref name="second" />, as an implicitly sorted sequence.</returns>
    </member>
    <member name="T:Nito.Linq.Implementation.AnonymousReadOnlyList`1">
      <summary>
            Provides a delegate-based implementation of a read-only list.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="F:Nito.Linq.Implementation.AnonymousReadOnlyList`1.count">
      <summary>
            The delegate used to get the number of items in the list.
            </summary>
    </member>
    <member name="F:Nito.Linq.Implementation.AnonymousReadOnlyList`1.getItem">
      <summary>
            The delegate used to get items in the list.
            </summary>
    </member>
    <member name="M:Nito.Linq.Implementation.AnonymousReadOnlyList`1.#ctor(System.Func{System.Int32,`0},System.Func{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.Implementation.AnonymousReadOnlyList`1" /> class with the specified implementation.
            </summary>
      <param name="getItem">The delegate used to get items in the list.</param>
      <param name="count">The delegate used to get the number of items in the list.</param>
    </member>
    <member name="M:Nito.Linq.Implementation.AnonymousReadOnlyList`1.DoGetItem(System.Int32)">
      <summary>
            Gets an element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get. This index is guaranteed to be valid.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="P:Nito.Linq.Implementation.AnonymousReadOnlyList`1.Count">
      <summary>
            Gets the number of elements contained in this list.
            </summary>
      <returns>The number of elements contained in this list.</returns>
    </member>
    <member name="T:Nito.Linq.Implementation.SortedEnumerableWrapper`1">
      <summary>
            Wraps a source sequence and comparison object.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
    </member>
    <member name="F:Nito.Linq.Implementation.SortedEnumerableWrapper`1.source">
      <summary>
            The source sequence.
            </summary>
    </member>
    <member name="M:Nito.Linq.Implementation.SortedEnumerableWrapper`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Linq.Implementation.SortedEnumerableWrapper`1" /> class with the specified source sequence and comparison object.
            </summary>
      <param name="source">The source sequence.</param>
      <param name="comparer">The comparison object.</param>
    </member>
    <member name="M:Nito.Linq.Implementation.SortedEnumerableWrapper`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:Nito.Linq.Implementation.SortedEnumerableWrapper`1.Comparer">
      <summary>
            Gets a comparison object that defines how this sequence is sorted.
            </summary>
    </member>
    <member name="T:Nito.Linq.Implementation.ListHelper">
      <summary>
            Helper classes and methods for implementing lists.
            </summary>
    </member>
    <member name="M:Nito.Linq.Implementation.ListHelper.CheckRangeArguments(System.Int32,System.Int32,System.Int32)">
      <summary>
            Checks the <paramref name="offset" /> and <paramref name="count" /> arguments for validity when applied to a source of a given length. Allows 0-element ranges, including a 0-element range at the end of the source.
            </summary>
      <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
      <param name="offset">The index into source at which the range begins.</param>
      <param name="count">The number of elements in the range.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset" /> or <paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The range [offset, offset + count) is not within the range [0, sourceLength).</exception>
    </member>
    <member name="M:Nito.Linq.Implementation.ListHelper.CheckExistingIndexArgument(System.Int32,System.Int32)">
      <summary>
            Checks the <paramref name="index" /> argument to see if it refers to an existing element in a source of a given length.
            </summary>
      <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
      <param name="index">The index into the source.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index to an existing element for the source.</exception>
    </member>
    <member name="M:Nito.Linq.Implementation.ListHelper.CheckNewIndexArgument(System.Int32,System.Int32)">
      <summary>
            Checks the <paramref name="index" /> argument to see if it refers to a valid insertion point in a source of a given length.
            </summary>
      <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
      <param name="index">The index into the source.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index to an insertion point for the source.</exception>
    </member>
    <member name="T:Nito.Linq.EnumerableSource">
      <summary>
            Sequence sources.
            </summary>
    </member>
    <member name="M:Nito.Linq.EnumerableSource.Empty``1">
      <summary>
            Creates an empty sequence. Identical to <see cref="M:System.Linq.Enumerable.Empty``1" />.
            </summary>
      <typeparam name="T">The type of elements (not) in the sequence.</typeparam>
      <returns>An empty sequence.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableSource.Return``1(``0)">
      <summary>
            Converts a single value into a sequence containing a single value.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <returns>A sequence containing a single element, <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableSource.Repeat``1(``0,System.Int32)">
      <summary>
            Converts a single value into a sequence containing that value the specified number of times. Identical to Rx's <c>EnumerableEx.Repeat</c>. Identical to <see cref="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)" />, except that if <paramref name="count" /> is less than 0, this method returns an empty sequence instead of raising an exception.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <param name="count">The number of times <paramref name="source" /> is repeated. If <paramref name="count" /> is less than or equal to 0, an empty sequence is returned.</param>
      <returns>A sequence containing <paramref name="count" /> elements, all equal to <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableSource.Repeat``1(``0)">
      <summary>
            Converts a single value into a sequence containing that value an infinite number of times.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="source">The value.</param>
      <returns>A sequence containing an infinite number of elements, all equal to <paramref name="source" />.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableSource.Generate``2(``0,System.Func{``0,``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Generates an infinite sequence by iterating from an initial state; for each state, a sequence is generated.
            </summary>
      <typeparam name="TState">The type of the state.</typeparam>
      <typeparam name="TResult">The type of elements in the sequence.</typeparam>
      <param name="initialState">The starting value of the state.</param>
      <param name="resultSelector">The generator delegate that generates a sequence from a state value.</param>
      <param name="iterate">The iterator delegate that moves the state from one value to the next.</param>
      <returns>An infinite sequence.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableSource.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Generates a sequence by iterating from an initial state until the condition delegate returns <c>false</c>; for each state, a sequence is generated.
            </summary>
      <typeparam name="TState">The type of the state.</typeparam>
      <typeparam name="TResult">The type of elements in the sequence.</typeparam>
      <param name="initialState">The starting value of the state.</param>
      <param name="condition">The condition delegate that determines if a state value constitutes the end of the sequence.</param>
      <param name="resultSelector">The generator delegate that generates a sequence from a state value.</param>
      <param name="iterate">The iterator delegate that moves the state from one value to the next.</param>
      <returns>A generated sequence.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableSource.Generate``2(``0,System.Func{``0,``0},System.Func{``0,``1})">
      <summary>
            Generates an infinite sequence by iterating from an initial state; for each state, a single value is generated.
            </summary>
      <typeparam name="TState">The type of the state.</typeparam>
      <typeparam name="TResult">The type of elements in the sequence.</typeparam>
      <param name="initialState">The starting value of the state.</param>
      <param name="resultSelector">The generator delegate that generates a sequence value from a state value.</param>
      <param name="iterate">The iterator delegate that moves the state from one value to the next.</param>
      <returns>A generated sequence.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableSource.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1})">
      <summary>
            Generates a sequence by iterating from an initial state until the condition delegate returns <c>false</c>; for each state, a single value is generated.
            </summary>
      <typeparam name="TState">The type of the state.</typeparam>
      <typeparam name="TResult">The type of elements in the sequence.</typeparam>
      <param name="initialState">The starting value of the state.</param>
      <param name="condition">The condition delegate that determines if a state value constitutes the end of the sequence.</param>
      <param name="resultSelector">The generator delegate that generates a sequence value from a state value.</param>
      <param name="iterate">The iterator delegate that moves the state from one value to the next.</param>
      <returns>A generated sequence.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableSource.Defer``1(System.Func{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Creates a sequence that invokes the factory delegate whenever the sequence is enumerated.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="factory">The factory delegate that is invoked whenever the returned sequence is enumerated.</param>
      <returns>A sequence that invokes the factory delegate whenever it is enumerated.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableSource.Range(System.Int32,System.Int32)">
      <summary>
            Generates a sequence of integers. Similar to <see cref="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)" />, except that this method will return an empty sequence if <paramref name="count" /> is less than 0.
            </summary>
      <param name="start">The first integer in the returned sequence.</param>
      <param name="count">The number of integers in the returned sequence. If <paramref name="count" /> is less than or equal to 0, an empty sequence is returned.</param>
      <returns>A sequence of integers.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableSource.Generate``1(System.Func{``0})">
      <summary>
            Generates an infinite sequence.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="generator">The generator delegate that generates each value in the sequence.</param>
      <returns>An infinite sequence.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableSource.Generate``1(System.Func{System.Int32,``0})">
      <summary>
            Generates an infinite sequence.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="generator">The generator delegate that generates each value in the sequence.</param>
      <returns>A generated sequence.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableSource.Generate``1(System.Func{System.Int32,``0},System.Int32)">
      <summary>
            Generates a sequence of a specified length.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="generator">The generator delegate that generates each value in the sequence. This may be <c>null</c> if <paramref name="count" /> is less than or equal to 0.</param>
      <param name="count">The number of elements in the resulting sequence. If <paramref name="count" /> is less than or equal to 0, an empty sequence is returned.</param>
      <returns>A generated sequence.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableSource.Generate``1(System.Func{``0},System.Int32)">
      <summary>
            Generates a sequence of a specified length.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="generator">The generator delegate that generates each value in the sequence. This may be <c>null</c> if <paramref name="count" /> is less than or equal to 0.</param>
      <param name="count">The number of elements in the resulting sequence. If <paramref name="count" /> is less than or equal to 0, an empty sequence is returned.</param>
      <returns>A generated sequence.</returns>
    </member>
    <member name="T:Nito.Linq.AnonymousEnumerable`1">
      <summary>
            An object that implements <see cref="T:System.Collections.Generic.IEnumerable`1" /> using a delegate. <see cref="P:Nito.Linq.AnonymousEnumerable`1.GetEnumerator" /> must be set before using an instance of this class.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
    </member>
    <member name="P:Nito.Linq.AnonymousEnumerable`1.GetEnumerator">
      <summary>
            Gets or sets the get-enumerator delegate, which retrieves an enumerator that iterates through the collection.
            </summary>
    </member>
    <member name="T:Nito.Linq.EnumerableExtensions">
      <summary>
            Extension methods for sequences.
            </summary>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
      <summary>
            Concatenates the specified sequences. Similar to <see cref="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />, except this method allows any number of sequences to be concatenated. Similar to Rx's <c>EnumerableEx.Concat</c>, except this method is an extension method.
            </summary>
      <typeparam name="T">The type of elements in the source sequences.</typeparam>
      <param name="first">The first source sequence.</param>
      <param name="second">The second source sequence.</param>
      <param name="others">The other source sequences.</param>
      <returns>The concatenated sequence.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.Zip``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
      <summary>
            Combines three source sequences into a result sequence. If the source sequences are of different lengths, the resulting sequence has a length equal to the smallest of the three.
            </summary>
      <typeparam name="TFirst">The type of elements in the first source sequence.</typeparam>
      <typeparam name="TSecond">The type of elements in the second source sequence.</typeparam>
      <typeparam name="TThird">The type of elements in the third source sequence.</typeparam>
      <typeparam name="TResult">The type of elements in the resulting sequence.</typeparam>
      <param name="first">The first source sequence.</param>
      <param name="second">The second source sequence.</param>
      <param name="third">The third source sequence.</param>
      <param name="zipper">The delegate that creates a new element from corresponding elements of the three source sequences.</param>
      <returns>The resulting combined sequence.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Flattens a sequence of sequences into one long sequence.
            </summary>
      <typeparam name="T">The type of elements in the resulting sequence.</typeparam>
      <param name="source">The sequence of sequences.</param>
      <returns>The flattened sequence.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.Step``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Steps through a sequence using a specified step size. The first element of the resulting sequence is the first element of the source sequence.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="source">The sequence to step through.</param>
      <param name="step">The step size. Must be greater than 0.</param>
      <returns>The stepped sequence.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="step" /> is less than or equal to 0.</exception>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.Rotate``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Rotates a sequence by a given offset. This method may enumerate the sequence more than once.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="source">The source sequence to rotate.</param>
      <param name="offset">The number of elements to rotate. If <paramref name="offset" /> is less than or equal to 0, or if <paramref name="offset" /> is greater than or equal to the number of elements in the sequence, then the result of this method is identical to the source sequence.</param>
      <returns>The rotated sequence.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Determines the index of an element in a sequence using the default equality comparer.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
      <param name="source">The sequence in which to locate the value.</param>
      <param name="value">The value to locate in the sequence.</param>
      <returns>The index of <paramref name="value" /> if found in the sequence; otherwise, -1.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Determines the index of the first matching element in a sequence.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
      <param name="source">The sequence in which to locate the value.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
      <returns>The index of the first element that returned true from <paramref name="match" /> if found in the sequence; otherwise, -1.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Determines the index of the last matching element in a sequence.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
      <param name="source">The sequence in which to locate the value.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
      <returns>The index of the last element that returned true from <paramref name="match" /> if found in the sequence; otherwise, -1.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Determines the index of the last matching element in a sequence.
            </summary>
      <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
      <param name="source">The sequence in which to locate the value.</param>
      <param name="value">The value to locate in the sequence.</param>
      <returns>The index of the last instance of <paramref name="value" /> if found in the sequence; otherwise, -1.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.IndexOfMin``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the index of the smallest item in a sequence, according to the provided comparison object.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="source">The source sequence to search.</param>
      <param name="comparer">The comparison object.</param>
      <returns>The index of the smallest item in the sequence, or -1 if the sequence is empty.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.IndexOfMin``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the index of the smallest item in a sequence, according to the default comparison object.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="source">The source sequence to search.</param>
      <returns>The index of the smallest item in the sequence, or -1 if the sequence is empty.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.IndexOfMin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
      <summary>
            Returns the index of the smallest item in a sequence, according to the provided comparison delegate.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="source">The source sequence to search.</param>
      <param name="comparer">The comparison delegate.</param>
      <returns>The index of the smallest item in the sequence, or -1 if the sequence is empty.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
      <summary>
            Returns the smallest item in a sequence, according to the provided comparison delegate.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="source">The source sequence to search.</param>
      <param name="comparer">The comparison delegate.</param>
      <returns>The smallest item in the sequence, or the default value of <typeparamref name="T" /> if the sequence is empty.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.IndexOfMax``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the index of the largest item in a sequence, according to the provided comparison object.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="source">The source sequence to search.</param>
      <param name="comparer">The comparison object.</param>
      <returns>The index of the largest item in the sequence, or -1 if the sequence is empty.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.IndexOfMax``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the index of the largest item in a sequence, according to the default comparison object.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="source">The source sequence to search.</param>
      <returns>The index of the largest item in the sequence, or -1 if the sequence is empty.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.IndexOfMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
      <summary>
            Returns the index of the largest item in a sequence, according to the provided comparison delegate.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="source">The source sequence to search.</param>
      <param name="comparer">The comparison delegate.</param>
      <returns>The index of the largest item in the sequence, or -1 if the sequence is empty.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
      <summary>
            Returns the largest item in a sequence, according to the provided comparison delegate.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="source">The source sequence to search.</param>
      <param name="comparer">The comparison delegate.</param>
      <returns>The largest item in the sequence, or the default value of <typeparamref name="T" /> if the sequence is empty.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.SequenceCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Compares this sequence with another sequence lexicographically, using the specified comparison object to compare the sequence items. Returns a negative number if this sequence is less than the other sequence, 0 if the sequences are equal, or a positive number if this sequence is greater than the other sequence.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="source">The source sequence to compare.</param>
      <param name="other">The other sequence against which to compare.</param>
      <param name="comparer">The comparison object used to compare the sequence items.</param>
      <returns>A negative number if this sequence is less than the other sequence, 0 if the sequences are equal, or a positive number if this sequence is greater than the other sequence.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.SequenceCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Compares this sequence with another sequence lexicographically, using the default comparison object to compare the sequence items. Returns a negative number if this sequence is less than the other sequence, 0 if the sequences are equal, or a positive number if this sequence is greater than the other sequence.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="source">The source sequence to compare.</param>
      <param name="other">The other sequence against which to compare.</param>
      <returns>A negative number if this sequence is less than the other sequence, 0 if the sequences are equal, or a positive number if this sequence is greater than the other sequence.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.SequenceCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
      <summary>
            Compares this sequence with another sequence lexicographically, using the specified comparison delegate to compare the sequence items. Returns a negative number if this sequence is less than the other sequence, 0 if the sequences are equal, or a positive number if this sequence is greater than the other sequence.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="source">The source sequence to compare.</param>
      <param name="other">The other sequence against which to compare.</param>
      <param name="comparer">The comparison delegate used to compare the sequence items.</param>
      <returns>A negative number if this sequence is less than the other sequence, 0 if the sequences are equal, or a positive number if this sequence is greater than the other sequence.</returns>
    </member>
    <member name="M:Nito.Linq.EnumerableExtensions.StepCore``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Steps through a sequence using a specified step size. The first element of the resulting sequence is the first element of the source sequence.
            </summary>
      <typeparam name="T">The type of elements in the sequence.</typeparam>
      <param name="source">The sequence to step through.</param>
      <param name="step">The step size. Must be greater than 0.</param>
      <returns>The stepped sequence.</returns>
    </member>
    <member name="T:Nito.Async.ActionDispatcher">
      <summary>
            A thread-safe queue of actions. Provides an event-based message loop when <see cref="M:Nito.Async.ActionDispatcher.Run" />, along with a synchronization context for the executed actions.
            </summary>
    </member>
    <member name="M:Nito.Async.ActionDispatcher.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.ActionDispatcher" /> class with an empty action queue.
            </summary>
    </member>
    <member name="M:Nito.Async.ActionDispatcher.Dispose">
      <summary>
            Releases all resources.
            </summary>
    </member>
    <member name="M:Nito.Async.ActionDispatcher.Run">
      <summary>
            Executes the action queue.
            </summary>
    </member>
    <member name="M:Nito.Async.ActionDispatcher.QueueAction(System.Action)">
      <summary>
            Queues an action to an action dispatcher.
            </summary>
      <param name="action">The action to execute.</param>
    </member>
    <member name="M:Nito.Async.ActionDispatcher.QueueExit">
      <summary>
            Queues an exit action, causing <see cref="M:Nito.Async.ActionDispatcher.Run" /> to return.
            </summary>
    </member>
    <member name="P:Nito.Async.ActionDispatcher.Current">
      <summary>
            Gets the currently active action queue. For executing actions, this is their own action queue; for other threads, this is null.
            </summary>
    </member>
    <member name="T:Nito.Async.ActionDispatcherSynchronizationContext">
      <summary>
            Provides a synchronization context for a thread running an <see cref="T:Nito.Async.ActionDispatcher" />.
            </summary>
    </member>
    <member name="M:Nito.Async.ActionDispatcherSynchronizationContext.#ctor(Nito.Async.ActionDispatcher)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.ActionDispatcherSynchronizationContext" /> class by using the specified <see cref="T:Nito.Async.ActionDispatcher" />.
            </summary>
      <param name="actionDispatcher">The action queue to associate with this <see cref="T:Nito.Async.ActionDispatcherSynchronizationContext" />.</param>
    </member>
    <member name="M:Nito.Async.ActionDispatcherSynchronizationContext.CreateCopy">
      <summary>
            Creates a copy of this <see cref="T:Nito.Async.ActionDispatcherSynchronizationContext" />.
            </summary>
      <returns>The copy of this synchronization context.</returns>
    </member>
    <member name="M:Nito.Async.ActionDispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
            Invokes the callback in the synchronization context asynchronously. The callback is placed in the action queue.
            </summary>
      <param name="d">The delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="M:Nito.Async.ActionDispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
            Invokes the callback in the synchronization context synchronously. The callback is placed in the action queue.
            </summary>
      <param name="d">The delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="T:Nito.Async.ActionThread">
      <summary>
            A thread that executes actions when commanded and provides its own <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
    </member>
    <member name="M:Nito.Async.ActionThread.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.ActionThread" /> class, creating a child thread waiting for commands.
            </summary>
    </member>
    <member name="M:Nito.Async.ActionThread.Join(System.TimeSpan)">
      <summary>
            Requests this <see cref="T:Nito.Async.ActionThread" /> to exit and then blocks the calling thread until either this <see cref="T:Nito.Async.ActionThread" /> exits or a timeout occurs.
            </summary>
      <param name="timeout">The length of time to wait for this <see cref="T:Nito.Async.ActionThread" /> to exit.</param>
      <returns>
        <c>true</c> if this <see cref="T:Nito.Async.ActionThread" /> exited cleanly; <c>false</c> if the timout occurred.</returns>
    </member>
    <member name="M:Nito.Async.ActionThread.Join">
      <summary>
            Requests this <see cref="T:Nito.Async.ActionThread" /> to exit and then blocks the calling thread until this <see cref="T:Nito.Async.ActionThread" /> exits.
            </summary>
    </member>
    <member name="M:Nito.Async.ActionThread.Start">
      <summary>
            Starts this <see cref="T:Nito.Async.ActionThread" /> running. A thread may not be started more than once.
            </summary>
    </member>
    <member name="M:Nito.Async.ActionThread.Do(System.Action)">
      <summary>
            Queues work for the <see cref="T:Nito.Async.ActionThread" /> to do.
            </summary>
      <param name="action">The work to do. This delegate may not throw an exception.</param>
    </member>
    <member name="M:Nito.Async.ActionThread.DoSynchronously(System.Action,System.TimeSpan)">
      <summary>
            Queues work for the <see cref="T:Nito.Async.ActionThread" /> to do, and blocks the calling thread until it is complete or until the specified time has elapsed.
            </summary>
      <param name="action">The work to do. This delegate may not throw an exception.</param>
      <param name="timeout">The time to wait for <paramref name="action" /> to execute.</param>
      <returns>
        <c>true</c> if <paramref name="action" /> executed completely; <c>false</c> if there was a timeout.</returns>
    </member>
    <member name="M:Nito.Async.ActionThread.DoSynchronously(System.Action)">
      <summary>
            Queues work for the <see cref="T:Nito.Async.ActionThread" /> to do, and blocks the calling thread until it is complete.
            </summary>
      <param name="action">The work to do. This delegate may not throw an exception.</param>
    </member>
    <member name="M:Nito.Async.ActionThread.DoGet``1(System.Func{``0})">
      <summary>
            Queues work for the <see cref="T:Nito.Async.ActionThread" /> to do, and blocks the calling thread until it is complete.
            </summary>
      <param name="action">The work to do. This delegate may not throw an exception.</param>
      <typeparam name="T">The type of object retrieved by the delegate.</typeparam>
      <returns>The return value of the delegate.</returns>
    </member>
    <member name="M:Nito.Async.ActionThread.Dispose">
      <summary>
            Requests this <see cref="T:Nito.Async.ActionThread" /> to exit, blocks the calling thread until this <see cref="T:Nito.Async.ActionThread" /> exits, and then cleans up all resources.
            </summary>
    </member>
    <member name="P:Nito.Async.ActionThread.IsAlive">
      <summary>
            Gets a value indicating whether this <see cref="T:Nito.Async.ActionThread" /> is still alive (has started but not yet exited).
            </summary>
    </member>
    <member name="P:Nito.Async.ActionThread.IsBackground">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Nito.Async.ActionThread" /> is a background thread. This property may not be accessed after a <see cref="Overload:Nito.Async.ActionThread.Join" />.
            </summary>
    </member>
    <member name="P:Nito.Async.ActionThread.ManagedThreadId">
      <summary>
            Gets a unique identifier for this <see cref="T:Nito.Async.ActionThread" />.
            </summary>
    </member>
    <member name="P:Nito.Async.ActionThread.Name">
      <summary>
            Gets or sets the name of this <see cref="T:Nito.Async.ActionThread" />. This property may only be set once, before the thread is started.
            </summary>
    </member>
    <member name="P:Nito.Async.ActionThread.Priority">
      <summary>
            Gets or sets a value indicating the scheduling priority of this <see cref="T:Nito.Async.ActionThread" />. This property may not be accessed after a <see cref="Overload:Nito.Async.ActionThread.Join" />.
            </summary>
    </member>
    <member name="T:Nito.Async.AsyncTimeoutTimer">
      <summary>
            Obsolete. Provides asynchronous timeout notifications.
            </summary>
    </member>
    <member name="M:Nito.Async.AsyncTimeoutTimer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.AsyncTimeoutTimer" /> class.
            </summary>
    </member>
    <member name="M:Nito.Async.AsyncTimeoutTimer.Dispose">
      <summary>
            Frees all system resources for the timer. This method will <see cref="M:Nito.Async.AsyncTimeoutTimer.Cancel" /> the timer if it is active.
            </summary>
    </member>
    <member name="M:Nito.Async.AsyncTimeoutTimer.Set(System.TimeSpan)">
      <summary>
            Starts a timeout.
            </summary>
      <param name="when">The timeout value.</param>
    </member>
    <member name="M:Nito.Async.AsyncTimeoutTimer.Reset">
      <summary>
            Re-starts the current timeout. See <see cref="M:Nito.Async.AsyncTimeoutTimer.Set(System.TimeSpan)" />.
            </summary>
    </member>
    <member name="M:Nito.Async.AsyncTimeoutTimer.Cancel">
      <summary>
            Cancels a timeout.
            </summary>
    </member>
    <member name="E:Nito.Async.AsyncTimeoutTimer.Timeout">
      <summary>
            Notifies that a timeout has occurred.
            </summary>
    </member>
    <member name="T:Nito.Async.CallbackContext">
      <summary>
            Provides a context to which delegates may be bound.
            </summary>
    </member>
    <member name="M:Nito.Async.CallbackContext.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.CallbackContext" /> class.
            </summary>
    </member>
    <member name="M:Nito.Async.CallbackContext.Reset">
      <summary>
            Resets a context. This invalidates all delegates currently bound to this context.
            </summary>
    </member>
    <member name="M:Nito.Async.CallbackContext.Bind(System.Action)">
      <summary>
            Binds a delegate to this context, and returns the bound, valid delegate.
            </summary>
      <param name="action">The contained delegate.</param>
      <returns>A valid delegate bound to the current context.</returns>
    </member>
    <member name="M:Nito.Async.CallbackContext.Bind``1(System.Func{``0})">
      <summary>
            Binds a delegate to this context, and returns the bound, valid delegate.
            </summary>
      <param name="func">The contained delegate.</param>
      <typeparam name="T">The return value of the contained and bound delegates.</typeparam>
      <returns>A valid delegate bound to the current context.</returns>
    </member>
    <member name="M:Nito.Async.CallbackContext.Bind(System.Action,System.ComponentModel.ISynchronizeInvoke)">
      <summary>
            Synchronizes a delegate and then binds it to this context, and returns a synchronous, synchronized, bound, valid delegate.
            </summary>
      <param name="action">The contained delegate. This delegate should not raise exceptions.</param>
      <param name="synchronizingObject">The object to use for synchronizing the delegate if necessary.</param>
      <returns>A valid delegate bound to the current context.</returns>
    </member>
    <member name="M:Nito.Async.CallbackContext.Bind(System.Action,System.Threading.SynchronizationContext)">
      <summary>
            Synchronizes a delegate and then binds it to this context, and returns a synchronous, synchronized, bound, valid delegate.
            </summary>
      <param name="action">The contained delegate. This delegate should not raise exceptions.</param>
      <param name="synchronizationContext">The object to use for synchronizing the delegate if necessary.</param>
      <returns>A valid delegate bound to the current context.</returns>
    </member>
    <member name="M:Nito.Async.CallbackContext.Bind(System.Action,System.Threading.SynchronizationContext,System.Boolean)">
      <summary>
            Synchronizes a delegate and then binds it to this context, and returns a synchronous, synchronized, bound, valid delegate.
            </summary>
      <param name="action">The contained delegate. This delegate should not raise exceptions.</param>
      <param name="synchronizationContext">The object to use for synchronizing the delegate if necessary.</param>
      <param name="checkSynchronizationContextVerification">Whether to verify that <paramref name="synchronizationContext" /> does support <see cref="F:Nito.Async.SynchronizationContextProperties.Synchronized" />.</param>
      <returns>A valid delegate bound to the current context.</returns>
    </member>
    <member name="M:Nito.Async.CallbackContext.Bind``1(System.Func{``0},System.ComponentModel.ISynchronizeInvoke)">
      <summary>
            Synchronizes a delegate and then binds it to this context, and returns a synchronous, synchronized, bound, valid delegate.
            </summary>
      <param name="func">The contained delegate. This delegate should not raise exceptions.</param>
      <param name="synchronizingObject">The object to use for synchronizing the delegate if necessary.</param>
      <typeparam name="T">The return value of the contained and bound delegates.</typeparam>
      <returns>A valid delegate bound to the current context.</returns>
    </member>
    <member name="M:Nito.Async.CallbackContext.Bind``1(System.Func{``0},System.Threading.SynchronizationContext)">
      <summary>
            Synchronizes a delegate and then binds it to this context, and returns a synchronous, synchronized, bound, valid delegate.
            </summary>
      <param name="func">The contained delegate. This delegate should not raise exceptions.</param>
      <param name="synchronizationContext">The object to use for synchronizing the delegate.</param>
      <typeparam name="T">The return value of the contained and bound delegates.</typeparam>
      <returns>A valid delegate bound to the current context.</returns>
    </member>
    <member name="M:Nito.Async.CallbackContext.Bind``1(System.Func{``0},System.Threading.SynchronizationContext,System.Boolean)">
      <summary>
            Synchronizes a delegate and then binds it to this context, and returns a synchronous, synchronized, bound, valid delegate.
            </summary>
      <param name="func">The contained delegate. This delegate should not raise exceptions.</param>
      <param name="synchronizationContext">The object to use for synchronizing the delegate.</param>
      <param name="checkSynchronizationContextVerification">Whether to verify that <paramref name="synchronizationContext" /> does support <see cref="F:Nito.Async.SynchronizationContextProperties.Synchronized" />.</param>
      <typeparam name="T">The return value of the contained and bound delegates.</typeparam>
      <returns>A valid delegate bound to the current context.</returns>
    </member>
    <member name="M:Nito.Async.CallbackContext.AsyncBind(System.Action,System.Threading.SynchronizationContext)">
      <summary>
            Synchronizes a delegate and then binds it to this context, and returns an asynchronous, synchronized, bound, valid delegate.
            </summary>
      <param name="action">The contained delegate. This delegate should not raise exceptions.</param>
      <param name="synchronizationContext">The object to use for synchronizing the delegate if necessary.</param>
      <returns>A valid delegate bound to the current context.</returns>
    </member>
    <member name="M:Nito.Async.CallbackContext.AsyncBind(System.Action,System.Threading.SynchronizationContext,System.Boolean)">
      <summary>
            Synchronizes a delegate and then binds it to this context, and returns an asynchronous, synchronized, bound, valid delegate.
            </summary>
      <param name="action">The contained delegate. This delegate should not raise exceptions.</param>
      <param name="synchronizationContext">The object to use for synchronizing the delegate if necessary.</param>
      <param name="checkSynchronizationContextVerification">Whether to verify that <paramref name="synchronizationContext" /> does support <see cref="F:Nito.Async.SynchronizationContextProperties.Synchronized" />.</param>
      <returns>A valid delegate bound to the current context.</returns>
    </member>
    <member name="M:Nito.Async.CallbackContext.Dispose">
      <summary>
            Invalidates all delegates bound to this context.
            </summary>
    </member>
    <member name="P:Nito.Async.CallbackContext.Invalidated">
      <summary>
            Gets a value indicating whether all delegates previously bound to this context have been invalidated. Returns false if there is at least one delegate that is valid.
            </summary>
    </member>
    <member name="T:Nito.Async.AsyncResultEventArgs`1">
      <summary>
            Provides data for the asynchronous event handlers that have one result.
            </summary>
      <typeparam name="T">The type of the result of the asynchronous operation.</typeparam>
    </member>
    <member name="M:Nito.Async.AsyncResultEventArgs`1.#ctor(`0,System.Exception,System.Boolean,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.AsyncResultEventArgs`1" /> class.
            </summary>
      <param name="result">The result of the asynchronous operation.</param>
      <param name="error">Any error that occurred. Null if no error.</param>
      <param name="cancelled">Whether the operation was cancelled.</param>
      <param name="userState">The optional user-defined state object.</param>
    </member>
    <member name="M:Nito.Async.AsyncResultEventArgs`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.AsyncResultEventArgs`1" /> class indicating a successful completion.
            </summary>
      <param name="result">The result of the asynchronous operation.</param>
    </member>
    <member name="M:Nito.Async.AsyncResultEventArgs`1.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.AsyncResultEventArgs`1" /> class indicating an unsuccessful operation.
            </summary>
      <param name="error">The error that occurred.</param>
    </member>
    <member name="P:Nito.Async.AsyncResultEventArgs`1.Result">
      <summary>
            Gets the result of the asynchronous operation. This property may only be read if <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> is null.
            </summary>
    </member>
    <member name="T:Nito.Async.Sync">
      <summary>
            Provides utility methods for implementing asynchronous operations.
            </summary>
    </member>
    <member name="M:Nito.Async.Sync.InvokeAndCallback(System.Action,System.Action{System.ComponentModel.AsyncCompletedEventArgs},System.Object)">
      <summary>
            Runs <paramref name="action" /> followed by <paramref name="callback" /> with arguments indicating success. If <paramref name="action" />
            raises an exception, <paramref name="callback" /> is invoked with arguments indicating the error.
            </summary>
      <param name="action">The action to perform.</param>
      <param name="callback">The callback to indicate success or error.</param>
      <param name="state">The user state to include in the arguments to the callback. May be null.</param>
    </member>
    <member name="M:Nito.Async.Sync.InvokeAndCallback``1(System.Func{``0},System.Action{Nito.Async.AsyncResultEventArgs{``0}},System.Object)">
      <summary>
            Runs <paramref name="action" /> followed by <paramref name="callback" /> with arguments indicating success,
            including its return value. If <paramref name="action" /> raises an exception, <paramref name="callback" />
            is invoked with arguments indicating the error.
            </summary>
      <param name="action">The action to perform.</param>
      <param name="callback">The callback to indicate success or error.</param>
      <param name="state">The user state to include in the arguments to the callback. May be null.</param>
      <typeparam name="T">The type of the result of the action.</typeparam>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeAction(System.Action)">
      <summary>
            Returns an <see cref="T:System.Action" /> that asynchronously executes in the <see cref="T:System.Threading.SynchronizationContext" /> of the thread that called this method.
            </summary>
      <param name="callback">The callback to wrap.</param>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeAction``1(System.Action{``0})">
      <summary>
            Returns an <see cref="T:System.Action`1" /> that asynchronously executes in the <see cref="T:System.Threading.SynchronizationContext" /> of the thread that called this method.
            </summary>
      <param name="callback">The callback to wrap.</param>
      <typeparam name="T">The type of the parameter to the callback.</typeparam>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeAction``2(System.Action{``0,``1})">
      <summary>
            Returns an <see cref="T:System.Action`2" /> that asynchronously executes in the <see cref="T:System.Threading.SynchronizationContext" /> of the thread that called this method.
            </summary>
      <param name="callback">The callback to wrap.</param>
      <typeparam name="T1">The type of the first parameter to the callback.</typeparam>
      <typeparam name="T2">The type of the second parameter to the callback.</typeparam>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeAction``3(System.Action{``0,``1,``2})">
      <summary>
            Returns an <see cref="T:System.Action`3" /> that asynchronously executes in the <see cref="T:System.Threading.SynchronizationContext" /> of the thread that called this method.
            </summary>
      <param name="callback">The callback to wrap.</param>
      <typeparam name="T1">The type of the first parameter to the callback.</typeparam>
      <typeparam name="T2">The type of the second parameter to the callback.</typeparam>
      <typeparam name="T3">The type of the third parameter to the callback.</typeparam>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeAction``4(System.Action{``0,``1,``2,``3})">
      <summary>
            Returns an <see cref="T:System.Action`4" /> that asynchronously executes in the <see cref="T:System.Threading.SynchronizationContext" /> of the thread that called this method.
            </summary>
      <param name="callback">The callback to wrap.</param>
      <typeparam name="T1">The type of the first parameter to the callback.</typeparam>
      <typeparam name="T2">The type of the second parameter to the callback.</typeparam>
      <typeparam name="T3">The type of the third parameter to the callback.</typeparam>
      <typeparam name="T4">The type of the fourth parameter to the callback.</typeparam>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeAsyncCallback(System.AsyncCallback)">
      <summary>
            Returns an <see cref="T:System.AsyncCallback" /> that asynchronously executes in the <see cref="T:System.Threading.SynchronizationContext" /> of the thread that called this method.
            </summary>
      <param name="callback">The callback to wrap.</param>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeTimerCallback(System.Threading.TimerCallback)">
      <summary>
            Returns an <see cref="T:System.Threading.TimerCallback" /> that asynchronously executes in the <see cref="T:System.Threading.SynchronizationContext" /> of the thread that called this method.
            </summary>
      <param name="callback">The callback to wrap.</param>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeWaitCallback(System.Threading.WaitCallback)">
      <summary>
            Returns an <see cref="T:System.Threading.WaitCallback" /> that asynchronously executes in the <see cref="T:System.Threading.SynchronizationContext" /> of the thread that called this method.
            </summary>
      <param name="callback">The callback to wrap.</param>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeWaitOrTimerCallback(System.Threading.WaitOrTimerCallback)">
      <summary>
            Returns an <see cref="T:System.Threading.WaitOrTimerCallback" /> that asynchronously executes in the <see cref="T:System.Threading.SynchronizationContext" /> of the thread that called this method.
            </summary>
      <param name="callback">The callback to wrap.</param>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="T:Nito.Async.GenericSynchronizingObject">
      <summary>
            Allows objects that use <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> (usually using a property named SynchronizingObject) to synchronize to a generic <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
    </member>
    <member name="M:Nito.Async.GenericSynchronizingObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.GenericSynchronizingObject" /> class, binding to <see cref="P:System.Threading.SynchronizationContext.Current">SynchronizationContext.Current</see>.
            </summary>
    </member>
    <member name="M:Nito.Async.GenericSynchronizingObject.BeginInvoke(System.Delegate,System.Object[])">
      <summary>
            Starts the invocation of a delegate synchronized by the <see cref="T:System.Threading.SynchronizationContext" /> of the thread that created this <see cref="T:Nito.Async.GenericSynchronizingObject" />. A corresponding call to <see cref="M:Nito.Async.GenericSynchronizingObject.EndInvoke(System.IAsyncResult)" /> is not required.
            </summary>
      <param name="method">The delegate to run.</param>
      <param name="args">The arguments to pass to <paramref name="method" />.</param>
      <returns>An <see cref="T:System.IAsyncResult" /> that can be used to detect completion of the delegate.</returns>
    </member>
    <member name="M:Nito.Async.GenericSynchronizingObject.EndInvoke(System.IAsyncResult)">
      <summary>
            Waits for the invocation of a delegate to complete, and returns the result of the delegate. This may only be called once for a given <see cref="T:System.IAsyncResult" /> object.
            </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:Nito.Async.GenericSynchronizingObject.BeginInvoke(System.Delegate,System.Object[])" />.</param>
      <returns>The result of the delegate.</returns>
    </member>
    <member name="M:Nito.Async.GenericSynchronizingObject.Invoke(System.Delegate,System.Object[])">
      <summary>
            Synchronously invokes a delegate synchronized with the <see cref="T:System.Threading.SynchronizationContext" /> of the thread that created this <see cref="T:Nito.Async.GenericSynchronizingObject" />.
            </summary>
      <param name="method">The delegate to invoke.</param>
      <param name="args">The parameters for <paramref name="method" />.</param>
      <returns>The result of the delegate.</returns>
    </member>
    <member name="P:Nito.Async.GenericSynchronizingObject.InvokeRequired">
      <summary>
            Gets a value indicating whether the current thread must invoke a delegate.
            </summary>
    </member>
    <member name="T:Nito.Async.ScopedSynchronizationContext">
      <summary>
            Replaces <see cref="P:System.Threading.SynchronizationContext.Current">SynchronizationContext.Current</see> temporarily, restoring the previous synchronization context when disposed.
            </summary>
    </member>
    <member name="M:Nito.Async.ScopedSynchronizationContext.#ctor(System.Threading.SynchronizationContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.ScopedSynchronizationContext" /> class, replacing the current synchronization context with <paramref name="replacementContext" />.
            </summary>
      <param name="replacementContext">The context to temporarily install as the current synchronization context. This may ne null.</param>
    </member>
    <member name="M:Nito.Async.ScopedSynchronizationContext.Dispose">
      <summary>
            Restores <see cref="P:Nito.Async.ScopedSynchronizationContext.PreviousContext" /> as the current synchronization context.
            </summary>
    </member>
    <member name="P:Nito.Async.ScopedSynchronizationContext.PreviousContext">
      <summary>
            Gets the previous synchronization context. This was the value of <see cref="P:System.Threading.SynchronizationContext.Current" /> at the time this object was initialized. This may be null.
            </summary>
    </member>
    <member name="T:Nito.Async.SynchronizationContextProperties">
      <summary>
            Flags that identify differences in behavior in various <see cref="T:System.Threading.SynchronizationContext" /> implementations.
            </summary>
    </member>
    <member name="F:Nito.Async.SynchronizationContextProperties.None">
      <summary>
            The <see cref="T:System.Threading.SynchronizationContext" /> makes no guarantees about any of the properties in <see cref="T:Nito.Async.SynchronizationContextProperties" />.
            </summary>
    </member>
    <member name="F:Nito.Async.SynchronizationContextProperties.NonReentrantPost">
      <summary>
        <see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" /> is guaranteed to be non-reentrant (if called from a thread that is not the <see cref="T:System.Threading.SynchronizationContext" />'s specific associated thread, if any).
            </summary>
    </member>
    <member name="F:Nito.Async.SynchronizationContextProperties.NonReentrantSend">
      <summary>
        <see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> is guaranteed to be non-reentrant (if called from a thread that is not the <see cref="T:System.Threading.SynchronizationContext" />'s specific associated thread, if any).
            </summary>
    </member>
    <member name="F:Nito.Async.SynchronizationContextProperties.Synchronized">
      <summary>
            Delegates queued to the <see cref="T:System.Threading.SynchronizationContext" /> are guaranteed to execute one at a time.
            </summary>
    </member>
    <member name="F:Nito.Async.SynchronizationContextProperties.Sequential">
      <summary>
            Delegates queued to the <see cref="T:System.Threading.SynchronizationContext" /> are guaranteed to execute in order. Any <see cref="T:System.Threading.SynchronizationContext" /> claiming to be <see cref="F:Nito.Async.SynchronizationContextProperties.Sequential" /> should also claim to be <see cref="F:Nito.Async.SynchronizationContextProperties.Synchronized" />.
            </summary>
    </member>
    <member name="F:Nito.Async.SynchronizationContextProperties.SpecificAssociatedThread">
      <summary>
            The <see cref="T:System.Threading.SynchronizationContext" /> has exactly one managed thread associated with it. Any <see cref="T:System.Threading.SynchronizationContext" /> specifying <see cref="F:Nito.Async.SynchronizationContextProperties.SpecificAssociatedThread" /> should also specify <see cref="F:Nito.Async.SynchronizationContextProperties.Synchronized" />.
            </summary>
    </member>
    <member name="F:Nito.Async.SynchronizationContextProperties.Standard">
      <summary>
            The <see cref="T:System.Threading.SynchronizationContext" /> makes the standard guarantees (<see cref="F:Nito.Async.SynchronizationContextProperties.NonReentrantPost" />, <see cref="F:Nito.Async.SynchronizationContextProperties.NonReentrantSend" />, <see cref="F:Nito.Async.SynchronizationContextProperties.Synchronized" />, <see cref="F:Nito.Async.SynchronizationContextProperties.Sequential" />, and <see cref="F:Nito.Async.SynchronizationContextProperties.SpecificAssociatedThread" />). This is defined as a constant because most custom synchronization contexts do make these guarantees.
            </summary>
    </member>
    <member name="T:Nito.Async.SynchronizationContextRegister">
      <summary>
            A global register of <see cref="T:Nito.Async.SynchronizationContextProperties" /> flags for <see cref="T:System.Threading.SynchronizationContext" /> types.
            </summary>
    </member>
    <member name="M:Nito.Async.SynchronizationContextRegister.Register(System.Type,Nito.Async.SynchronizationContextProperties)">
      <summary>
            Registers a <see cref="T:System.Threading.SynchronizationContext" /> type claiming to provide certain guarantees.
            </summary>
      <param name="synchronizationContextType">The type derived from <see cref="T:System.Threading.SynchronizationContext" />.</param>
      <param name="properties">The guarantees provided by this type.</param>
    </member>
    <member name="M:Nito.Async.SynchronizationContextRegister.Lookup(System.Type)">
      <summary>
            Looks up the guarantees for a <see cref="T:System.Threading.SynchronizationContext" /> type.
            </summary>
      <param name="synchronizationContextType">The type derived from <see cref="T:System.Threading.SynchronizationContext" /> to test.</param>
      <returns>The properties guaranteed by <paramref name="synchronizationContextType" />.</returns>
    </member>
    <member name="M:Nito.Async.SynchronizationContextRegister.Verify(System.Type,Nito.Async.SynchronizationContextProperties)">
      <summary>
            Verifies that a <see cref="T:System.Threading.SynchronizationContext" /> satisfies the guarantees required by the calling code.
            </summary>
      <param name="synchronizationContextType">The type derived from <see cref="T:System.Threading.SynchronizationContext" /> to test.</param>
      <param name="properties">The guarantees required by the calling code.</param>
    </member>
    <member name="M:Nito.Async.SynchronizationContextRegister.Verify(Nito.Async.SynchronizationContextProperties)">
      <summary>
            Verifies that <see cref="P:System.Threading.SynchronizationContext.Current" /> satisfies the guarantees required by the calling code.
            </summary>
      <param name="properties">The guarantees required by the calling code.</param>
    </member>
    <member name="T:Nito.Async.Timer">
      <summary>
            Represents a timer that uses <see cref="T:System.Threading.SynchronizationContext" /> to synchronize with its creating thread.
            </summary>
    </member>
    <member name="M:Nito.Async.Timer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.Timer" /> class, binding to <see cref="P:System.Threading.SynchronizationContext.Current">SynchronizationContext.Current</see>.
            </summary>
    </member>
    <member name="M:Nito.Async.Timer.SetSingleShot(System.TimeSpan)">
      <summary>
            Sets the timer to wait for an interval.
            </summary>
      <param name="interval">The interval to wait.</param>
    </member>
    <member name="M:Nito.Async.Timer.SetPeriodic(System.TimeSpan)">
      <summary>
            Sets the timer to periodically wait for an interval.
            </summary>
      <param name="period">The period to wait.</param>
    </member>
    <member name="M:Nito.Async.Timer.Cancel">
      <summary>
            Cancels any pending timeouts.
            </summary>
    </member>
    <member name="M:Nito.Async.Timer.Dispose">
      <summary>
            Frees all resources used by this timer.
            </summary>
    </member>
    <member name="M:Nito.Async.Timer.Restart">
      <summary>
            Disables and then enables the timer, restarting the wait time.
            </summary>
    </member>
    <member name="P:Nito.Async.Timer.Enabled">
      <summary>
            Gets or sets a value indicating whether a timer is enabled.
            </summary>
    </member>
    <member name="P:Nito.Async.Timer.AutoReset">
      <summary>
            Gets or sets a value indicating whether the timer should become enabled again by default when <see cref="E:Nito.Async.Timer.Elapsed" /> returns.
            </summary>
    </member>
    <member name="P:Nito.Async.Timer.Interval">
      <summary>
            Gets or sets a value indicating the approximate time the timer will wait before invoking <see cref="E:Nito.Async.Timer.Elapsed" />. The interval must be equal to a positive number of milliseconds in the range [0, <see cref="F:System.Int32.MaxValue" qualifyHint="true" />].
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">When setting this property, the new interval value is either negative or greater than <see cref="F:System.Int32.MaxValue" qualifyHint="true" /> milliseconds.</exception>
    </member>
    <member name="E:Nito.Async.Timer.Elapsed">
      <summary>
            Occurs when the timer's wait time has elapsed.
            </summary>
    </member>
    <member name="T:Nito.Async.Sockets.ISimpleAsyncTcpConnection">
      <summary>
            Represents a connected data socket built on the asynchronous event-based model using a simple packet/keepalive protocol.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.ISimpleAsyncTcpConnection.WriteAsync(System.Byte[])">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="packet">The packet to write to the socket.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ISimpleAsyncTcpConnection.WriteAsync(System.Byte[],System.Object)">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="packet">The packet to write to the socket.</param>
      <param name="state">The context, which is passed to <see cref="E:Nito.Async.Sockets.ISimpleAsyncTcpConnection.WriteCompleted" /> as <c>e.UserState</c>.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ISimpleAsyncTcpConnection.ShutdownAsync">
      <summary>
            Initiates a shutdown operation. Once a shutdown operation is initiated, only the shutdown operation will complete.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.ISimpleAsyncTcpConnection.Close">
      <summary>
            Gracefully or abortively closes the socket. Once this method is called, no operations will complete.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.ISimpleAsyncTcpConnection.AbortiveClose">
      <summary>
            Abortively closes the socket. Once this method is called, no operations will complete.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.ISimpleAsyncTcpConnection.LocalEndPoint">
      <summary>
            Returns the IP address and port on this side of the connection.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.ISimpleAsyncTcpConnection.RemoteEndPoint">
      <summary>
            Returns the IP address and port on the remote side of the connection.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.ISimpleAsyncTcpConnection.KeepaliveTimeout">
      <summary>
            The amount of time the socket waits before sending a keepalive packet.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.ISimpleAsyncTcpConnection.NoDelay">
      <summary>
            True if the Nagle algorithm has been disabled.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.ISimpleAsyncTcpConnection.LingerState">
      <summary>
            If and how long a graceful shutdown will be performed in the background.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.ISimpleAsyncTcpConnection.PacketArrived">
      <summary>
            Indicates the arrival of a packet, either successfully or with error.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.ISimpleAsyncTcpConnection.WriteCompleted">
      <summary>
            Indicates the completion of a write operation, either successfully or with error.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.ISimpleAsyncTcpConnection.ShutdownCompleted">
      <summary>
            Indicates the completion of a shutdown operation, either successfully or with error.
            </summary>
    </member>
    <member name="T:Nito.Async.Sockets.SimpleClientTcpSocket">
      <summary>
            Represents a client socket built on the asynchronous event-based model using a simple packet/keepalive protocol (see <see cref="T:Nito.Async.Sockets.ISimpleAsyncTcpConnection" />).
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleClientTcpSocket.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Nito.Async.Sockets.SimpleClientTcpSocket" />.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleClientTcpSocket.Dispose">
      <summary>
            Gracefully or abortively closes the socket connection. See <see cref="M:Nito.Async.Sockets.SimpleClientTcpSocket.Close" />.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleClientTcpSocket.Bind(System.Net.IPEndPoint)">
      <summary>
            Binds to a local endpoint. This method is not normally used.
            </summary>
      <param name="bindTo">The local endpoint.</param>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleClientTcpSocket.ConnectAsync(System.Net.IPEndPoint)">
      <summary>
            Initiates a connect operation.
            </summary>
      <param name="server">The address and port of the server to connect to.</param>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleClientTcpSocket.ConnectAsync(System.Net.IPAddress,System.Int32)">
      <summary>
            Initiates a connect operation.
            </summary>
      <param name="address">The address of the server to connect to.</param>
      <param name="port">The port of the server to connect to.</param>
      <param name="server">The address and port of the server to connect to.</param>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleClientTcpSocket.WriteAsync(System.Byte[])">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="packet">The packet to write to the socket.</param>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleClientTcpSocket.WriteAsync(System.Byte[],System.Object)">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="packet">The packet to write to the socket.</param>
      <param name="state">The context, which is passed to <see cref="E:Nito.Async.Sockets.ISimpleAsyncTcpConnection.WriteCompleted" /> as <c>e.UserState</c>.</param>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleClientTcpSocket.ShutdownAsync">
      <summary>
            Initiates a shutdown operation. Once a shutdown operation is initiated, only the shutdown operation will complete.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleClientTcpSocket.Close">
      <summary>
            Gracefully or abortively closes the socket. Once this method is called, no operations will complete.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleClientTcpSocket.AbortiveClose">
      <summary>
            Abortively closes the socket. Once this method is called, no operations will complete.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.SimpleClientTcpSocket.LocalEndPoint">
      <summary>
    
            Returns the IP address and port on this side of the connection.
            
            Only valid once the socket is connected.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.SimpleClientTcpSocket.RemoteEndPoint">
      <summary>
    
            Returns the IP address and port on the remote side of the connection.
            
            Only valid once the socket is connected.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.SimpleClientTcpSocket.KeepaliveTimeout">
      <summary>
            The amount of time the socket waits before sending a keepalive packet.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.SimpleClientTcpSocket.NoDelay">
      <summary>
    
            True if the Nagle algorithm has been disabled.
            
            Only valid once the socket is connected.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.SimpleClientTcpSocket.LingerState">
      <summary>
    
            If and how long a graceful shutdown will be performed in the background.
            
            Only valid once the socket is connected.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.SimpleClientTcpSocket.ConnectCompleted">
      <summary>
            Indicates the completion of a connect operation, either successfully or with error.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.SimpleClientTcpSocket.PacketArrived">
      <summary>
            Indicates the arrival of a packet, either successfully or with error.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.SimpleClientTcpSocket.WriteCompleted">
      <summary>
            Indicates the completion of a write operation, either successfully or with error.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.SimpleClientTcpSocket.ShutdownCompleted">
      <summary>
            Indicates the completion of a shutdown operation, either successfully or with error.
            </summary>
    </member>
    <member name="T:Nito.Async.Sockets.SimpleServerChildTcpSocket">
      <summary>
            Represents a child connection of a listening server socket, built on the asynchronous event-based model using a simple packet/keepalive protocol (see <see cref="T:Nito.Async.Sockets.ISimpleAsyncTcpConnection" />).
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleServerChildTcpSocket.Dispose">
      <summary>
            Gracefully or abortively closes the socket connection. See <see cref="M:Nito.Async.Sockets.SimpleServerChildTcpSocket.Close" />.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleServerChildTcpSocket.WriteAsync(System.Byte[])">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="packet">The packet to write to the socket.</param>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleServerChildTcpSocket.WriteAsync(System.Byte[],System.Object)">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="packet">The packet to write to the socket.</param>
      <param name="state">The context, which is passed to <see cref="E:Nito.Async.Sockets.ISimpleAsyncTcpConnection.WriteCompleted" /> as <c>e.UserState</c>.</param>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleServerChildTcpSocket.ShutdownAsync">
      <summary>
            Initiates a shutdown operation. Once a shutdown operation is initiated, only the shutdown operation will complete.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleServerChildTcpSocket.Close">
      <summary>
            Gracefully or abortively closes the socket. Once this method is called, no operations will complete.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleServerChildTcpSocket.AbortiveClose">
      <summary>
            Abortively closes the socket. Once this method is called, no operations will complete.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.SimpleServerChildTcpSocket.LocalEndPoint">
      <summary>
            Returns the IP address and port on this side of the connection.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.SimpleServerChildTcpSocket.RemoteEndPoint">
      <summary>
            Returns the IP address and port on the remote side of the connection.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.SimpleServerChildTcpSocket.KeepaliveTimeout">
      <summary>
            The amount of time the socket waits before sending a keepalive packet.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.SimpleServerChildTcpSocket.NoDelay">
      <summary>
            True if the Nagle algorithm has been disabled.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.SimpleServerChildTcpSocket.LingerState">
      <summary>
            If and how long a graceful shutdown will be performed in the background.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.SimpleServerChildTcpSocket.PacketArrived">
      <summary>
            Indicates the arrival of a packet, either successfully or with error.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.SimpleServerChildTcpSocket.WriteCompleted">
      <summary>
            Indicates the completion of a write operation, either successfully or with error.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.SimpleServerChildTcpSocket.ShutdownCompleted">
      <summary>
            Indicates the completion of a shutdown operation, either successfully or with error.
            </summary>
    </member>
    <member name="T:Nito.Async.Sockets.SimpleServerTcpSocket">
      <summary>
            Represents a listening server socket built on the asynchronous event-based model.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleServerTcpSocket.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Nito.Async.Sockets.SimpleServerTcpSocket" />.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleServerTcpSocket.Dispose">
      <summary>
            Closes the listening socket. See <see cref="M:Nito.Async.Sockets.SimpleServerTcpSocket.Close" />.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleServerTcpSocket.Close">
      <summary>
            Closes the listening socket immediately and frees all resources.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleServerTcpSocket.Listen(System.Net.IPEndPoint,System.Int32)">
      <summary>
            Binds to a local endpoint and begins listening and accepting connections.
            </summary>
      <param name="bindTo">The local endpoint.</param>
      <param name="backlog">The number of backlog connections for listening.</param>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleServerTcpSocket.Listen(System.Net.IPAddress,System.Int32,System.Int32)">
      <summary>
            Binds to a local endpoint and begins listening and accepting connections.
            </summary>
      <param name="address">The address of the local endpoint.</param>
      <param name="port">The port of the local endpoint.</param>
      <param name="backlog">The number of backlog connections for listening.</param>
      <param name="bindTo">The local endpoint.</param>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleServerTcpSocket.Listen(System.Net.IPEndPoint)">
      <summary>
            Binds to a local endpoint and begins listening and accepting connections.
            </summary>
      <param name="bindTo">The local endpoint.</param>
      <param name="backlog">The number of backlog connections for listening.</param>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleServerTcpSocket.Listen(System.Net.IPAddress,System.Int32)">
      <summary>
            Binds to a local endpoint and begins listening and accepting connections.
            </summary>
      <param name="address">The address of the local endpoint.</param>
      <param name="port">The port of the local endpoint.</param>
      <param name="bindTo">The local endpoint.</param>
      <param name="backlog">The number of backlog connections for listening.</param>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleServerTcpSocket.Listen(System.Int32,System.Int32)">
      <summary>
            Binds to a local endpoint and begins listening and accepting connections.
            </summary>
      <param name="port">The port of the local endpoint.</param>
      <param name="backlog">The number of backlog connections for listening.</param>
      <param name="bindTo">The local endpoint.</param>
    </member>
    <member name="M:Nito.Async.Sockets.SimpleServerTcpSocket.Listen(System.Int32)">
      <summary>
            Binds to a local endpoint and begins listening and accepting connections.
            </summary>
      <param name="port">The port of the local endpoint.</param>
      <param name="bindTo">The local endpoint.</param>
      <param name="backlog">The number of backlog connections for listening.</param>
    </member>
    <member name="P:Nito.Async.Sockets.SimpleServerTcpSocket.LocalEndPoint">
      <summary>
            Returns the IP address and port of the listening socket.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.SimpleServerTcpSocket.ConnectionArrived">
      <summary>
            Indicates the arrival of a new socket connection, either successfully or with error.
            </summary>
    </member>
    <member name="T:Nito.Async.Sockets.SocketPacketProtocol">
      <summary>
            Maintains the necessary buffers for applying a packet protocol over a stream-based socket.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.SocketPacketProtocol.#ctor(Nito.Async.Sockets.IAsyncTcpConnection)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.Sockets.SocketPacketProtocol" /> class bound to a given socket connection.
            </summary>
      <param name="socket">The socket used for communication.</param>
    </member>
    <member name="M:Nito.Async.Sockets.SocketPacketProtocol.WritePacketAsync(Nito.Async.Sockets.IAsyncTcpConnection,System.Byte[],System.Object)">
      <summary>Sends a packet to a socket.</summary>
      <param name="socket">The socket used for communication.</param>
      <param name="packet">The packet to send.</param>
      <param name="state">The user-defined state that is passed to WriteCompleted. May be null.</param>
    </member>
    <member name="M:Nito.Async.Sockets.SocketPacketProtocol.WritePacketAsync(Nito.Async.Sockets.IAsyncTcpConnection,System.Byte[])">
      <summary>Sends a packet to a socket.</summary>
      <param name="socket">The socket used for communication.</param>
      <param name="packet">The packet to send.</param>
      <param name="state">The user-defined state that is passed to WriteCompleted. May be null.</param>
    </member>
    <member name="M:Nito.Async.Sockets.SocketPacketProtocol.WriteKeepaliveAsync(Nito.Async.Sockets.IAsyncTcpConnection)">
      <summary>
            Sends a keepalive (0-length) packet to the socket.
            </summary>
      <param name="socket">The socket used for communication.</param>
    </member>
    <member name="M:Nito.Async.Sockets.SocketPacketProtocol.Start">
      <summary>
            Begins reading from the socket.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.SocketPacketProtocol.Socket">
      <summary>
            Gets the socket used for communication.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.SocketPacketProtocol.PacketArrived">
      <summary>
            Indicates the completion of a packet read from the socket.
            </summary>
    </member>
    <member name="T:Nito.Async.Sockets.CallbackOnErrorsOnly">
      <summary>
            This is a special class that may be passed to some WriteAsync methods to indicate that WriteCompleted should not be called on success.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.CallbackOnErrorsOnly.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Nito.Async.Sockets.CallbackOnErrorsOnly" /> class</summary>
    </member>
    <member name="T:Nito.Async.Sockets.IAsyncTcpConnection">
      <summary>
            Represents a connected data socket built on the asynchronous event-based model.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.IAsyncTcpConnection.ReadAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Initiates a read operation.
            </summary>
      <param name="buffer">The buffer to receive the data.</param>
      <param name="offset">The offset into <paramref name="buffer" /> to write the received data.</param>
      <param name="size">The maximum number of bytes that may be written into <paramref name="buffer" /> at <paramref name="offset" />.</param>
    </member>
    <member name="M:Nito.Async.Sockets.IAsyncTcpConnection.WriteAsync(System.Byte[])">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="buffer">The data to write to the socket.</param>
    </member>
    <member name="M:Nito.Async.Sockets.IAsyncTcpConnection.WriteAsync(System.Byte[],System.Object)">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="buffer">The data to write to the socket.</param>
      <param name="state">The context, which is passed to <see cref="E:Nito.Async.Sockets.IAsyncTcpConnection.WriteCompleted" /> as <c>e.UserState</c>.</param>
    </member>
    <member name="M:Nito.Async.Sockets.IAsyncTcpConnection.WriteAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="buffer">The buffer containing the data to write to the socket.</param>
      <param name="offset">The offset of the data within <paramref name="buffer" />.</param>
      <param name="size">The number of bytes of data, at <paramref name="offset" /> within <paramref name="buffer" />.</param>
    </member>
    <member name="M:Nito.Async.Sockets.IAsyncTcpConnection.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Object)">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="buffer">The buffer containing the data to write to the socket.</param>
      <param name="offset">The offset of the data within <paramref name="buffer" />.</param>
      <param name="size">The number of bytes of data, at <paramref name="offset" /> within <paramref name="buffer" />.</param>
      <param name="state">The context, which is passed to <see cref="E:Nito.Async.Sockets.IAsyncTcpConnection.WriteCompleted" /> as <c>e.UserState</c>.</param>
    </member>
    <member name="M:Nito.Async.Sockets.IAsyncTcpConnection.ShutdownAsync">
      <summary>
            Initiates a shutdown operation. Once a shutdown operation is initiated, only the shutdown operation will complete.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.IAsyncTcpConnection.Close">
      <summary>
            Gracefully or abortively closes the socket. Once this method is called, no operations will complete.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.IAsyncTcpConnection.AbortiveClose">
      <summary>
            Abortively closes the socket. Once this method is called, no operations will complete.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.IAsyncTcpConnection.LocalEndPoint">
      <summary>
            Returns the IP address and port on this side of the connection.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.IAsyncTcpConnection.RemoteEndPoint">
      <summary>
            Returns the IP address and port on the remote side of the connection.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.IAsyncTcpConnection.NoDelay">
      <summary>
            True if the Nagle algorithm has been disabled.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.IAsyncTcpConnection.LingerState">
      <summary>
            If and how long a graceful shutdown will be performed in the background.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.IAsyncTcpConnection.ReadCompleted">
      <summary>
            Indicates the completion of a read operation, either successfully or with error.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.IAsyncTcpConnection.WriteCompleted">
      <summary>
            Indicates the completion of a write operation, either successfully or with error.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.IAsyncTcpConnection.ShutdownCompleted">
      <summary>
            Indicates the completion of a shutdown operation, either successfully or with error.
            </summary>
    </member>
    <member name="T:Nito.Async.Sockets.ClientTcpSocket">
      <summary>
            Represents a client socket built on the asynchronous event-based model (see <see cref="T:Nito.Async.Sockets.IAsyncTcpConnection" />).
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.ClientTcpSocket.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.Sockets.ClientTcpSocket" /> class.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.ClientTcpSocket.Dispose">
      <summary>
            Gracefully or abortively closes the socket connection. See <see cref="M:Nito.Async.Sockets.ClientTcpSocket.Close" />.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.ClientTcpSocket.Bind(System.Net.IPEndPoint)">
      <summary>
            Binds to a local endpoint. This method is not normally used.
            </summary>
      <param name="bindTo">The local endpoint.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ClientTcpSocket.ConnectAsync(System.Net.IPEndPoint)">
      <summary>
            Initiates a connect operation.
            </summary>
      <param name="server">The address and port of the server to connect to.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ClientTcpSocket.ConnectAsync(System.Net.IPAddress,System.Int32)">
      <summary>
            Initiates a connect operation.
            </summary>
      <param name="address">The address of the server to connect to.</param>
      <param name="port">The port of the server to connect to.</param>
      <param name="server">The address and port of the server to connect to.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ClientTcpSocket.ReadAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Initiates a read operation.
            </summary>
      <param name="buffer">The buffer to receive the data.</param>
      <param name="offset">The offset into <paramref name="buffer" /> to write the received data.</param>
      <param name="size">The maximum number of bytes that may be written into <paramref name="buffer" /> at <paramref name="offset" />.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ClientTcpSocket.WriteAsync(System.Byte[])">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="buffer">The data to write to the socket.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ClientTcpSocket.WriteAsync(System.Byte[],System.Object)">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="buffer">The data to write to the socket.</param>
      <param name="state">The context, which is passed to <see cref="E:Nito.Async.Sockets.IAsyncTcpConnection.WriteCompleted" /> as <c>e.UserState</c>.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ClientTcpSocket.WriteAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="buffer">The buffer containing the data to write to the socket.</param>
      <param name="offset">The offset of the data within <paramref name="buffer" />.</param>
      <param name="size">The number of bytes of data, at <paramref name="offset" /> within <paramref name="buffer" />.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ClientTcpSocket.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Object)">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="buffer">The buffer containing the data to write to the socket.</param>
      <param name="offset">The offset of the data within <paramref name="buffer" />.</param>
      <param name="size">The number of bytes of data, at <paramref name="offset" /> within <paramref name="buffer" />.</param>
      <param name="state">The context, which is passed to <see cref="E:Nito.Async.Sockets.IAsyncTcpConnection.WriteCompleted" /> as <c>e.UserState</c>.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ClientTcpSocket.ShutdownAsync">
      <summary>
            Initiates a shutdown operation. Once a shutdown operation is initiated, only the shutdown operation will complete.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.ClientTcpSocket.Close">
      <summary>
            Gracefully or abortively closes the socket. Once this method is called, no operations will complete.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.ClientTcpSocket.AbortiveClose">
      <summary>
            Abortively closes the socket. Once this method is called, no operations will complete.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.ClientTcpSocket.LocalEndPoint">
      <summary>
    
            Returns the IP address and port on this side of the connection.
            
            Only valid once the socket is connected.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.ClientTcpSocket.RemoteEndPoint">
      <summary>
    
            Returns the IP address and port on the remote side of the connection.
            
            Only valid once the socket is connected.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.ClientTcpSocket.NoDelay">
      <summary>
    
            True if the Nagle algorithm has been disabled.
            
            Only valid once the socket is connected.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.ClientTcpSocket.LingerState">
      <summary>
    
            If and how long a graceful shutdown will be performed in the background.
            
            Only valid once the socket is connected.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.ClientTcpSocket.ConnectCompleted">
      <summary>
            Indicates the completion of a connect operation, either successfully or with error.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.ClientTcpSocket.ReadCompleted">
      <summary>
            Indicates the completion of a read operation, either successfully or with error.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.ClientTcpSocket.WriteCompleted">
      <summary>
            Indicates the completion of a write operation, either successfully or with error.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.ClientTcpSocket.ShutdownCompleted">
      <summary>
            Indicates the completion of a shutdown operation, either successfully or with error.
            </summary>
    </member>
    <member name="T:Nito.Async.Sockets.ServerChildTcpSocket">
      <summary>
            Represents a child connection of a listening server socket, built on the asynchronous event-based model (see <see cref="T:Nito.Async.Sockets.IAsyncTcpConnection" />).
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.ServerChildTcpSocket.Dispose">
      <summary>
            Gracefully or abortively closes the socket connection. See <see cref="M:Nito.Async.Sockets.ServerChildTcpSocket.Close" />.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.ServerChildTcpSocket.ReadAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Initiates a read operation.
            </summary>
      <param name="buffer">The buffer to receive the data.</param>
      <param name="offset">The offset into <paramref name="buffer" /> to write the received data.</param>
      <param name="size">The maximum number of bytes that may be written into <paramref name="buffer" /> at <paramref name="offset" />.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ServerChildTcpSocket.WriteAsync(System.Byte[])">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="buffer">The data to write to the socket.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ServerChildTcpSocket.WriteAsync(System.Byte[],System.Object)">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="buffer">The data to write to the socket.</param>
      <param name="state">The context, which is passed to <see cref="E:Nito.Async.Sockets.IAsyncTcpConnection.WriteCompleted" /> as <c>e.UserState</c>.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ServerChildTcpSocket.WriteAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="buffer">The buffer containing the data to write to the socket.</param>
      <param name="offset">The offset of the data within <paramref name="buffer" />.</param>
      <param name="size">The number of bytes of data, at <paramref name="offset" /> within <paramref name="buffer" />.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ServerChildTcpSocket.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Object)">
      <summary>
            Initiates a write operation.
            </summary>
      <param name="buffer">The buffer containing the data to write to the socket.</param>
      <param name="offset">The offset of the data within <paramref name="buffer" />.</param>
      <param name="size">The number of bytes of data, at <paramref name="offset" /> within <paramref name="buffer" />.</param>
      <param name="state">The context, which is passed to <see cref="E:Nito.Async.Sockets.IAsyncTcpConnection.WriteCompleted" /> as <c>e.UserState</c>.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ServerChildTcpSocket.ShutdownAsync">
      <summary>
            Initiates a shutdown operation. Once a shutdown operation is initiated, only the shutdown operation will complete.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.ServerChildTcpSocket.Close">
      <summary>
            Gracefully or abortively closes the socket. Once this method is called, no operations will complete.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.ServerChildTcpSocket.AbortiveClose">
      <summary>
            Abortively closes the socket. Once this method is called, no operations will complete.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.ServerChildTcpSocket.LocalEndPoint">
      <summary>
            Returns the IP address and port on this side of the connection.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.ServerChildTcpSocket.RemoteEndPoint">
      <summary>
            Returns the IP address and port on the remote side of the connection.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.ServerChildTcpSocket.NoDelay">
      <summary>
            True if the Nagle algorithm has been disabled.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.ServerChildTcpSocket.LingerState">
      <summary>
            If and how long a graceful shutdown will be performed in the background.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.ServerChildTcpSocket.ReadCompleted">
      <summary>
            Indicates the completion of a read operation, either successfully or with error.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.ServerChildTcpSocket.WriteCompleted">
      <summary>
            Indicates the completion of a write operation, either successfully or with error.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.ServerChildTcpSocket.ShutdownCompleted">
      <summary>
            Indicates the completion of a shutdown operation, either successfully or with error.
            </summary>
    </member>
    <member name="T:Nito.Async.Sockets.ServerTcpSocket">
      <summary>
            Represents a listening server socket built on the asynchronous event-based model.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.ServerTcpSocket.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.Sockets.ServerTcpSocket" /> class.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.ServerTcpSocket.Dispose">
      <summary>
            Closes the listening socket. See <see cref="M:Nito.Async.Sockets.ServerTcpSocket.Close" />.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.ServerTcpSocket.Close">
      <summary>
            Closes the listening socket immediately and frees all resources.
            </summary>
    </member>
    <member name="M:Nito.Async.Sockets.ServerTcpSocket.Bind(System.Net.IPEndPoint,System.Int32)">
      <summary>
            Binds to a local endpoint and begins listening.
            </summary>
      <param name="bindTo">The local endpoint.</param>
      <param name="backlog">The number of backlog connections for listening.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ServerTcpSocket.Bind(System.Net.IPAddress,System.Int32,System.Int32)">
      <summary>
            Binds to a local endpoint and begins listening.
            </summary>
      <param name="address">The address of the local endpoint.</param>
      <param name="port">The port of the local endpoint.</param>
      <param name="backlog">The number of backlog connections for listening.</param>
      <param name="bindTo">The local endpoint.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ServerTcpSocket.Bind(System.Net.IPEndPoint)">
      <summary>
            Binds to a local endpoint and begins listening.
            </summary>
      <param name="bindTo">The local endpoint.</param>
      <param name="backlog">The number of backlog connections for listening.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ServerTcpSocket.Bind(System.Net.IPAddress,System.Int32)">
      <summary>
            Binds to a local endpoint and begins listening.
            </summary>
      <param name="address">The address of the local endpoint.</param>
      <param name="port">The port of the local endpoint.</param>
      <param name="bindTo">The local endpoint.</param>
      <param name="backlog">The number of backlog connections for listening.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ServerTcpSocket.Bind(System.Int32,System.Int32)">
      <summary>
            Binds to a local endpoint and begins listening.
            </summary>
      <param name="port">The port of the local endpoint.</param>
      <param name="backlog">The number of backlog connections for listening.</param>
      <param name="bindTo">The local endpoint.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ServerTcpSocket.Bind(System.Int32)">
      <summary>
            Binds to a local endpoint and begins listening.
            </summary>
      <param name="port">The port of the local endpoint.</param>
      <param name="bindTo">The local endpoint.</param>
      <param name="backlog">The number of backlog connections for listening.</param>
    </member>
    <member name="M:Nito.Async.Sockets.ServerTcpSocket.AcceptAsync">
      <summary>
            Initiates an accept operation.
            </summary>
    </member>
    <member name="P:Nito.Async.Sockets.ServerTcpSocket.LocalEndPoint">
      <summary>
            Returns the IP address and port of the listening socket.
            </summary>
    </member>
    <member name="E:Nito.Async.Sockets.ServerTcpSocket.AcceptCompleted">
      <summary>
            Indicates the completion of an accept operation, either successfully or with error.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.AnonymousComparer`1">
      <summary>
            Provides an implementation of IComparer by providing a method that compares two objects.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.AnonymousComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
      <summary>
            Creates an instance of IComparer by providing a method that compares two objects.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.AnonymousComparer`1.Compare(`0,`0)">
      <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
    </member>
    <member name="T:System.Concurrency.IScheduler">
      <summary>
            Represents an object that schedules units of work.
            </summary>
    </member>
    <member name="M:System.Concurrency.IScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed.
            </summary>
    </member>
    <member name="M:System.Concurrency.IScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime.
            </summary>
    </member>
    <member name="P:System.Concurrency.IScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Concurrency.EventLoopScheduler">
      <summary>
            Represents an object that schedules units of work on a designated thread.
            </summary>
    </member>
    <member name="M:System.Concurrency.EventLoopScheduler.#ctor">
      <summary>
            Creates an object that schedules units of work on a designated thread.
            </summary>
    </member>
    <member name="M:System.Concurrency.EventLoopScheduler.#ctor(System.String)">
      <summary>
            Creates an object that schedules units of work on a designated thread.
            </summary>
    </member>
    <member name="M:System.Concurrency.EventLoopScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed.
            </summary>
    </member>
    <member name="M:System.Concurrency.EventLoopScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime.
            </summary>
    </member>
    <member name="M:System.Concurrency.EventLoopScheduler.Dispose">
      <summary>
            Ends the thread associated with this scheduler.
            </summary>
    </member>
    <member name="P:System.Concurrency.EventLoopScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Concurrency.NewThreadScheduler">
      <summary>
            Represents an object that schedules units of work on the current thread.
            </summary>
    </member>
    <member name="M:System.Concurrency.NewThreadScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed.
            </summary>
    </member>
    <member name="M:System.Concurrency.NewThreadScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime.
            </summary>
    </member>
    <member name="P:System.Concurrency.NewThreadScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Concurrency.SynchronizationContextScheduler">
      <summary>
            Represents an object that schedules units of work on a provided SynchronizationContext.
            </summary>
    </member>
    <member name="M:System.Concurrency.SynchronizationContextScheduler.#ctor(System.Threading.SynchronizationContext)">
      <summary>
            Creates an object that schedules units of work on the provided SynchronizationContext.
            </summary>
    </member>
    <member name="M:System.Concurrency.SynchronizationContextScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed.
            </summary>
    </member>
    <member name="M:System.Concurrency.SynchronizationContextScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime.
            </summary>
    </member>
    <member name="P:System.Concurrency.SynchronizationContextScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Concurrency.TaskPoolScheduler">
      <summary>
            Represents an object that schedules units of work using a provided TaskFactory.
            </summary>
    </member>
    <member name="M:System.Concurrency.TaskPoolScheduler.#ctor(System.Threading.Tasks.TaskFactory)">
      <summary>
            Creates an object that schedules units of work using the provided TaskFactory.
            </summary>
    </member>
    <member name="M:System.Concurrency.TaskPoolScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed.
            </summary>
    </member>
    <member name="M:System.Concurrency.TaskPoolScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime.
            </summary>
    </member>
    <member name="P:System.Concurrency.TaskPoolScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Disposables.AnonymousDisposable">
      <summary>
            Represents an Action-based disposable.
            </summary>
    </member>
    <member name="M:System.Disposables.AnonymousDisposable.#ctor(System.Action)">
      <summary>
            Constructs a new disposable with the given action used for disposal.
            </summary>
      <param name="dispose">Disposal action.</param>
    </member>
    <member name="M:System.Disposables.AnonymousDisposable.Dispose">
      <summary>
            Calls the disposal action.
            </summary>
    </member>
    <member name="T:System.Disposables.BooleanDisposable">
      <summary>
            Represents an IDisposable that can be checked for status.
            </summary>
    </member>
    <member name="M:System.Disposables.BooleanDisposable.#ctor">
      <summary>
            Constructs a new undisposed BooleanDisposable. 
            </summary>
    </member>
    <member name="M:System.Disposables.BooleanDisposable.Dispose">
      <summary>
            Sets the status to Disposed.
            </summary>
    </member>
    <member name="P:System.Disposables.BooleanDisposable.IsDisposed">
      <summary>
            Gets a value indicating whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Disposables.CancellationDisposable">
      <summary>
            Represents an IDisposable that can be checked for cancellation status.
            </summary>
    </member>
    <member name="M:System.Disposables.CancellationDisposable.#ctor(System.Threading.CancellationTokenSource)">
      <summary>
            Constructs a new CancellationDisposable that uses an existing CancellationTokenSource.
            </summary>
    </member>
    <member name="M:System.Disposables.CancellationDisposable.#ctor">
      <summary>
            Constructs a new CancellationDisposable that uses a new CancellationTokenSource.
            </summary>
    </member>
    <member name="M:System.Disposables.CancellationDisposable.Dispose">
      <summary>
            Cancels the CancellationTokenSource.
            </summary>
    </member>
    <member name="P:System.Disposables.CancellationDisposable.Token">
      <summary>
            Gets the CancellationToken used by this CancellationDisposable.
            </summary>
    </member>
    <member name="T:System.Disposables.ContextDisposable">
      <summary>
            Represents a thread-affine IDisposable.
            </summary>
    </member>
    <member name="M:System.Disposables.ContextDisposable.#ctor(System.Threading.SynchronizationContext,System.IDisposable)">
      <summary>
            Constructs a ContextDisposable that uses a SynchronziationContext on which to dipose the disposable.
            </summary>
    </member>
    <member name="M:System.Disposables.ContextDisposable.Dispose">
      <summary>
            Disposes the wrapped disposable on the provided SynchronizationContext.
            </summary>
    </member>
    <member name="P:System.Disposables.ContextDisposable.Context">
      <summary>
            Gets the provided SynchronizationContext.
            </summary>
    </member>
    <member name="T:System.Disposables.DefaultDisposable">
      <summary>
            Represents a disposable that does nothing on disposal.
            </summary>
    </member>
    <member name="F:System.Disposables.DefaultDisposable.Instance">
      <summary>
            Singleton default disposable.
            </summary>
    </member>
    <member name="M:System.Disposables.DefaultDisposable.Dispose">
      <summary>
            Does nothing.
            </summary>
    </member>
    <member name="T:System.Disposables.Disposable">
      <summary>
            Provides a set of static methods for creating Disposables.
            </summary>
    </member>
    <member name="M:System.Disposables.Disposable.Create(System.Action)">
      <summary>
            Creates the disposable that invokes dispose when disposed.
            </summary>
    </member>
    <member name="P:System.Disposables.Disposable.Empty">
      <summary>
            Represents the disposable that does nothing when disposed.
            </summary>
    </member>
    <member name="T:System.Disposables.CompositeDisposable">
      <summary>
            Represents a group of Disposables that are disposed together.
            </summary>
    </member>
    <member name="M:System.Disposables.CompositeDisposable.#ctor(System.IDisposable[])">
      <summary>
            Constructs a GroupDisposable from a group of disposables.
            </summary>
    </member>
    <member name="M:System.Disposables.CompositeDisposable.Add(System.IDisposable)">
      <summary>
            Adds a disposable to the GroupDisposable or disposes the disposable if the GroupDisposable is disposed.
            </summary>
    </member>
    <member name="M:System.Disposables.CompositeDisposable.Remove(System.IDisposable)">
      <summary>
            Removes and disposes the first occurrence of a disposable from the GroupDisposable.
            </summary>
    </member>
    <member name="M:System.Disposables.CompositeDisposable.Dispose">
      <summary>
            Disposes all disposables in the group and removes them from the group.
            </summary>
    </member>
    <member name="M:System.Disposables.CompositeDisposable.Clear">
      <summary>
            Removes and disposes all disposables from the GroupDisposable, but does not dispose the GroupDisposable.
            </summary>
    </member>
    <member name="M:System.Disposables.CompositeDisposable.Contains(System.IDisposable)">
      <summary>
            Determines whether the GroupDisposable contains a specific disposable.
            </summary>
    </member>
    <member name="M:System.Disposables.CompositeDisposable.CopyTo(System.IDisposable[],System.Int32)">
      <summary>
            Copies the disposables contained in the GroupDisposable to an Array, starting at a particular Array index.
            </summary>
    </member>
    <member name="M:System.Disposables.CompositeDisposable.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the GroupDisposable.
            </summary>
    </member>
    <member name="P:System.Disposables.CompositeDisposable.Count">
      <summary>
            Gets the number of disposables contained in the GroupDisposable.
            </summary>
    </member>
    <member name="P:System.Disposables.CompositeDisposable.IsReadOnly">
      <summary>
            Always returns false.
            </summary>
    </member>
    <member name="T:System.Disposables.RefCountDisposable">
      <summary>
            Represents a disposable that only disposes its underlying disposable when all dependent disposables have been disposed.
            </summary>
    </member>
    <member name="M:System.Disposables.RefCountDisposable.#ctor(System.IDisposable)">
      <summary>
            Creates a disposable that only disposes its underlying disposable when all dependent disposables have been disposed.
            </summary>
    </member>
    <member name="M:System.Disposables.RefCountDisposable.Dispose">
      <summary>
            Disposes the underlying disposable only when all dependent disposables have been disposed.
            </summary>
    </member>
    <member name="M:System.Disposables.RefCountDisposable.GetDisposable">
      <summary>
            Returns a disposable that when disposed decreases the refcount on the underlying disposable.
            </summary>
    </member>
    <member name="T:System.Disposables.MutableDisposable">
      <summary>
            Represents a disposable whose underlying disposable can be swapped for another disposable.
            </summary>
    </member>
    <member name="M:System.Disposables.MutableDisposable.#ctor">
      <summary>
            Constructs a new MutableDisposable with no current underlying disposable.
            </summary>
    </member>
    <member name="M:System.Disposables.MutableDisposable.Dispose">
      <summary>
            Disposes the underlying disposable as well as all future replacements.
            </summary>
    </member>
    <member name="P:System.Disposables.MutableDisposable.Disposable">
      <summary>
            Gets a value indicating whether the MutableDisposable has an underlying disposable.
            </summary>
    </member>
    <member name="T:System.Disposables.ScheduledDisposable">
      <summary>
            Represents an object that schedules units of work on a provided scheduler.
            </summary>
    </member>
    <member name="M:System.Disposables.ScheduledDisposable.#ctor(System.Concurrency.IScheduler,System.IDisposable)">
      <summary>
            Constructs a ScheduledDisposable that uses a scheduler on which to dipose the disposable.
            </summary>
    </member>
    <member name="M:System.Disposables.ScheduledDisposable.Dispose">
      <summary>
            Disposes the wrapped disposable on the provided scheduler.
            </summary>
    </member>
    <member name="P:System.Disposables.ScheduledDisposable.Disposable">
      <summary>
            Gets a value indicating the underlying disposable.
            </summary>
    </member>
    <member name="P:System.Disposables.ScheduledDisposable.Scheduler">
      <summary>
            Gets a value indicating the scheduler.
            </summary>
    </member>
    <member name="T:System.Diagnostics.ExceptionExtensions">
      <summary>
            Provides a set of static methods for exceptions.
            </summary>
    </member>
    <member name="M:System.Diagnostics.ExceptionExtensions.PrepareForRethrow(System.Exception)">
      <summary>
            Preserve callstack when rethrowing.
            </summary>
    </member>
    <member name="T:System.IObserver`2">
      <summary>
            Supports push-style iteration over an observable sequence.
            </summary>
    </member>
    <member name="M:System.IObserver`2.OnNext(`0)">
      <summary>
            Notifies the observer of a new value in the sequence.
            </summary>
    </member>
    <member name="M:System.IObserver`2.OnError(System.Exception)">
      <summary>
            Notifies the observer that an exception has occurred.
            </summary>
    </member>
    <member name="M:System.IObserver`2.OnCompleted">
      <summary>
            Notifies the observer of the end of the sequence.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.NotificationKind">
      <summary>
            Indicates the type of a notification.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.Notification`1">
      <summary>
            Represents a notification to an observer.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.Notification`1.OnNext">
      <summary>
            Represents a OnNext notification to an observer.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.OnNext.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.OnNext.ToString">
      <summary>
            Returns a string representation of this instance.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnNext.Value">
      <summary>
            Returns the value of an OnNext notification.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnNext.Exception">
      <summary>
            Returns null.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnNext.HasValue">
      <summary>
            Returns true.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnNext.Kind">
      <summary>
            Returns NotificationKind.OnNext.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.Notification`1.OnError">
      <summary>
            Represents a OnError notification to an observer.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.OnError.#ctor(System.Exception)">
      <summary>
            Constructs a notification of an exception.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.OnError.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.OnError.ToString">
      <summary>
            Returns a string representation of this instance.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnError.Value">
      <summary>
            Throws the exception.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnError.Exception">
      <summary>
            Returns the exception.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnError.HasValue">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnError.Kind">
      <summary>
            Returns NotificationKind.OnError.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.Notification`1.OnCompleted">
      <summary>
            Represents a OnCompleted notification to an observer.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.OnCompleted.#ctor">
      <summary>
            Constructs a notification of the end of a sequence.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.OnCompleted.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.OnCompleted.ToString">
      <summary>
            Returns a string representation of this instance.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnCompleted.Value">
      <summary>
            Throws an InvalidOperationException.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnCompleted.Exception">
      <summary>
            Returns null.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnCompleted.HasValue">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.OnCompleted.Kind">
      <summary>
            Returns NotificationKind.OnCompleted.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.Equals(System.Collections.Generic.Notification{`0})">
      <summary>
            Indicates whether this instance and other are equal.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.op_Equality(System.Collections.Generic.Notification{`0},System.Collections.Generic.Notification{`0})">
      <summary>
            Indicates whether left and right are equal.       
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.op_Inequality(System.Collections.Generic.Notification{`0},System.Collections.Generic.Notification{`0})">
      <summary>
            Indicates whether left and right are not equal.       
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.Accept(System.IObserver{`0})">
      <summary>
            Invokes the observer's method corresponding to the notification.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.Accept``1(System.IObserver{`0,``0})">
      <summary>
            Invokes the observer's method corresponding to the notification and returns the produced result.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
      <summary>
            Invokes the delegate corresponding to the notification.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Notification`1.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
      <summary>
            Invokes the delegate corresponding to the notification and returns the produced result.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.Value">
      <summary>
            Returns the value of an OnNext notification or throws an exception.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.HasValue">
      <summary>
            Returns whether the notification has a value.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.Exception">
      <summary>
            Returns the exception of an OnError notification or returns null.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.Notification`1.Kind">
      <summary>
            Gets the kind of notification that is represented.
            </summary>
    </member>
    <member name="T:System.Concurrency.ControlScheduler">
      <summary>
            Represents an object that schedules units of work on the message loop associated with a control.
            </summary>
    </member>
    <member name="M:System.Concurrency.ControlScheduler.#ctor(System.Windows.Forms.Control)">
      <summary>
            Constructs a ControlScheduler that schedules units of work on the message loop associated with control.
            </summary>
    </member>
    <member name="M:System.Concurrency.ControlScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed on the message loop associated with the control.
            </summary>
    </member>
    <member name="M:System.Concurrency.ControlScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime on the message loop associated with the control.
            </summary>
    </member>
    <member name="P:System.Concurrency.ControlScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="P:System.Concurrency.ControlScheduler.Control">
      <summary>
            Gets the control associated with the ControlScheduler.
            </summary>
    </member>
    <member name="T:System.Concurrency.DispatcherScheduler">
      <summary>
            Represents an object that schedules units of work on a Dispatcher.
            </summary>
    </member>
    <member name="M:System.Concurrency.DispatcherScheduler.#ctor(System.Windows.Threading.Dispatcher)">
      <summary>
            Constructs an DispatcherScheduler that schedules units of work on dispatcher.
            </summary>
    </member>
    <member name="M:System.Concurrency.DispatcherScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed on the dispatcher.
            </summary>
    </member>
    <member name="M:System.Concurrency.DispatcherScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime on the dispatcher.
            </summary>
    </member>
    <member name="P:System.Concurrency.DispatcherScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="P:System.Concurrency.DispatcherScheduler.Dispatcher">
      <summary>
            Gets the dispatcher associated with the DispatcherScheduler.
            </summary>
    </member>
    <member name="T:System.Concurrency.ImmediateScheduler">
      <summary>
            Represents an object that schedules units of work to run immediately on the current thread.
            </summary>
    </member>
    <member name="M:System.Concurrency.ImmediateScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed.
            </summary>
    </member>
    <member name="M:System.Concurrency.ImmediateScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime.
            </summary>
    </member>
    <member name="P:System.Concurrency.ImmediateScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Concurrency.ThreadPoolScheduler">
      <summary>
            Represents an object that schedules units of work on the threadpool.
            </summary>
    </member>
    <member name="M:System.Concurrency.ThreadPoolScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed.
            </summary>
    </member>
    <member name="M:System.Concurrency.ThreadPoolScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime.
            </summary>
    </member>
    <member name="P:System.Concurrency.ThreadPoolScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Concurrency.CurrentThreadScheduler">
      <summary>
            Represents an object that schedules units of work on the current thread.
            </summary>
    </member>
    <member name="M:System.Concurrency.CurrentThreadScheduler.EnsureTrampoline(System.Action)">
      <summary>
            Ensures action is surrounded by a trampoline.
            </summary>
    </member>
    <member name="M:System.Concurrency.CurrentThreadScheduler.Schedule(System.Action)">
      <summary>
            Schedules action to be executed.
            </summary>
    </member>
    <member name="M:System.Concurrency.CurrentThreadScheduler.Schedule(System.Action,System.TimeSpan)">
      <summary>
            Schedules action to be executed after dueTime.
            </summary>
    </member>
    <member name="P:System.Concurrency.CurrentThreadScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Concurrency.Scheduler">
      <summary>
            Provides a set of static methods for creating Schedulers.
            </summary>
    </member>
    <member name="M:System.Concurrency.Scheduler.Schedule(System.Concurrency.IScheduler,System.Action,System.DateTimeOffset)">
      <summary>
            Schedules action to be executed at dueTime.
            </summary>
    </member>
    <member name="M:System.Concurrency.Scheduler.Schedule(System.Concurrency.IScheduler,System.Action{System.Action})">
      <summary>
            Schedules action to be executed recursively.
            </summary>
    </member>
    <member name="M:System.Concurrency.Scheduler.Schedule(System.Concurrency.IScheduler,System.Action{System.Action{System.TimeSpan}},System.TimeSpan)">
      <summary>
            Schedules action to be executed recursively after each dueTime.
            </summary>
    </member>
    <member name="M:System.Concurrency.Scheduler.Schedule(System.Concurrency.IScheduler,System.Action{System.Action{System.DateTimeOffset}},System.DateTimeOffset)">
      <summary>
            Schedules action to be executed recursively at each dueTime.
            </summary>
    </member>
    <member name="P:System.Concurrency.Scheduler.Immediate">
      <summary>
            Gets the scheduler that schedules work immediately on the current thread.
            </summary>
    </member>
    <member name="P:System.Concurrency.Scheduler.CurrentThread">
      <summary>
            Gets the scheduler that schedules work as soon as possible on the current thread.
            </summary>
    </member>
    <member name="P:System.Concurrency.Scheduler.ThreadPool">
      <summary>
            Gets the scheduler that schedules work on the ThreadPool.
            </summary>
    </member>
    <member name="P:System.Concurrency.Scheduler.NewThread">
      <summary>
            Gets the scheduler that schedules work on a new thread.
            </summary>
    </member>
    <member name="P:System.Concurrency.Scheduler.TaskPool">
      <summary>
            Gets the scheduler that schedules work on the default Task Factory.
            </summary>
    </member>
    <member name="P:System.Concurrency.Scheduler.Dispatcher">
      <summary>
            Gets the scheduler that schedules work on the current Dispatcher.
            </summary>
    </member>
    <member name="T:System.Linq.TimeInterval`1">
      <summary>
            Represents a time interval value.
            </summary>
    </member>
    <member name="M:System.Linq.TimeInterval`1.#ctor(`0,System.TimeSpan)">
      <summary>
            Constructs a timestamped value.
            </summary>
    </member>
    <member name="M:System.Linq.TimeInterval`1.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
    </member>
    <member name="M:System.Linq.TimeInterval`1.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Linq.TimeInterval`1.ToString">
      <summary>
            Returns a string representation of this instance.
            </summary>
    </member>
    <member name="M:System.Linq.TimeInterval`1.op_Equality(System.Linq.TimeInterval{`0},System.Linq.TimeInterval{`0})">
      <summary>
            Indicates whether first and second are equal.       
            </summary>
    </member>
    <member name="M:System.Linq.TimeInterval`1.op_Inequality(System.Linq.TimeInterval{`0},System.Linq.TimeInterval{`0})">
      <summary>
            Indicates whether first and second are not equal.       
            </summary>
    </member>
    <member name="P:System.Linq.TimeInterval`1.Interval">
      <summary>
            Gets the interval.
            </summary>
    </member>
    <member name="P:System.Linq.TimeInterval`1.Value">
      <summary>
            Gets the value.
            </summary>
    </member>
    <member name="T:System.Linq.Timestamped`1">
      <summary>
            Represents a timestamped value.
            </summary>
    </member>
    <member name="M:System.Linq.Timestamped`1.#ctor(`0,System.DateTimeOffset)">
      <summary>
            Constructs a timestamped value.
            </summary>
    </member>
    <member name="M:System.Linq.Timestamped`1.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
    </member>
    <member name="M:System.Linq.Timestamped`1.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Linq.Timestamped`1.ToString">
      <summary>
            Returns a string representation of this instance.
            </summary>
    </member>
    <member name="M:System.Linq.Timestamped`1.op_Equality(System.Linq.Timestamped{`0},System.Linq.Timestamped{`0})">
      <summary>
            Indicates whether first and second are equal.       
            </summary>
    </member>
    <member name="M:System.Linq.Timestamped`1.op_Inequality(System.Linq.Timestamped{`0},System.Linq.Timestamped{`0})">
      <summary>
            Indicates whether first and second are not equal.       
            </summary>
    </member>
    <member name="P:System.Linq.Timestamped`1.Timestamp">
      <summary>
            Gets the timestamp.
            </summary>
    </member>
    <member name="P:System.Linq.Timestamped`1.Value">
      <summary>
            Gets the value.
            </summary>
    </member>
    <member name="T:System.Unit">
      <summary>
            Represents void.
            </summary>
    </member>
    <member name="M:System.Unit.Equals(System.Unit)">
      <summary>
            Always returns true.
            </summary>
    </member>
    <member name="M:System.Unit.Equals(System.Object)">
      <summary>
            Check equality between a unit value and other objects.
            </summary>
    </member>
    <member name="M:System.Unit.GetHashCode">
      <summary>
            Gets the unit value's hash code.
            </summary>
    </member>
    <member name="M:System.Unit.op_Equality(System.Unit,System.Unit)">
      <summary>
            Always returns true.
            </summary>
    </member>
    <member name="M:System.Unit.op_Inequality(System.Unit,System.Unit)">
      <summary>
            Always returns false.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.IEvent`1">
      <summary>
            Represents the Sender and EventArg values of a .NET event.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.IEvent`1.Sender">
      <summary>
            Gets the sender value of the event.
            </summary>
    </member>
    <member name="P:System.Collections.Generic.IEvent`1.EventArgs">
      <summary>
            Gets the event arguments value of the event.
            </summary>
    </member>
    <member name="T:System.Collections.Generic.Event">
      <summary>
            Provides a set of static methods for creating events.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.Event.Create``1(System.Object,``0)">
      <summary>
            Creates an instance of the IEvent interface.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Synchronize``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Synchronizes all access to source.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.ObserveOn``1(System.Collections.Generic.IEnumerable{``0},System.Concurrency.IScheduler)">
      <summary>
            Runs evaluation of sequence on specified scheduler.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.StartWith``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Prepends a value to a sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.StartWith``1(System.Collections.Generic.IEnumerable{``0},``0[])">
      <summary>
            Prepends values to a sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action)">
      <summary>
            Invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{System.Exception})">
      <summary>
            Invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Do``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0})">
      <summary>
            Invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>
            Invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Finally``1(System.Collections.Generic.IEnumerable{``0},System.Action)">
      <summary>
            Invokes finallyAction after source sequence terminates normally or by an exception.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.BufferWithCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
      <summary>
            Projects each value of an enumerable sequence into a buffer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.BufferWithCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Projects each value of an enumerable sequence into a buffer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Defer``1(System.Func{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Returns a sequence that invokes the enumerableFactory function whenever the sequence gets enumerated.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Materialize``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Materializes the implicit notifications of a sequence as explicit notification values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Dematerialize``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.Notification{``0}})">
      <summary>
            Dematerializes the explicit notification values of a sequence as implicit notifications.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Scan``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
            Applies an accumulator function over a sequence and returns each intermediate result.  
            The specified seed value is used as the initial accumulator value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Scan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>
            Applies an accumulator function over a sequence and returns each intermediate result.  
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Scan0``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result.  
            The specified seed value is prepended to the sequence once a message comes in.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.DistinctUntilChanged``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns a sequence that contains only distinct contiguous values according to the keySelector and comparer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.DistinctUntilChanged``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous values according to the comparer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.DistinctUntilChanged``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous values according to the keySelector.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.DistinctUntilChanged``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.While``1(System.Func{System.Boolean},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Repeats source as long as condition holds.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.If``1(System.Func{System.Boolean},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            If condition is true, then thenSource else elseSource.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.DoWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Boolean})">
      <summary>
            Repeats source as long as condition holds.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.Collections.Generic.IEnumerable{``1}},System.Collections.Generic.IEnumerable{``1})">
      <summary>
            Uses selector to determine which source in sources to use, uses defaultSource if no match is found.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Uses selector to determine which source in sources to use, empty if no match is found.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.For``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Concatenates the observable sequences obtained by running the resultSelector for each element in source.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Let``2(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Returns an observable sequence that invokes selector with value whenever a new observer subscribes.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Bypasses a specified number of values at the end of an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Returns a specified number of contiguous values from the end of an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Remotable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Makes a sequence remotable.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
      <summary>
            Projects each value of a sequence to a sequence and flattens the resulting sequences into one sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.OnErrorResumeNext``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Continues the source sequence with the next sequence whether 
            the source sequence terminates normally or by an exception.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.OnErrorResumeNext``1(System.Collections.Generic.IEnumerable{``0}[])">
      <summary>
            Continues a sequence that is terminated normally or by an exception with the next sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.OnErrorResumeNext``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Concat``1(System.Collections.Generic.IEnumerable{``0}[])">
      <summary>
            Concatenates all sequences.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Concat``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Concatenates all sequences.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Catch``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Continues a sequence that is terminated by an exception with the next sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Catch``1(System.Collections.Generic.IEnumerable{``0}[])">
      <summary>
            Continues a sequence that is terminated by an exception with the next sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Catch``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Continues a sequence that is terminated by an exception with the next sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Catch``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1,System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Continues a sequence that is terminated by an exception of the specified type with the sequence
            produced by the handler.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.ForkJoin``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Runs all sequences and combines their last values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.ForkJoin``1(System.Collections.Generic.IEnumerable{``0}[])">
      <summary>
            Runs all sequences and combines their last values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Return``1(``0)">
      <summary>
            Returns a sequence that contains a single value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Throw``1(System.Exception)">
      <summary>
            Returns a sequence that terminates with an exception.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,``0})">
      <summary>
            Generates a sequence by iterating a state from an initial state until
            the condition fails.  For each state, a value is generated dependent
            on the state.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Generate``1(System.Func{System.Collections.Generic.Notification{``0}})">
      <summary>
            Generates an observable sequence by repeatedly calling the function.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Generate``2(``0,System.Func{``0,System.Collections.Generic.Notification{``1}},System.Func{``0,``0})">
      <summary>
            Generates a sequence by iterating a state from an initial state until a completion notification is sent.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Generate``2(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``0})">
      <summary>
            Generates an observable sequence by iterating a state from an initial state until
            the condition fails.  For each state, a sequence  is generated.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``0})">
      <summary>
            Generates an observable sequence by iterating a state from an initial state until
            the condition fails.  For each state, a sequence is generated.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Using``2(System.Func{``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Retrieves resource from resourceSelector for use in resourceUsage and disposes 
            the resource once the resulting sequence terminates.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Repeat``1(``0)">
      <summary>
            Generates a sequence that contains one repeated value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Repeat``1(``0,System.Int32)">
      <summary>
            Generates an observable sequence that contains one repeated value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Repeat``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Repeats the sequence indefinately.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Repeat``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Repeats the sequence repeatCount times.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Retry``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Repeats the sequence until it successfully terminates.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Retry``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Repeats the source  sequence the retryCount times or until it successfully terminates.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Min``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the element with the minimum value by using a specified comparer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns the element with the minimum key value by using the default comparer for keys.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Returns the element with the minimum key value by using a specified key comparer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Max``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the element with the minimum value by using a specified comparer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns the element with the maximum key value by using the default comparer for keys.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Returns the element with the maximum key value by using a specified key comparer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Run``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Evaluates the sequence for its side-effects.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Run``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Evaluates the sequence and invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Run``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{System.Exception})">
      <summary>
            Evaluates the sequence and invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Run``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action)">
      <summary>
            Evaluates the sequence and invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Run``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>
            Evaluates the sequence and invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Run``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0})">
      <summary>
            Evaluates the sequence and invokes the action for its side-effects on each value in the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Determines whether an observable sequence is empty.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Let``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Bind the source to the parameter so that it can be used multiple times
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MemoizeAll``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Creates an enumerable that enumerates the original enumerable only once and caches its results.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Memoize``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Creates an enumerable that enumerates the original enumerable only once and caches its results.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Publish``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Publishes the values of source to each use of the bound parameter.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Publish``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}},``0)">
      <summary>
            Publishes the values of single to each use of the bound parameter starting with an intial value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Replay``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Replays the values of source to each use of the bound parameter.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Replay``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}},System.Int32)">
      <summary>
            Replays bufferSize values of source to each use of the bound parameter.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Prune``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Replays the first value of source to each use of the bound parameter.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Share``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Shares cursor of all enumerators to the sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.Memoize``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Creates an enumerable that enumerates the original enumerable only once and caches its results.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AggregateEnumerable``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
            Applies an accumulator function over sequence. 
            The specified seed value is prepended to the sequence once a message comes in.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AggregateEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>
            Applies an accumulator function over an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.IsEmptyEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Determines whether an observable sequence is empty.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AnyEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Determines whether an observable sequence contains any elements.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AnyEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Determines whether any element of an observable sequence satisfies a condition.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AllEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Determines whether all elements of an observable sequence satisfy a condition.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.ContainsEnumerable``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Determines whether an observable sequence contains a specified element by using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.ContainsEnumerable``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Determines whether an observable sequence contains a specified element by using the default equality comparer.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.CountEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns an System.Int32 that represents the total number of elements in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.LongCountEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns an System.Int64 that represents the total number of elements in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Computes the sum of a sequence of System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            Computes the sum of a sequence of System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            Computes the sum of a sequence of System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Computes the sum of a sequence of System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            Computes the sum of a sequence of System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            Computes the sum of a sequence of nullable System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            Computes the sum of a sequence of nullable System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            Computes the sum of a sequence of nullable System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            Computes the sum of a sequence of nullable System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.SumEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            Computes the sum of a sequence of nullable System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinByEnumerable``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns the element in an observable sequence with the minimum key value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinByEnumerable``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Returns the element in an observable sequence with the minimum key value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the minimum value in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the minimum value in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Returns the minimum value in an observable sequence of System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            Returns the minimum value in an observable sequence of System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            Returns the minimum value in an observable sequence of System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Returns the minimum value in an observable sequence of System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            Returns the minimum value in an observable sequence of System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MinEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxByEnumerable``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns the element in an observable sequence with the minimum key value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxByEnumerable``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Returns the element in an observable sequence with the minimum key value.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the minimum value in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the minimum value in an observable sequence.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Returns the maximum value in an observable sequence of System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            Returns the maximum value in an observable sequence of System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            Returns the maximum value in an observable sequence of System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Returns the maximum value in an observable sequence of System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            Returns the maximum value in an observable sequence of System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.MaxEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of System.Int64 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of nullable System.Double values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of nullable System.Float values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of nullable System.Decimal values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of nullable System.Int32 values.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableEx.AverageEnumerable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
            Computes the AverageEnumerable of an observable sequence of nullable System.Int64 values.
            </summary>
    </member>
    <member name="T:System.Linq.Enumerator">
      <summary>
            Provides a set of static methods for creating enumerators.
            </summary>
    </member>
    <member name="M:System.Linq.Enumerator.AsEnumerator``1(System.Collections.Generic.IEnumerator{``0})">
      <summary>
            Hides the identity of an enumerator.
            </summary>
    </member>
  </members>
</doc>